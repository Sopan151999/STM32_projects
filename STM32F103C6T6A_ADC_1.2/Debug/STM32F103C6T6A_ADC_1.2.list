
STM32F103C6T6A_ADC_1.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bb8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002168  08005cc4  08005cc4  00006cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e2c  08007e2c  0000906c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007e2c  08007e2c  0000906c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007e2c  08007e2c  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e2c  08007e2c  00008e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e30  08007e30  00008e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007e34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000006c  08007ea0  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  08007ea0  00009728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001493f  00000000  00000000  00009095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003119  00000000  00000000  0001d9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00020af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f02  00000000  00000000  00021e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a1b2  00000000  00000000  00022d22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001871e  00000000  00000000  0003ced4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092c3d  00000000  00000000  000555f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e822f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005578  00000000  00000000  000e8274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ed7ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005cac 	.word	0x08005cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005cac 	.word	0x08005cac

0800014c <ApplicationControl>:
volatile uint16_t ADC_count =0;
char snum[5];

uint8_t MSG[35] = {'\0'};

void ApplicationControl(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0

SSD1306_Init();
 8000150:	f000 f8f2 	bl	8000338 <SSD1306_Init>
Handle_start_ADC();
 8000154:	f000 f884 	bl	8000260 <Handle_start_ADC>
Handle_start_pwm();
 8000158:	f000 f8ac 	bl	80002b4 <Handle_start_pwm>
HAL_UART_Init(&huart1);
 800015c:	4835      	ldr	r0, [pc, #212]	@ (8000234 <ApplicationControl+0xe8>)
 800015e:	f004 fe5b 	bl	8004e18 <HAL_UART_Init>

HAL_UART_Transmit(&huart1,(const uint8_t *)"sopan", 10,100);
 8000162:	2364      	movs	r3, #100	@ 0x64
 8000164:	220a      	movs	r2, #10
 8000166:	4934      	ldr	r1, [pc, #208]	@ (8000238 <ApplicationControl+0xec>)
 8000168:	4832      	ldr	r0, [pc, #200]	@ (8000234 <ApplicationControl+0xe8>)
 800016a:	f004 fea5 	bl	8004eb8 <HAL_UART_Transmit>


  SSD1306_GotoXY (0,0);
 800016e:	2100      	movs	r1, #0
 8000170:	2000      	movs	r0, #0
 8000172:	f000 fa49 	bl	8000608 <SSD1306_GotoXY>
  SSD1306_Puts ("SOPAN", &Font_11x18, 1);
 8000176:	2201      	movs	r2, #1
 8000178:	4930      	ldr	r1, [pc, #192]	@ (800023c <ApplicationControl+0xf0>)
 800017a:	4831      	ldr	r0, [pc, #196]	@ (8000240 <ApplicationControl+0xf4>)
 800017c:	f000 fad8 	bl	8000730 <SSD1306_Puts>
  SSD1306_GotoXY (0, 30);
 8000180:	211e      	movs	r1, #30
 8000182:	2000      	movs	r0, #0
 8000184:	f000 fa40 	bl	8000608 <SSD1306_GotoXY>
  SSD1306_Puts ("DHAYE", &Font_11x18, 1);
 8000188:	2201      	movs	r2, #1
 800018a:	492c      	ldr	r1, [pc, #176]	@ (800023c <ApplicationControl+0xf0>)
 800018c:	482d      	ldr	r0, [pc, #180]	@ (8000244 <ApplicationControl+0xf8>)
 800018e:	f000 facf 	bl	8000730 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8000192:	f000 f995 	bl	80004c0 <SSD1306_UpdateScreen>
  HAL_Delay (1000);
 8000196:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800019a:	f001 f8ab 	bl	80012f4 <HAL_Delay>
  SSD1306_Clear();
 800019e:	f000 faec 	bl	800077a <SSD1306_Clear>

	while(1){
//		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);

//		HAL_Delay(5000);
		handle_PWM_duty((ADC_count * 999) / 4095);
 80001a2:	4b29      	ldr	r3, [pc, #164]	@ (8000248 <ApplicationControl+0xfc>)
 80001a4:	881b      	ldrh	r3, [r3, #0]
 80001a6:	b29b      	uxth	r3, r3
 80001a8:	461a      	mov	r2, r3
 80001aa:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80001ae:	fb02 f303 	mul.w	r3, r2, r3
 80001b2:	4a26      	ldr	r2, [pc, #152]	@ (800024c <ApplicationControl+0x100>)
 80001b4:	fb82 1203 	smull	r1, r2, r2, r3
 80001b8:	441a      	add	r2, r3
 80001ba:	12d2      	asrs	r2, r2, #11
 80001bc:	17db      	asrs	r3, r3, #31
 80001be:	1ad3      	subs	r3, r2, r3
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	4618      	mov	r0, r3
 80001c4:	f000 f886 	bl	80002d4 <handle_PWM_duty>
		Handle_LED_Toggle();
 80001c8:	f000 f86a 	bl	80002a0 <Handle_LED_Toggle>
		ADC_count = Handle_result_ADC();
 80001cc:	f000 f852 	bl	8000274 <Handle_result_ADC>
 80001d0:	4603      	mov	r3, r0
 80001d2:	461a      	mov	r2, r3
 80001d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000248 <ApplicationControl+0xfc>)
 80001d6:	801a      	strh	r2, [r3, #0]
		itoa(ADC_count, snum,10);
 80001d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000248 <ApplicationControl+0xfc>)
 80001da:	881b      	ldrh	r3, [r3, #0]
 80001dc:	b29b      	uxth	r3, r3
 80001de:	220a      	movs	r2, #10
 80001e0:	491b      	ldr	r1, [pc, #108]	@ (8000250 <ApplicationControl+0x104>)
 80001e2:	4618      	mov	r0, r3
 80001e4:	f005 f854 	bl	8005290 <itoa>

		SSD1306_GotoXY(0, 0);
 80001e8:	2100      	movs	r1, #0
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 fa0c 	bl	8000608 <SSD1306_GotoXY>
		SSD1306_Puts("DHAYE", &Font_11x18, 1);
 80001f0:	2201      	movs	r2, #1
 80001f2:	4912      	ldr	r1, [pc, #72]	@ (800023c <ApplicationControl+0xf0>)
 80001f4:	4813      	ldr	r0, [pc, #76]	@ (8000244 <ApplicationControl+0xf8>)
 80001f6:	f000 fa9b 	bl	8000730 <SSD1306_Puts>
		SSD1306_GotoXY(0, 30);
 80001fa:	211e      	movs	r1, #30
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fa03 	bl	8000608 <SSD1306_GotoXY>
		SSD1306_Puts("     ", &Font_16x26, 1);  // Print spaces to erase old number
 8000202:	2201      	movs	r2, #1
 8000204:	4913      	ldr	r1, [pc, #76]	@ (8000254 <ApplicationControl+0x108>)
 8000206:	4814      	ldr	r0, [pc, #80]	@ (8000258 <ApplicationControl+0x10c>)
 8000208:	f000 fa92 	bl	8000730 <SSD1306_Puts>
		SSD1306_GotoXY(0, 30);
 800020c:	211e      	movs	r1, #30
 800020e:	2000      	movs	r0, #0
 8000210:	f000 f9fa 	bl	8000608 <SSD1306_GotoXY>
		SSD1306_Puts(snum, &Font_16x26, 1);
 8000214:	2201      	movs	r2, #1
 8000216:	490f      	ldr	r1, [pc, #60]	@ (8000254 <ApplicationControl+0x108>)
 8000218:	480d      	ldr	r0, [pc, #52]	@ (8000250 <ApplicationControl+0x104>)
 800021a:	f000 fa89 	bl	8000730 <SSD1306_Puts>
		Handle_UART_Print("%d/r/n",ADC_count);
 800021e:	4b0a      	ldr	r3, [pc, #40]	@ (8000248 <ApplicationControl+0xfc>)
 8000220:	881b      	ldrh	r3, [r3, #0]
 8000222:	b29b      	uxth	r3, r3
 8000224:	4619      	mov	r1, r3
 8000226:	480d      	ldr	r0, [pc, #52]	@ (800025c <ApplicationControl+0x110>)
 8000228:	f000 f862 	bl	80002f0 <Handle_UART_Print>
		 SSD1306_UpdateScreen();
 800022c:	f000 f948 	bl	80004c0 <SSD1306_UpdateScreen>
		handle_PWM_duty((ADC_count * 999) / 4095);
 8000230:	bf00      	nop
 8000232:	e7b6      	b.n	80001a2 <ApplicationControl+0x56>
 8000234:	20000590 	.word	0x20000590
 8000238:	08005cc4 	.word	0x08005cc4
 800023c:	20000000 	.word	0x20000000
 8000240:	08005ccc 	.word	0x08005ccc
 8000244:	08005cd4 	.word	0x08005cd4
 8000248:	20000088 	.word	0x20000088
 800024c:	80080081 	.word	0x80080081
 8000250:	2000008c 	.word	0x2000008c
 8000254:	20000008 	.word	0x20000008
 8000258:	08005cdc 	.word	0x08005cdc
 800025c:	08005ce4 	.word	0x08005ce4

08000260 <Handle_start_ADC>:
#include <GBL_declare.h>

extern ADC_HandleTypeDef hadc1;


void Handle_start_ADC(void){
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0

	HAL_ADC_Start(&hadc1);
 8000264:	4802      	ldr	r0, [pc, #8]	@ (8000270 <Handle_start_ADC+0x10>)
 8000266:	f001 f941 	bl	80014ec <HAL_ADC_Start>

}
 800026a:	bf00      	nop
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	2000049c 	.word	0x2000049c

08000274 <Handle_result_ADC>:

uint16_t Handle_result_ADC(void){
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0

	HAL_ADC_ConfigChannel(&hadc1,ADC_CHANNEL_0);
 8000278:	2100      	movs	r1, #0
 800027a:	4808      	ldr	r0, [pc, #32]	@ (800029c <Handle_result_ADC+0x28>)
 800027c:	f001 fbc8 	bl	8001a10 <HAL_ADC_ConfigChannel>
	 HAL_ADC_Start(&hadc1);
 8000280:	4806      	ldr	r0, [pc, #24]	@ (800029c <Handle_result_ADC+0x28>)
 8000282:	f001 f933 	bl	80014ec <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1,2);
 8000286:	2102      	movs	r1, #2
 8000288:	4804      	ldr	r0, [pc, #16]	@ (800029c <Handle_result_ADC+0x28>)
 800028a:	f001 f9dd 	bl	8001648 <HAL_ADC_PollForConversion>

	return HAL_ADC_GetValue(&hadc1);
 800028e:	4803      	ldr	r0, [pc, #12]	@ (800029c <Handle_result_ADC+0x28>)
 8000290:	f001 fae0 	bl	8001854 <HAL_ADC_GetValue>
 8000294:	4603      	mov	r3, r0
 8000296:	b29b      	uxth	r3, r3
}
 8000298:	4618      	mov	r0, r3
 800029a:	bd80      	pop	{r7, pc}
 800029c:	2000049c 	.word	0x2000049c

080002a0 <Handle_LED_Toggle>:
/*Handle gpio PA5*/
void Handle_LED_SET(void){
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
}
/*Handle gpio PA5*/
void Handle_LED_Toggle(void){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80002a4:	2120      	movs	r1, #32
 80002a6:	4802      	ldr	r0, [pc, #8]	@ (80002b0 <Handle_LED_Toggle+0x10>)
 80002a8:	f002 fb18 	bl	80028dc <HAL_GPIO_TogglePin>
}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40010800 	.word	0x40010800

080002b4 <Handle_start_pwm>:
/* handle PWM Duty cycle */
#include <GBL_declare.h>

extern TIM_HandleTypeDef htim2;

void Handle_start_pwm(void){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim2);
 80002b8:	4805      	ldr	r0, [pc, #20]	@ (80002d0 <Handle_start_pwm+0x1c>)
 80002ba:	f003 febf 	bl	800403c <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Init(&htim2);
 80002be:	4804      	ldr	r0, [pc, #16]	@ (80002d0 <Handle_start_pwm+0x1c>)
 80002c0:	f003 ff00 	bl	80040c4 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80002c4:	2108      	movs	r1, #8
 80002c6:	4802      	ldr	r0, [pc, #8]	@ (80002d0 <Handle_start_pwm+0x1c>)
 80002c8:	f003 ff54 	bl	8004174 <HAL_TIM_PWM_Start>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	20000548 	.word	0x20000548

080002d4 <handle_PWM_duty>:
/* pin PA2 Tim2 Channel 3*/
void handle_PWM_duty(uint16_t duty){
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	80fb      	strh	r3, [r7, #6]

	TIM2->CCR3= duty;
 80002de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e2:	88fb      	ldrh	r3, [r7, #6]
 80002e4:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80002e6:	bf00      	nop
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr

080002f0 <Handle_UART_Print>:
float temp = 36.5;
char *name = "Sopan";

UART_Print("ADC = %d, Temp = %.2f, Name = %s\r\n", adc_val, temp, name);
 */
void Handle_UART_Print(const char *format, ...) {
 80002f0:	b40f      	push	{r0, r1, r2, r3}
 80002f2:	b580      	push	{r7, lr}
 80002f4:	b09c      	sub	sp, #112	@ 0x70
 80002f6:	af00      	add	r7, sp, #0
    char buffer[100];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80002f8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80002fc:	607b      	str	r3, [r7, #4]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 80002fe:	f107 0008 	add.w	r0, r7, #8
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000306:	2164      	movs	r1, #100	@ 0x64
 8000308:	f005 f834 	bl	8005374 <vsniprintf>
 800030c:	66f8      	str	r0, [r7, #108]	@ 0x6c
    va_end(args);

    if (len > 0) {
 800030e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000310:	2b00      	cmp	r3, #0
 8000312:	dd07      	ble.n	8000324 <Handle_UART_Print+0x34>
        HAL_UART_Transmit(&huart1, (uint8_t*)buffer, len, 100);
 8000314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000316:	b29a      	uxth	r2, r3
 8000318:	f107 0108 	add.w	r1, r7, #8
 800031c:	2364      	movs	r3, #100	@ 0x64
 800031e:	4805      	ldr	r0, [pc, #20]	@ (8000334 <Handle_UART_Print+0x44>)
 8000320:	f004 fdca 	bl	8004eb8 <HAL_UART_Transmit>
    }
}
 8000324:	bf00      	nop
 8000326:	3770      	adds	r7, #112	@ 0x70
 8000328:	46bd      	mov	sp, r7
 800032a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	20000590 	.word	0x20000590

08000338 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b082      	sub	sp, #8
 800033c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800033e:	f000 fa25 	bl	800078c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000342:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000346:	2201      	movs	r2, #1
 8000348:	2178      	movs	r1, #120	@ 0x78
 800034a:	485b      	ldr	r0, [pc, #364]	@ (80004b8 <SSD1306_Init+0x180>)
 800034c:	f002 fd22 	bl	8002d94 <HAL_I2C_IsDeviceReady>
 8000350:	4603      	mov	r3, r0
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000356:	2300      	movs	r3, #0
 8000358:	e0a9      	b.n	80004ae <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800035a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800035e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000360:	e002      	b.n	8000368 <SSD1306_Init+0x30>
		p--;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	3b01      	subs	r3, #1
 8000366:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d1f9      	bne.n	8000362 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800036e:	22ae      	movs	r2, #174	@ 0xae
 8000370:	2100      	movs	r1, #0
 8000372:	2078      	movs	r0, #120	@ 0x78
 8000374:	f000 fa84 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000378:	2220      	movs	r2, #32
 800037a:	2100      	movs	r1, #0
 800037c:	2078      	movs	r0, #120	@ 0x78
 800037e:	f000 fa7f 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000382:	2210      	movs	r2, #16
 8000384:	2100      	movs	r1, #0
 8000386:	2078      	movs	r0, #120	@ 0x78
 8000388:	f000 fa7a 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800038c:	22b0      	movs	r2, #176	@ 0xb0
 800038e:	2100      	movs	r1, #0
 8000390:	2078      	movs	r0, #120	@ 0x78
 8000392:	f000 fa75 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000396:	22c8      	movs	r2, #200	@ 0xc8
 8000398:	2100      	movs	r1, #0
 800039a:	2078      	movs	r0, #120	@ 0x78
 800039c:	f000 fa70 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80003a0:	2200      	movs	r2, #0
 80003a2:	2100      	movs	r1, #0
 80003a4:	2078      	movs	r0, #120	@ 0x78
 80003a6:	f000 fa6b 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80003aa:	2210      	movs	r2, #16
 80003ac:	2100      	movs	r1, #0
 80003ae:	2078      	movs	r0, #120	@ 0x78
 80003b0:	f000 fa66 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80003b4:	2240      	movs	r2, #64	@ 0x40
 80003b6:	2100      	movs	r1, #0
 80003b8:	2078      	movs	r0, #120	@ 0x78
 80003ba:	f000 fa61 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80003be:	2281      	movs	r2, #129	@ 0x81
 80003c0:	2100      	movs	r1, #0
 80003c2:	2078      	movs	r0, #120	@ 0x78
 80003c4:	f000 fa5c 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80003c8:	22ff      	movs	r2, #255	@ 0xff
 80003ca:	2100      	movs	r1, #0
 80003cc:	2078      	movs	r0, #120	@ 0x78
 80003ce:	f000 fa57 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80003d2:	22a1      	movs	r2, #161	@ 0xa1
 80003d4:	2100      	movs	r1, #0
 80003d6:	2078      	movs	r0, #120	@ 0x78
 80003d8:	f000 fa52 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80003dc:	22a6      	movs	r2, #166	@ 0xa6
 80003de:	2100      	movs	r1, #0
 80003e0:	2078      	movs	r0, #120	@ 0x78
 80003e2:	f000 fa4d 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80003e6:	22a8      	movs	r2, #168	@ 0xa8
 80003e8:	2100      	movs	r1, #0
 80003ea:	2078      	movs	r0, #120	@ 0x78
 80003ec:	f000 fa48 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80003f0:	223f      	movs	r2, #63	@ 0x3f
 80003f2:	2100      	movs	r1, #0
 80003f4:	2078      	movs	r0, #120	@ 0x78
 80003f6:	f000 fa43 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80003fa:	22a4      	movs	r2, #164	@ 0xa4
 80003fc:	2100      	movs	r1, #0
 80003fe:	2078      	movs	r0, #120	@ 0x78
 8000400:	f000 fa3e 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000404:	22d3      	movs	r2, #211	@ 0xd3
 8000406:	2100      	movs	r1, #0
 8000408:	2078      	movs	r0, #120	@ 0x78
 800040a:	f000 fa39 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800040e:	2200      	movs	r2, #0
 8000410:	2100      	movs	r1, #0
 8000412:	2078      	movs	r0, #120	@ 0x78
 8000414:	f000 fa34 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000418:	22d5      	movs	r2, #213	@ 0xd5
 800041a:	2100      	movs	r1, #0
 800041c:	2078      	movs	r0, #120	@ 0x78
 800041e:	f000 fa2f 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000422:	22f0      	movs	r2, #240	@ 0xf0
 8000424:	2100      	movs	r1, #0
 8000426:	2078      	movs	r0, #120	@ 0x78
 8000428:	f000 fa2a 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800042c:	22d9      	movs	r2, #217	@ 0xd9
 800042e:	2100      	movs	r1, #0
 8000430:	2078      	movs	r0, #120	@ 0x78
 8000432:	f000 fa25 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000436:	2222      	movs	r2, #34	@ 0x22
 8000438:	2100      	movs	r1, #0
 800043a:	2078      	movs	r0, #120	@ 0x78
 800043c:	f000 fa20 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000440:	22da      	movs	r2, #218	@ 0xda
 8000442:	2100      	movs	r1, #0
 8000444:	2078      	movs	r0, #120	@ 0x78
 8000446:	f000 fa1b 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800044a:	2212      	movs	r2, #18
 800044c:	2100      	movs	r1, #0
 800044e:	2078      	movs	r0, #120	@ 0x78
 8000450:	f000 fa16 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000454:	22db      	movs	r2, #219	@ 0xdb
 8000456:	2100      	movs	r1, #0
 8000458:	2078      	movs	r0, #120	@ 0x78
 800045a:	f000 fa11 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800045e:	2220      	movs	r2, #32
 8000460:	2100      	movs	r1, #0
 8000462:	2078      	movs	r0, #120	@ 0x78
 8000464:	f000 fa0c 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000468:	228d      	movs	r2, #141	@ 0x8d
 800046a:	2100      	movs	r1, #0
 800046c:	2078      	movs	r0, #120	@ 0x78
 800046e:	f000 fa07 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000472:	2214      	movs	r2, #20
 8000474:	2100      	movs	r1, #0
 8000476:	2078      	movs	r0, #120	@ 0x78
 8000478:	f000 fa02 	bl	8000880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800047c:	22af      	movs	r2, #175	@ 0xaf
 800047e:	2100      	movs	r1, #0
 8000480:	2078      	movs	r0, #120	@ 0x78
 8000482:	f000 f9fd 	bl	8000880 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000486:	222e      	movs	r2, #46	@ 0x2e
 8000488:	2100      	movs	r1, #0
 800048a:	2078      	movs	r0, #120	@ 0x78
 800048c:	f000 f9f8 	bl	8000880 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000490:	2000      	movs	r0, #0
 8000492:	f000 f843 	bl	800051c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8000496:	f000 f813 	bl	80004c0 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800049a:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <SSD1306_Init+0x184>)
 800049c:	2200      	movs	r2, #0
 800049e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80004a0:	4b06      	ldr	r3, [pc, #24]	@ (80004bc <SSD1306_Init+0x184>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80004a6:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <SSD1306_Init+0x184>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80004ac:	2301      	movs	r3, #1
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	200004f4 	.word	0x200004f4
 80004bc:	20000494 	.word	0x20000494

080004c0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80004c6:	2300      	movs	r3, #0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	e01d      	b.n	8000508 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	3b50      	subs	r3, #80	@ 0x50
 80004d0:	b2db      	uxtb	r3, r3
 80004d2:	461a      	mov	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	2078      	movs	r0, #120	@ 0x78
 80004d8:	f000 f9d2 	bl	8000880 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80004dc:	2200      	movs	r2, #0
 80004de:	2100      	movs	r1, #0
 80004e0:	2078      	movs	r0, #120	@ 0x78
 80004e2:	f000 f9cd 	bl	8000880 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80004e6:	2210      	movs	r2, #16
 80004e8:	2100      	movs	r1, #0
 80004ea:	2078      	movs	r0, #120	@ 0x78
 80004ec:	f000 f9c8 	bl	8000880 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80004f0:	79fb      	ldrb	r3, [r7, #7]
 80004f2:	01db      	lsls	r3, r3, #7
 80004f4:	4a08      	ldr	r2, [pc, #32]	@ (8000518 <SSD1306_UpdateScreen+0x58>)
 80004f6:	441a      	add	r2, r3
 80004f8:	2380      	movs	r3, #128	@ 0x80
 80004fa:	2140      	movs	r1, #64	@ 0x40
 80004fc:	2078      	movs	r0, #120	@ 0x78
 80004fe:	f000 f959 	bl	80007b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	3301      	adds	r3, #1
 8000506:	71fb      	strb	r3, [r7, #7]
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	2b07      	cmp	r3, #7
 800050c:	d9de      	bls.n	80004cc <SSD1306_UpdateScreen+0xc>
	}
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	3708      	adds	r7, #8
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	20000094 	.word	0x20000094

0800051c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d101      	bne.n	8000530 <SSD1306_Fill+0x14>
 800052c:	2300      	movs	r3, #0
 800052e:	e000      	b.n	8000532 <SSD1306_Fill+0x16>
 8000530:	23ff      	movs	r3, #255	@ 0xff
 8000532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000536:	4619      	mov	r1, r3
 8000538:	4803      	ldr	r0, [pc, #12]	@ (8000548 <SSD1306_Fill+0x2c>)
 800053a:	f004 ff29 	bl	8005390 <memset>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000094 	.word	0x20000094

0800054c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
 8000556:	460b      	mov	r3, r1
 8000558:	80bb      	strh	r3, [r7, #4]
 800055a:	4613      	mov	r3, r2
 800055c:	70fb      	strb	r3, [r7, #3]
	if (
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2b7f      	cmp	r3, #127	@ 0x7f
 8000562:	d848      	bhi.n	80005f6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000564:	88bb      	ldrh	r3, [r7, #4]
 8000566:	2b3f      	cmp	r3, #63	@ 0x3f
 8000568:	d845      	bhi.n	80005f6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800056a:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <SSD1306_DrawPixel+0xb4>)
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d006      	beq.n	8000580 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000572:	78fb      	ldrb	r3, [r7, #3]
 8000574:	2b00      	cmp	r3, #0
 8000576:	bf0c      	ite	eq
 8000578:	2301      	moveq	r3, #1
 800057a:	2300      	movne	r3, #0
 800057c:	b2db      	uxtb	r3, r3
 800057e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000580:	78fb      	ldrb	r3, [r7, #3]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d11a      	bne.n	80005bc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000586:	88fa      	ldrh	r2, [r7, #6]
 8000588:	88bb      	ldrh	r3, [r7, #4]
 800058a:	08db      	lsrs	r3, r3, #3
 800058c:	b298      	uxth	r0, r3
 800058e:	4603      	mov	r3, r0
 8000590:	01db      	lsls	r3, r3, #7
 8000592:	4413      	add	r3, r2
 8000594:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <SSD1306_DrawPixel+0xb8>)
 8000596:	5cd3      	ldrb	r3, [r2, r3]
 8000598:	b25a      	sxtb	r2, r3
 800059a:	88bb      	ldrh	r3, [r7, #4]
 800059c:	f003 0307 	and.w	r3, r3, #7
 80005a0:	2101      	movs	r1, #1
 80005a2:	fa01 f303 	lsl.w	r3, r1, r3
 80005a6:	b25b      	sxtb	r3, r3
 80005a8:	4313      	orrs	r3, r2
 80005aa:	b259      	sxtb	r1, r3
 80005ac:	88fa      	ldrh	r2, [r7, #6]
 80005ae:	4603      	mov	r3, r0
 80005b0:	01db      	lsls	r3, r3, #7
 80005b2:	4413      	add	r3, r2
 80005b4:	b2c9      	uxtb	r1, r1
 80005b6:	4a13      	ldr	r2, [pc, #76]	@ (8000604 <SSD1306_DrawPixel+0xb8>)
 80005b8:	54d1      	strb	r1, [r2, r3]
 80005ba:	e01d      	b.n	80005f8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80005bc:	88fa      	ldrh	r2, [r7, #6]
 80005be:	88bb      	ldrh	r3, [r7, #4]
 80005c0:	08db      	lsrs	r3, r3, #3
 80005c2:	b298      	uxth	r0, r3
 80005c4:	4603      	mov	r3, r0
 80005c6:	01db      	lsls	r3, r3, #7
 80005c8:	4413      	add	r3, r2
 80005ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000604 <SSD1306_DrawPixel+0xb8>)
 80005cc:	5cd3      	ldrb	r3, [r2, r3]
 80005ce:	b25a      	sxtb	r2, r3
 80005d0:	88bb      	ldrh	r3, [r7, #4]
 80005d2:	f003 0307 	and.w	r3, r3, #7
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f303 	lsl.w	r3, r1, r3
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	43db      	mvns	r3, r3
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	4013      	ands	r3, r2
 80005e4:	b259      	sxtb	r1, r3
 80005e6:	88fa      	ldrh	r2, [r7, #6]
 80005e8:	4603      	mov	r3, r0
 80005ea:	01db      	lsls	r3, r3, #7
 80005ec:	4413      	add	r3, r2
 80005ee:	b2c9      	uxtb	r1, r1
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <SSD1306_DrawPixel+0xb8>)
 80005f2:	54d1      	strb	r1, [r2, r3]
 80005f4:	e000      	b.n	80005f8 <SSD1306_DrawPixel+0xac>
		return;
 80005f6:	bf00      	nop
	}
}
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr
 8000600:	20000494 	.word	0x20000494
 8000604:	20000094 	.word	0x20000094

08000608 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	460a      	mov	r2, r1
 8000612:	80fb      	strh	r3, [r7, #6]
 8000614:	4613      	mov	r3, r2
 8000616:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000618:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <SSD1306_GotoXY+0x28>)
 800061a:	88fb      	ldrh	r3, [r7, #6]
 800061c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800061e:	4a04      	ldr	r2, [pc, #16]	@ (8000630 <SSD1306_GotoXY+0x28>)
 8000620:	88bb      	ldrh	r3, [r7, #4]
 8000622:	8053      	strh	r3, [r2, #2]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000494 	.word	0x20000494

08000634 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	6039      	str	r1, [r7, #0]
 800063e:	71fb      	strb	r3, [r7, #7]
 8000640:	4613      	mov	r3, r2
 8000642:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000644:	4b39      	ldr	r3, [pc, #228]	@ (800072c <SSD1306_Putc+0xf8>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	4413      	add	r3, r2
	if (
 8000650:	2b7f      	cmp	r3, #127	@ 0x7f
 8000652:	dc07      	bgt.n	8000664 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000654:	4b35      	ldr	r3, [pc, #212]	@ (800072c <SSD1306_Putc+0xf8>)
 8000656:	885b      	ldrh	r3, [r3, #2]
 8000658:	461a      	mov	r2, r3
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000660:	2b3f      	cmp	r3, #63	@ 0x3f
 8000662:	dd01      	ble.n	8000668 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000664:	2300      	movs	r3, #0
 8000666:	e05d      	b.n	8000724 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
 800066c:	e04b      	b.n	8000706 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	685a      	ldr	r2, [r3, #4]
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	3b20      	subs	r3, #32
 8000676:	6839      	ldr	r1, [r7, #0]
 8000678:	7849      	ldrb	r1, [r1, #1]
 800067a:	fb01 f303 	mul.w	r3, r1, r3
 800067e:	4619      	mov	r1, r3
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	440b      	add	r3, r1
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
 8000690:	e030      	b.n	80006f4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	fa02 f303 	lsl.w	r3, r2, r3
 800069a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d010      	beq.n	80006c4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80006a2:	4b22      	ldr	r3, [pc, #136]	@ (800072c <SSD1306_Putc+0xf8>)
 80006a4:	881a      	ldrh	r2, [r3, #0]
 80006a6:	693b      	ldr	r3, [r7, #16]
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	4413      	add	r3, r2
 80006ac:	b298      	uxth	r0, r3
 80006ae:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <SSD1306_Putc+0xf8>)
 80006b0:	885a      	ldrh	r2, [r3, #2]
 80006b2:	697b      	ldr	r3, [r7, #20]
 80006b4:	b29b      	uxth	r3, r3
 80006b6:	4413      	add	r3, r2
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	79ba      	ldrb	r2, [r7, #6]
 80006bc:	4619      	mov	r1, r3
 80006be:	f7ff ff45 	bl	800054c <SSD1306_DrawPixel>
 80006c2:	e014      	b.n	80006ee <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <SSD1306_Putc+0xf8>)
 80006c6:	881a      	ldrh	r2, [r3, #0]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4413      	add	r3, r2
 80006ce:	b298      	uxth	r0, r3
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <SSD1306_Putc+0xf8>)
 80006d2:	885a      	ldrh	r2, [r3, #2]
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	b299      	uxth	r1, r3
 80006dc:	79bb      	ldrb	r3, [r7, #6]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf0c      	ite	eq
 80006e2:	2301      	moveq	r3, #1
 80006e4:	2300      	movne	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	461a      	mov	r2, r3
 80006ea:	f7ff ff2f 	bl	800054c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	3301      	adds	r3, #1
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	461a      	mov	r2, r3
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d3c8      	bcc.n	8000692 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000700:	697b      	ldr	r3, [r7, #20]
 8000702:	3301      	adds	r3, #1
 8000704:	617b      	str	r3, [r7, #20]
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	785b      	ldrb	r3, [r3, #1]
 800070a:	461a      	mov	r2, r3
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	4293      	cmp	r3, r2
 8000710:	d3ad      	bcc.n	800066e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000712:	4b06      	ldr	r3, [pc, #24]	@ (800072c <SSD1306_Putc+0xf8>)
 8000714:	881b      	ldrh	r3, [r3, #0]
 8000716:	683a      	ldr	r2, [r7, #0]
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	4413      	add	r3, r2
 800071c:	b29a      	uxth	r2, r3
 800071e:	4b03      	ldr	r3, [pc, #12]	@ (800072c <SSD1306_Putc+0xf8>)
 8000720:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8000722:	79fb      	ldrb	r3, [r7, #7]
}
 8000724:	4618      	mov	r0, r3
 8000726:	3718      	adds	r7, #24
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	20000494 	.word	0x20000494

08000730 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	4613      	mov	r3, r2
 800073c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800073e:	e012      	b.n	8000766 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	79fa      	ldrb	r2, [r7, #7]
 8000746:	68b9      	ldr	r1, [r7, #8]
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff73 	bl	8000634 <SSD1306_Putc>
 800074e:	4603      	mov	r3, r0
 8000750:	461a      	mov	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	429a      	cmp	r2, r3
 8000758:	d002      	beq.n	8000760 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	e008      	b.n	8000772 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3301      	adds	r3, #1
 8000764:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d1e8      	bne.n	8000740 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	781b      	ldrb	r3, [r3, #0]
}
 8000772:	4618      	mov	r0, r3
 8000774:	3710      	adds	r7, #16
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}

0800077a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800077a:	b580      	push	{r7, lr}
 800077c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800077e:	2000      	movs	r0, #0
 8000780:	f7ff fecc 	bl	800051c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000784:	f7ff fe9c 	bl	80004c0 <SSD1306_UpdateScreen>
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000792:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <ssd1306_I2C_Init+0x24>)
 8000794:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000796:	e002      	b.n	800079e <ssd1306_I2C_Init+0x12>
		p--;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f9      	bne.n	8000798 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	0003d090 	.word	0x0003d090

080007b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b0c7      	sub	sp, #284	@ 0x11c
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4604      	mov	r4, r0
 80007bc:	4608      	mov	r0, r1
 80007be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80007c2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80007c6:	600a      	str	r2, [r1, #0]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007ce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80007d2:	4622      	mov	r2, r4
 80007d4:	701a      	strb	r2, [r3, #0]
 80007d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80007de:	4602      	mov	r2, r0
 80007e0:	701a      	strb	r2, [r3, #0]
 80007e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80007ea:	460a      	mov	r2, r1
 80007ec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80007ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80007f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80007f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80007fa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80007fe:	7812      	ldrb	r2, [r2, #0]
 8000800:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000802:	2300      	movs	r3, #0
 8000804:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000808:	e015      	b.n	8000836 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800080a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800080e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000812:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000816:	6812      	ldr	r2, [r2, #0]
 8000818:	441a      	add	r2, r3
 800081a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800081e:	3301      	adds	r3, #1
 8000820:	7811      	ldrb	r1, [r2, #0]
 8000822:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000826:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800082a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800082c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000830:	3301      	adds	r3, #1
 8000832:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000836:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800083a:	b29b      	uxth	r3, r3
 800083c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000840:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000844:	8812      	ldrh	r2, [r2, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d8df      	bhi.n	800080a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800084a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800084e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	b299      	uxth	r1, r3
 8000856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800085a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	b29b      	uxth	r3, r3
 8000864:	f107 020c 	add.w	r2, r7, #12
 8000868:	200a      	movs	r0, #10
 800086a:	9000      	str	r0, [sp, #0]
 800086c:	4803      	ldr	r0, [pc, #12]	@ (800087c <ssd1306_I2C_WriteMulti+0xc8>)
 800086e:	f002 f993 	bl	8002b98 <HAL_I2C_Master_Transmit>
}
 8000872:	bf00      	nop
 8000874:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000878:	46bd      	mov	sp, r7
 800087a:	bd90      	pop	{r4, r7, pc}
 800087c:	200004f4 	.word	0x200004f4

08000880 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af02      	add	r7, sp, #8
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	460b      	mov	r3, r1
 800088c:	71bb      	strb	r3, [r7, #6]
 800088e:	4613      	mov	r3, r2
 8000890:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000892:	79bb      	ldrb	r3, [r7, #6]
 8000894:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000896:	797b      	ldrb	r3, [r7, #5]
 8000898:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	b299      	uxth	r1, r3
 800089e:	f107 020c 	add.w	r2, r7, #12
 80008a2:	230a      	movs	r3, #10
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2302      	movs	r3, #2
 80008a8:	4803      	ldr	r0, [pc, #12]	@ (80008b8 <ssd1306_I2C_Write+0x38>)
 80008aa:	f002 f975 	bl	8002b98 <HAL_I2C_Master_Transmit>
}
 80008ae:	bf00      	nop
 80008b0:	3710      	adds	r7, #16
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	200004f4 	.word	0x200004f4

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c0:	f000 fcb6 	bl	8001230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f810 	bl	80008e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 f9ac 	bl	8000c24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80008cc:	f000 f868 	bl	80009a0 <MX_ADC1_Init>
  MX_CAN_Init();
 80008d0:	f000 f8a4 	bl	8000a1c <MX_CAN_Init>
  MX_TIM2_Init();
 80008d4:	f000 f906 	bl	8000ae4 <MX_TIM2_Init>
  MX_I2C1_Init();
 80008d8:	f000 f8d6 	bl	8000a88 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008dc:	f000 f978 	bl	8000bd0 <MX_USART1_UART_Init>
//  TxData[4] = 50;
//  TxData[5] = 0xAA;
//  TxData[6] = 50;
//  TxData[7] = 0xAA;
//  HAL_CAN_AddTxMessage(&hcan,&TxHeader, TxData, &TxMailBox);
  ApplicationControl();
 80008e0:	f7ff fc34 	bl	800014c <ApplicationControl>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <main+0x28>

080008e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b094      	sub	sp, #80	@ 0x50
 80008ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008f2:	2228      	movs	r2, #40	@ 0x28
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f004 fd4a 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000918:	2301      	movs	r3, #1
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000920:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000926:	2301      	movs	r3, #1
 8000928:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800092a:	2302      	movs	r3, #2
 800092c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000932:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000934:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000938:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093e:	4618      	mov	r0, r3
 8000940:	f002 fdb0 	bl	80034a4 <HAL_RCC_OscConfig>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800094a:	f000 f9e3 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800094e:	230f      	movs	r3, #15
 8000950:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000952:	2302      	movs	r3, #2
 8000954:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800095a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800095e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2102      	movs	r1, #2
 800096a:	4618      	mov	r0, r3
 800096c:	f003 f81c 	bl	80039a8 <HAL_RCC_ClockConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000976:	f000 f9cd 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800097a:	2302      	movs	r3, #2
 800097c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800097e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000982:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	4618      	mov	r0, r3
 8000988:	f003 f99c 	bl	8003cc4 <HAL_RCCEx_PeriphCLKConfig>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000992:	f000 f9bf 	bl	8000d14 <Error_Handler>
  }
}
 8000996:	bf00      	nop
 8000998:	3750      	adds	r7, #80	@ 0x50
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009b0:	4b18      	ldr	r3, [pc, #96]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009b2:	4a19      	ldr	r2, [pc, #100]	@ (8000a18 <MX_ADC1_Init+0x78>)
 80009b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009ca:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80009ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d0:	4b10      	ldr	r3, [pc, #64]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80009d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009d8:	2201      	movs	r2, #1
 80009da:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009dc:	480d      	ldr	r0, [pc, #52]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009de:	f000 fcad 	bl	800133c <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 f994 	bl	8000d14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009f8:	1d3b      	adds	r3, r7, #4
 80009fa:	4619      	mov	r1, r3
 80009fc:	4805      	ldr	r0, [pc, #20]	@ (8000a14 <MX_ADC1_Init+0x74>)
 80009fe:	f001 f807 	bl	8001a10 <HAL_ADC_ConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a08:	f000 f984 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a0c:	bf00      	nop
 8000a0e:	3710      	adds	r7, #16
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000049c 	.word	0x2000049c
 8000a18:	40012400 	.word	0x40012400

08000a1c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000a20:	4b17      	ldr	r3, [pc, #92]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a22:	4a18      	ldr	r2, [pc, #96]	@ (8000a84 <MX_CAN_Init+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 8000a26:	4b16      	ldr	r3, [pc, #88]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a28:	2209      	movs	r2, #9
 8000a2a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_4TQ;
 8000a38:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000a3e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a42:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a46:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <MX_CAN_Init+0x64>)
 8000a6e:	f001 f96b 	bl	8001d48 <HAL_CAN_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000a78:	f000 f94c 	bl	8000d14 <Error_Handler>
//  canfilterconfig.SlaveStartFilterBank = 0;  // how many filters to assign to the CAN1 (master can)
//
//  HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
  /* USER CODE END CAN_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	200004cc 	.word	0x200004cc
 8000a84:	40006400 	.word	0x40006400

08000a88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000a8e:	4a13      	ldr	r2, [pc, #76]	@ (8000adc <MX_I2C1_Init+0x54>)
 8000a90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000a94:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <MX_I2C1_Init+0x58>)
 8000a96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aa6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aaa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000aac:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000abe:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	@ (8000ad8 <MX_I2C1_Init+0x50>)
 8000ac6:	f001 ff23 	bl	8002910 <HAL_I2C_Init>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ad0:	f000 f920 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200004f4 	.word	0x200004f4
 8000adc:	40005400 	.word	0x40005400
 8000ae0:	00061a80 	.word	0x00061a80

08000ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b08e      	sub	sp, #56	@ 0x38
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af8:	f107 0320 	add.w	r3, r7, #32
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
 8000b10:	615a      	str	r2, [r3, #20]
 8000b12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b14:	4b2d      	ldr	r3, [pc, #180]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b1a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3599;
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b1e:	f640 620f 	movw	r2, #3599	@ 0xe0f
 8000b22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b24:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b2c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b38:	4b24      	ldr	r3, [pc, #144]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b3e:	4823      	ldr	r0, [pc, #140]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b40:	f003 fa2c 	bl	8003f9c <HAL_TIM_Base_Init>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000b4a:	f000 f8e3 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b52:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b54:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	481c      	ldr	r0, [pc, #112]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b5c:	f003 fd58 	bl	8004610 <HAL_TIM_ConfigClockSource>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000b66:	f000 f8d5 	bl	8000d14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b6a:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b6c:	f003 faaa 	bl	80040c4 <HAL_TIM_PWM_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b76:	f000 f8cd 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b82:	f107 0320 	add.w	r3, r7, #32
 8000b86:	4619      	mov	r1, r3
 8000b88:	4810      	ldr	r0, [pc, #64]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000b8a:	f004 f8db 	bl	8004d44 <HAL_TIMEx_MasterConfigSynchronization>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b94:	f000 f8be 	bl	8000d14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b98:	2360      	movs	r3, #96	@ 0x60
 8000b9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba8:	1d3b      	adds	r3, r7, #4
 8000baa:	2208      	movs	r2, #8
 8000bac:	4619      	mov	r1, r3
 8000bae:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000bb0:	f003 fc6c 	bl	800448c <HAL_TIM_PWM_ConfigChannel>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000bba:	f000 f8ab 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000bbe:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <MX_TIM2_Init+0xe8>)
 8000bc0:	f000 f9f6 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000bc4:	bf00      	nop
 8000bc6:	3738      	adds	r7, #56	@ 0x38
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000548 	.word	0x20000548

08000bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <MX_USART1_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART1_UART_Init+0x4c>)
 8000c08:	f004 f906 	bl	8004e18 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f000 f87f 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000590 	.word	0x20000590
 8000c20:	40013800 	.word	0x40013800

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	4b33      	ldr	r3, [pc, #204]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a32      	ldr	r2, [pc, #200]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b30      	ldr	r3, [pc, #192]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a2c      	ldr	r2, [pc, #176]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c56:	f043 0320 	orr.w	r3, r3, #32
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b27      	ldr	r3, [pc, #156]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a26      	ldr	r2, [pc, #152]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b24      	ldr	r3, [pc, #144]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b21      	ldr	r3, [pc, #132]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a20      	ldr	r2, [pc, #128]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d08 <MX_GPIO_Init+0xe4>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9e:	481b      	ldr	r0, [pc, #108]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000ca0:	f001 fe04 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4819      	ldr	r0, [pc, #100]	@ (8000d10 <MX_GPIO_Init+0xec>)
 8000caa:	f001 fdff 	bl	80028ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc0:	f107 0310 	add.w	r3, r7, #16
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4811      	ldr	r0, [pc, #68]	@ (8000d0c <MX_GPIO_Init+0xe8>)
 8000cc8:	f001 fc74 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000ccc:	2310      	movs	r3, #16
 8000cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	480c      	ldr	r0, [pc, #48]	@ (8000d10 <MX_GPIO_Init+0xec>)
 8000ce0:	f001 fc68 	bl	80025b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ce4:	2320      	movs	r3, #32
 8000ce6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	@ (8000d10 <MX_GPIO_Init+0xec>)
 8000cfc:	f001 fc5a 	bl	80025b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d00:	bf00      	nop
 8000d02:	3720      	adds	r7, #32
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40021000 	.word	0x40021000
 8000d0c:	40011000 	.word	0x40011000
 8000d10:	40010800 	.word	0x40010800

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <HAL_MspInit+0x5c>)
 8000d28:	699b      	ldr	r3, [r3, #24]
 8000d2a:	4a14      	ldr	r2, [pc, #80]	@ (8000d7c <HAL_MspInit+0x5c>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	6193      	str	r3, [r2, #24]
 8000d32:	4b12      	ldr	r3, [pc, #72]	@ (8000d7c <HAL_MspInit+0x5c>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d7c <HAL_MspInit+0x5c>)
 8000d40:	69db      	ldr	r3, [r3, #28]
 8000d42:	4a0e      	ldr	r2, [pc, #56]	@ (8000d7c <HAL_MspInit+0x5c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d48:	61d3      	str	r3, [r2, #28]
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <HAL_MspInit+0x5c>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d56:	4b0a      	ldr	r3, [pc, #40]	@ (8000d80 <HAL_MspInit+0x60>)
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_MspInit+0x60>)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010000 	.word	0x40010000

08000d84 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	f107 0310 	add.w	r3, r7, #16
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a18      	ldr	r2, [pc, #96]	@ (8000e00 <HAL_ADC_MspInit+0x7c>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d129      	bne.n	8000df8 <HAL_ADC_MspInit+0x74>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	4a16      	ldr	r2, [pc, #88]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dae:	6193      	str	r3, [r2, #24]
 8000db0:	4b14      	ldr	r3, [pc, #80]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbc:	4b11      	ldr	r3, [pc, #68]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	4a10      	ldr	r2, [pc, #64]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dc2:	f043 0304 	orr.w	r3, r3, #4
 8000dc6:	6193      	str	r3, [r2, #24]
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_ADC_MspInit+0x80>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0310 	add.w	r3, r7, #16
 8000de0:	4619      	mov	r1, r3
 8000de2:	4809      	ldr	r0, [pc, #36]	@ (8000e08 <HAL_ADC_MspInit+0x84>)
 8000de4:	f001 fbe6 	bl	80025b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2100      	movs	r1, #0
 8000dec:	2012      	movs	r0, #18
 8000dee:	f001 fbaa 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000df2:	2012      	movs	r0, #18
 8000df4:	f001 fbc3 	bl	800257e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000df8:	bf00      	nop
 8000dfa:	3720      	adds	r7, #32
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40012400 	.word	0x40012400
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40010800 	.word	0x40010800

08000e0c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b088      	sub	sp, #32
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 0310 	add.w	r3, r7, #16
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a24      	ldr	r2, [pc, #144]	@ (8000eb8 <HAL_CAN_MspInit+0xac>)
 8000e28:	4293      	cmp	r3, r2
 8000e2a:	d141      	bne.n	8000eb0 <HAL_CAN_MspInit+0xa4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e2c:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <HAL_CAN_MspInit+0xb0>)
 8000e2e:	69db      	ldr	r3, [r3, #28]
 8000e30:	4a22      	ldr	r2, [pc, #136]	@ (8000ebc <HAL_CAN_MspInit+0xb0>)
 8000e32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e36:	61d3      	str	r3, [r2, #28]
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <HAL_CAN_MspInit+0xb0>)
 8000e3a:	69db      	ldr	r3, [r3, #28]
 8000e3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <HAL_CAN_MspInit+0xb0>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	4a1c      	ldr	r2, [pc, #112]	@ (8000ebc <HAL_CAN_MspInit+0xb0>)
 8000e4a:	f043 0304 	orr.w	r3, r3, #4
 8000e4e:	6193      	str	r3, [r2, #24]
 8000e50:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <HAL_CAN_MspInit+0xb0>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	f003 0304 	and.w	r3, r3, #4
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4813      	ldr	r0, [pc, #76]	@ (8000ec0 <HAL_CAN_MspInit+0xb4>)
 8000e72:	f001 fb9f 	bl	80025b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 0310 	add.w	r3, r7, #16
 8000e88:	4619      	mov	r1, r3
 8000e8a:	480d      	ldr	r0, [pc, #52]	@ (8000ec0 <HAL_CAN_MspInit+0xb4>)
 8000e8c:	f001 fb92 	bl	80025b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2100      	movs	r1, #0
 8000e94:	2013      	movs	r0, #19
 8000e96:	f001 fb56 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000e9a:	2013      	movs	r0, #19
 8000e9c:	f001 fb6f 	bl	800257e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	2014      	movs	r0, #20
 8000ea6:	f001 fb4e 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000eaa:	2014      	movs	r0, #20
 8000eac:	f001 fb67 	bl	800257e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000eb0:	bf00      	nop
 8000eb2:	3720      	adds	r7, #32
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	40006400 	.word	0x40006400
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010800 	.word	0x40010800

08000ec4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	@ 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1e      	ldr	r2, [pc, #120]	@ (8000f58 <HAL_I2C_MspInit+0x94>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d134      	bne.n	8000f4e <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_I2C_MspInit+0x98>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	@ (8000f5c <HAL_I2C_MspInit+0x98>)
 8000eea:	f043 0308 	orr.w	r3, r3, #8
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <HAL_I2C_MspInit+0x98>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0308 	and.w	r3, r3, #8
 8000ef8:	613b      	str	r3, [r7, #16]
 8000efa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000efc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4812      	ldr	r0, [pc, #72]	@ (8000f60 <HAL_I2C_MspInit+0x9c>)
 8000f16:	f001 fb4d 	bl	80025b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000f1a:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <HAL_I2C_MspInit+0xa0>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f30:	4a0c      	ldr	r2, [pc, #48]	@ (8000f64 <HAL_I2C_MspInit+0xa0>)
 8000f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f34:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f36:	4b09      	ldr	r3, [pc, #36]	@ (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a08      	ldr	r2, [pc, #32]	@ (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f3c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_I2C_MspInit+0x98>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000f4e:	bf00      	nop
 8000f50:	3728      	adds	r7, #40	@ 0x28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40005400 	.word	0x40005400
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	40010c00 	.word	0x40010c00
 8000f64:	40010000 	.word	0x40010000

08000f68 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f78:	d113      	bne.n	8000fa2 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b09      	ldr	r3, [pc, #36]	@ (8000fac <HAL_TIM_Base_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	201c      	movs	r0, #28
 8000f98:	f001 fad5 	bl	8002546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f9c:	201c      	movs	r0, #28
 8000f9e:	f001 faee 	bl	800257e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fce:	d117      	bne.n	8001000 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <HAL_TIM_MspPostInit+0x58>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8001008 <HAL_TIM_MspPostInit+0x58>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	6193      	str	r3, [r2, #24]
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8001008 <HAL_TIM_MspPostInit+0x58>)
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	f003 0304 	and.w	r3, r3, #4
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fe8:	2304      	movs	r3, #4
 8000fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4804      	ldr	r0, [pc, #16]	@ (800100c <HAL_TIM_MspPostInit+0x5c>)
 8000ffc:	f001 fada 	bl	80025b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	40010800 	.word	0x40010800

08001010 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	@ 0x28
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001018:	f107 0314 	add.w	r3, r7, #20
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
 8001020:	605a      	str	r2, [r3, #4]
 8001022:	609a      	str	r2, [r3, #8]
 8001024:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a22      	ldr	r2, [pc, #136]	@ (80010b4 <HAL_UART_MspInit+0xa4>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d13d      	bne.n	80010ac <HAL_UART_MspInit+0x9c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001030:	4b21      	ldr	r3, [pc, #132]	@ (80010b8 <HAL_UART_MspInit+0xa8>)
 8001032:	699b      	ldr	r3, [r3, #24]
 8001034:	4a20      	ldr	r2, [pc, #128]	@ (80010b8 <HAL_UART_MspInit+0xa8>)
 8001036:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800103a:	6193      	str	r3, [r2, #24]
 800103c:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <HAL_UART_MspInit+0xa8>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001048:	4b1b      	ldr	r3, [pc, #108]	@ (80010b8 <HAL_UART_MspInit+0xa8>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	4a1a      	ldr	r2, [pc, #104]	@ (80010b8 <HAL_UART_MspInit+0xa8>)
 800104e:	f043 0308 	orr.w	r3, r3, #8
 8001052:	6193      	str	r3, [r2, #24]
 8001054:	4b18      	ldr	r3, [pc, #96]	@ (80010b8 <HAL_UART_MspInit+0xa8>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	f003 0308 	and.w	r3, r3, #8
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001060:	2340      	movs	r3, #64	@ 0x40
 8001062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	4812      	ldr	r0, [pc, #72]	@ (80010bc <HAL_UART_MspInit+0xac>)
 8001074:	f001 fa9e 	bl	80025b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001078:	2380      	movs	r3, #128	@ 0x80
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	2300      	movs	r3, #0
 800107e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	480c      	ldr	r0, [pc, #48]	@ (80010bc <HAL_UART_MspInit+0xac>)
 800108c:	f001 fa92 	bl	80025b4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_UART_MspInit+0xb0>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
 800109e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010a6:	4a06      	ldr	r2, [pc, #24]	@ (80010c0 <HAL_UART_MspInit+0xb0>)
 80010a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010aa:	6053      	str	r3, [r2, #4]

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80010ac:	bf00      	nop
 80010ae:	3728      	adds	r7, #40	@ 0x28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40010c00 	.word	0x40010c00
 80010c0:	40010000 	.word	0x40010000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <NMI_Handler+0x4>

080010cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <HardFault_Handler+0x4>

080010d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <MemManage_Handler+0x4>

080010dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001114:	f000 f8d2 	bl	80012bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}

0800111c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001120:	4802      	ldr	r0, [pc, #8]	@ (800112c <ADC1_2_IRQHandler+0x10>)
 8001122:	f000 fba3 	bl	800186c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	2000049c 	.word	0x2000049c

08001130 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001134:	4802      	ldr	r0, [pc, #8]	@ (8001140 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001136:	f000 ff02 	bl	8001f3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200004cc 	.word	0x200004cc

08001144 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001148:	4802      	ldr	r0, [pc, #8]	@ (8001154 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800114a:	f000 fef8 	bl	8001f3e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200004cc 	.word	0x200004cc

08001158 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800115c:	4802      	ldr	r0, [pc, #8]	@ (8001168 <TIM2_IRQHandler+0x10>)
 800115e:	f003 f8a5 	bl	80042ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000548 	.word	0x20000548

0800116c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b086      	sub	sp, #24
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001174:	4a14      	ldr	r2, [pc, #80]	@ (80011c8 <_sbrk+0x5c>)
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <_sbrk+0x60>)
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001180:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d102      	bne.n	800118e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001188:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <_sbrk+0x64>)
 800118a:	4a12      	ldr	r2, [pc, #72]	@ (80011d4 <_sbrk+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800118e:	4b10      	ldr	r3, [pc, #64]	@ (80011d0 <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	429a      	cmp	r2, r3
 800119a:	d207      	bcs.n	80011ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800119c:	f004 f900 	bl	80053a0 <__errno>
 80011a0:	4603      	mov	r3, r0
 80011a2:	220c      	movs	r2, #12
 80011a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011a6:	f04f 33ff 	mov.w	r3, #4294967295
 80011aa:	e009      	b.n	80011c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <_sbrk+0x64>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b2:	4b07      	ldr	r3, [pc, #28]	@ (80011d0 <_sbrk+0x64>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <_sbrk+0x64>)
 80011bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011be:	68fb      	ldr	r3, [r7, #12]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20002800 	.word	0x20002800
 80011cc:	00000400 	.word	0x00000400
 80011d0:	200005d8 	.word	0x200005d8
 80011d4:	20000728 	.word	0x20000728

080011d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr

080011e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011e4:	f7ff fff8 	bl	80011d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e8:	480b      	ldr	r0, [pc, #44]	@ (8001218 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ea:	490c      	ldr	r1, [pc, #48]	@ (800121c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f0:	e002      	b.n	80011f8 <LoopCopyDataInit>

080011f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011f6:	3304      	adds	r3, #4

080011f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011fc:	d3f9      	bcc.n	80011f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011fe:	4a09      	ldr	r2, [pc, #36]	@ (8001224 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001200:	4c09      	ldr	r4, [pc, #36]	@ (8001228 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001204:	e001      	b.n	800120a <LoopFillZerobss>

08001206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001208:	3204      	adds	r2, #4

0800120a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800120c:	d3fb      	bcc.n	8001206 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800120e:	f004 f8cd 	bl	80053ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001212:	f7ff fb53 	bl	80008bc <main>
  bx lr
 8001216:	4770      	bx	lr
  ldr r0, =_sdata
 8001218:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800121c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001220:	08007e34 	.word	0x08007e34
  ldr r2, =_sbss
 8001224:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001228:	20000728 	.word	0x20000728

0800122c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800122c:	e7fe      	b.n	800122c <CAN1_RX1_IRQHandler>
	...

08001230 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <HAL_Init+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	@ (8001258 <HAL_Init+0x28>)
 800123a:	f043 0310 	orr.w	r3, r3, #16
 800123e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f001 f975 	bl	8002530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	200f      	movs	r0, #15
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fd68 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40022000 	.word	0x40022000

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	@ (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f001 f98d 	bl	800259a <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f001 f955 	bl	8002546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	@ (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000010 	.word	0x20000010
 80012b4:	20000018 	.word	0x20000018
 80012b8:	20000014 	.word	0x20000014

080012bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <HAL_IncTick+0x1c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <HAL_IncTick+0x20>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a03      	ldr	r2, [pc, #12]	@ (80012dc <HAL_IncTick+0x20>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000018 	.word	0x20000018
 80012dc:	200005dc 	.word	0x200005dc

080012e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b02      	ldr	r3, [pc, #8]	@ (80012f0 <HAL_GetTick+0x10>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	200005dc 	.word	0x200005dc

080012f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012fc:	f7ff fff0 	bl	80012e0 <HAL_GetTick>
 8001300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130c:	d005      	beq.n	800131a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <HAL_Delay+0x44>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4413      	add	r3, r2
 8001318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800131a:	bf00      	nop
 800131c:	f7ff ffe0 	bl	80012e0 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f7      	bhi.n	800131c <HAL_Delay+0x28>
  {
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000018 	.word	0x20000018

0800133c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001348:	2300      	movs	r3, #0
 800134a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800134c:	2300      	movs	r3, #0
 800134e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0be      	b.n	80014dc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd02 	bl	8000d84 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 fc97 	bl	8001cb4 <ADC_ConversionStop_Disable>
 8001386:	4603      	mov	r3, r0
 8001388:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	f040 8099 	bne.w	80014ca <HAL_ADC_Init+0x18e>
 8001398:	7dfb      	ldrb	r3, [r7, #23]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f040 8095 	bne.w	80014ca <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013a8:	f023 0302 	bic.w	r3, r3, #2
 80013ac:	f043 0202 	orr.w	r2, r3, #2
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013bc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7b1b      	ldrb	r3, [r3, #12]
 80013c2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013c4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80013d4:	d003      	beq.n	80013de <HAL_ADC_Init+0xa2>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d102      	bne.n	80013e4 <HAL_ADC_Init+0xa8>
 80013de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e2:	e000      	b.n	80013e6 <HAL_ADC_Init+0xaa>
 80013e4:	2300      	movs	r3, #0
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7d1b      	ldrb	r3, [r3, #20]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d119      	bne.n	8001428 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7b1b      	ldrb	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	3b01      	subs	r3, #1
 8001402:	035a      	lsls	r2, r3, #13
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	e00b      	b.n	8001428 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001414:	f043 0220 	orr.w	r2, r3, #32
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	430a      	orrs	r2, r1
 800143a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	4b28      	ldr	r3, [pc, #160]	@ (80014e4 <HAL_ADC_Init+0x1a8>)
 8001444:	4013      	ands	r3, r2
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	68b9      	ldr	r1, [r7, #8]
 800144c:	430b      	orrs	r3, r1
 800144e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001458:	d003      	beq.n	8001462 <HAL_ADC_Init+0x126>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d104      	bne.n	800146c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	3b01      	subs	r3, #1
 8001468:	051b      	lsls	r3, r3, #20
 800146a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001472:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68fa      	ldr	r2, [r7, #12]
 800147c:	430a      	orrs	r2, r1
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	4b18      	ldr	r3, [pc, #96]	@ (80014e8 <HAL_ADC_Init+0x1ac>)
 8001488:	4013      	ands	r3, r2
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	429a      	cmp	r2, r3
 800148e:	d10b      	bne.n	80014a8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149a:	f023 0303 	bic.w	r3, r3, #3
 800149e:	f043 0201 	orr.w	r2, r3, #1
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014a6:	e018      	b.n	80014da <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	f023 0312 	bic.w	r3, r3, #18
 80014b0:	f043 0210 	orr.w	r2, r3, #16
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014bc:	f043 0201 	orr.w	r2, r3, #1
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014c8:	e007      	b.n	80014da <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ce:	f043 0210 	orr.w	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014da:	7dfb      	ldrb	r3, [r7, #23]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	ffe1f7fd 	.word	0xffe1f7fd
 80014e8:	ff1f0efe 	.word	0xff1f0efe

080014ec <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d101      	bne.n	8001506 <HAL_ADC_Start+0x1a>
 8001502:	2302      	movs	r3, #2
 8001504:	e098      	b.n	8001638 <HAL_ADC_Start+0x14c>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 fb76 	bl	8001c00 <ADC_Enable>
 8001514:	4603      	mov	r3, r0
 8001516:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	2b00      	cmp	r3, #0
 800151c:	f040 8087 	bne.w	800162e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001528:	f023 0301 	bic.w	r3, r3, #1
 800152c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a41      	ldr	r2, [pc, #260]	@ (8001640 <HAL_ADC_Start+0x154>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d105      	bne.n	800154a <HAL_ADC_Start+0x5e>
 800153e:	4b41      	ldr	r3, [pc, #260]	@ (8001644 <HAL_ADC_Start+0x158>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d115      	bne.n	8001576 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800154e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001560:	2b00      	cmp	r3, #0
 8001562:	d026      	beq.n	80015b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001568:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800156c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001574:	e01d      	b.n	80015b2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a2f      	ldr	r2, [pc, #188]	@ (8001644 <HAL_ADC_Start+0x158>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d004      	beq.n	8001596 <HAL_ADC_Start+0xaa>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a2b      	ldr	r2, [pc, #172]	@ (8001640 <HAL_ADC_Start+0x154>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10d      	bne.n	80015b2 <HAL_ADC_Start+0xc6>
 8001596:	4b2b      	ldr	r3, [pc, #172]	@ (8001644 <HAL_ADC_Start+0x158>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d007      	beq.n	80015b2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80015aa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015c2:	f023 0206 	bic.w	r2, r3, #6
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80015ca:	e002      	b.n	80015d2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f06f 0202 	mvn.w	r2, #2
 80015e2:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80015ee:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80015f2:	d113      	bne.n	800161c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015f8:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <HAL_ADC_Start+0x154>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d105      	bne.n	800160a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015fe:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <HAL_ADC_Start+0x158>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d108      	bne.n	800161c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	e00c      	b.n	8001636 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689a      	ldr	r2, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	e003      	b.n	8001636 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001636:	7bfb      	ldrb	r3, [r7, #15]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40012800 	.word	0x40012800
 8001644:	40012400 	.word	0x40012400

08001648 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001648:	b590      	push	{r4, r7, lr}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800165a:	2300      	movs	r3, #0
 800165c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800165e:	f7ff fe3f 	bl	80012e0 <HAL_GetTick>
 8001662:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e0d3      	b.n	8001832 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d131      	bne.n	80016fc <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800169e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d12a      	bne.n	80016fc <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016a6:	e021      	b.n	80016ec <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ae:	d01d      	beq.n	80016ec <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <HAL_ADC_PollForConversion+0x7e>
 80016b6:	f7ff fe13 	bl	80012e0 <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	429a      	cmp	r2, r3
 80016c4:	d212      	bcs.n	80016ec <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d10b      	bne.n	80016ec <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016d8:	f043 0204 	orr.w	r2, r3, #4
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e0a2      	b.n	8001832 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d0d6      	beq.n	80016a8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016fa:	e070      	b.n	80017de <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016fc:	4b4f      	ldr	r3, [pc, #316]	@ (800183c <HAL_ADC_PollForConversion+0x1f4>)
 80016fe:	681c      	ldr	r4, [r3, #0]
 8001700:	2002      	movs	r0, #2
 8001702:	f002 fb95 	bl	8003e30 <HAL_RCCEx_GetPeriphCLKFreq>
 8001706:	4603      	mov	r3, r0
 8001708:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6919      	ldr	r1, [r3, #16]
 8001712:	4b4b      	ldr	r3, [pc, #300]	@ (8001840 <HAL_ADC_PollForConversion+0x1f8>)
 8001714:	400b      	ands	r3, r1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d118      	bne.n	800174c <HAL_ADC_PollForConversion+0x104>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68d9      	ldr	r1, [r3, #12]
 8001720:	4b48      	ldr	r3, [pc, #288]	@ (8001844 <HAL_ADC_PollForConversion+0x1fc>)
 8001722:	400b      	ands	r3, r1
 8001724:	2b00      	cmp	r3, #0
 8001726:	d111      	bne.n	800174c <HAL_ADC_PollForConversion+0x104>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	4b46      	ldr	r3, [pc, #280]	@ (8001848 <HAL_ADC_PollForConversion+0x200>)
 8001730:	400b      	ands	r3, r1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d108      	bne.n	8001748 <HAL_ADC_PollForConversion+0x100>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68d9      	ldr	r1, [r3, #12]
 800173c:	4b43      	ldr	r3, [pc, #268]	@ (800184c <HAL_ADC_PollForConversion+0x204>)
 800173e:	400b      	ands	r3, r1
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_ADC_PollForConversion+0x100>
 8001744:	2314      	movs	r3, #20
 8001746:	e020      	b.n	800178a <HAL_ADC_PollForConversion+0x142>
 8001748:	2329      	movs	r3, #41	@ 0x29
 800174a:	e01e      	b.n	800178a <HAL_ADC_PollForConversion+0x142>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	4b3d      	ldr	r3, [pc, #244]	@ (8001848 <HAL_ADC_PollForConversion+0x200>)
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d106      	bne.n	8001768 <HAL_ADC_PollForConversion+0x120>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	68d9      	ldr	r1, [r3, #12]
 8001760:	4b3a      	ldr	r3, [pc, #232]	@ (800184c <HAL_ADC_PollForConversion+0x204>)
 8001762:	400b      	ands	r3, r1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00d      	beq.n	8001784 <HAL_ADC_PollForConversion+0x13c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6919      	ldr	r1, [r3, #16]
 800176e:	4b38      	ldr	r3, [pc, #224]	@ (8001850 <HAL_ADC_PollForConversion+0x208>)
 8001770:	400b      	ands	r3, r1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d108      	bne.n	8001788 <HAL_ADC_PollForConversion+0x140>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68d9      	ldr	r1, [r3, #12]
 800177c:	4b34      	ldr	r3, [pc, #208]	@ (8001850 <HAL_ADC_PollForConversion+0x208>)
 800177e:	400b      	ands	r3, r1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_ADC_PollForConversion+0x140>
 8001784:	2354      	movs	r3, #84	@ 0x54
 8001786:	e000      	b.n	800178a <HAL_ADC_PollForConversion+0x142>
 8001788:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800178a:	fb02 f303 	mul.w	r3, r2, r3
 800178e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001790:	e021      	b.n	80017d6 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001798:	d01a      	beq.n	80017d0 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_ADC_PollForConversion+0x168>
 80017a0:	f7ff fd9e 	bl	80012e0 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d20f      	bcs.n	80017d0 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d90b      	bls.n	80017d0 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017bc:	f043 0204 	orr.w	r2, r3, #4
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e030      	b.n	8001832 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	3301      	adds	r3, #1
 80017d4:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d8d9      	bhi.n	8001792 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f06f 0212 	mvn.w	r2, #18
 80017e6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017fe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001802:	d115      	bne.n	8001830 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001808:	2b00      	cmp	r3, #0
 800180a:	d111      	bne.n	8001830 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001810:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000010 	.word	0x20000010
 8001840:	24924924 	.word	0x24924924
 8001844:	00924924 	.word	0x00924924
 8001848:	12492492 	.word	0x12492492
 800184c:	00492492 	.word	0x00492492
 8001850:	00249249 	.word	0x00249249

08001854 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	2b00      	cmp	r3, #0
 800188c:	d03e      	beq.n	800190c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d039      	beq.n	800190c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	689b      	ldr	r3, [r3, #8]
 80018b6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018ba:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80018be:	d11d      	bne.n	80018fc <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d119      	bne.n	80018fc <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0220 	bic.w	r2, r2, #32
 80018d6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d105      	bne.n	80018fc <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	f043 0201 	orr.w	r2, r3, #1
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f000 f874 	bl	80019ea <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f06f 0212 	mvn.w	r2, #18
 800190a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001912:	2b00      	cmp	r3, #0
 8001914:	d04d      	beq.n	80019b2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d048      	beq.n	80019b2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001924:	f003 0310 	and.w	r3, r3, #16
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001930:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001942:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001946:	d012      	beq.n	800196e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001952:	2b00      	cmp	r3, #0
 8001954:	d125      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001960:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001964:	d11d      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800196a:	2b00      	cmp	r3, #0
 800196c:	d119      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800197c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001982:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800198e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d105      	bne.n	80019a2 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800199a:	f043 0201 	orr.w	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f9c7 	bl	8001d36 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f06f 020c 	mvn.w	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d012      	beq.n	80019e2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d00d      	beq.n	80019e2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019ca:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f000 f812 	bl	80019fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0201 	mvn.w	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80019e2:	bf00      	nop
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d101      	bne.n	8001a30 <HAL_ADC_ConfigChannel+0x20>
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	e0dc      	b.n	8001bea <HAL_ADC_ConfigChannel+0x1da>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b06      	cmp	r3, #6
 8001a3e:	d81c      	bhi.n	8001a7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	3b05      	subs	r3, #5
 8001a52:	221f      	movs	r2, #31
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4019      	ands	r1, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	3b05      	subs	r3, #5
 8001a6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	430a      	orrs	r2, r1
 8001a76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a78:	e03c      	b.n	8001af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2b0c      	cmp	r3, #12
 8001a80:	d81c      	bhi.n	8001abc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	3b23      	subs	r3, #35	@ 0x23
 8001a94:	221f      	movs	r2, #31
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	4019      	ands	r1, r3
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	3b23      	subs	r3, #35	@ 0x23
 8001aae:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	631a      	str	r2, [r3, #48]	@ 0x30
 8001aba:	e01b      	b.n	8001af4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	4613      	mov	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	3b41      	subs	r3, #65	@ 0x41
 8001ace:	221f      	movs	r2, #31
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	4019      	ands	r1, r3
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	3b41      	subs	r3, #65	@ 0x41
 8001ae8:	fa00 f203 	lsl.w	r2, r0, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2b09      	cmp	r3, #9
 8001afa:	d91c      	bls.n	8001b36 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	68d9      	ldr	r1, [r3, #12]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	4613      	mov	r3, r2
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3b1e      	subs	r3, #30
 8001b0e:	2207      	movs	r2, #7
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	43db      	mvns	r3, r3
 8001b16:	4019      	ands	r1, r3
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6898      	ldr	r0, [r3, #8]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	4413      	add	r3, r2
 8001b26:	3b1e      	subs	r3, #30
 8001b28:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	60da      	str	r2, [r3, #12]
 8001b34:	e019      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	6919      	ldr	r1, [r3, #16]
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	2207      	movs	r2, #7
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	4019      	ands	r1, r3
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	6898      	ldr	r0, [r3, #8]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	430a      	orrs	r2, r1
 8001b68:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d003      	beq.n	8001b7a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001b76:	2b11      	cmp	r3, #17
 8001b78:	d132      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d125      	bne.n	8001bd0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d126      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001ba0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2b10      	cmp	r3, #16
 8001ba8:	d11a      	bne.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001baa:	4b13      	ldr	r3, [pc, #76]	@ (8001bf8 <HAL_ADC_ConfigChannel+0x1e8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a13      	ldr	r2, [pc, #76]	@ (8001bfc <HAL_ADC_ConfigChannel+0x1ec>)
 8001bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb4:	0c9a      	lsrs	r2, r3, #18
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc0:	e002      	b.n	8001bc8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1f9      	bne.n	8001bc2 <HAL_ADC_ConfigChannel+0x1b2>
 8001bce:	e007      	b.n	8001be0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bc80      	pop	{r7}
 8001bf2:	4770      	bx	lr
 8001bf4:	40012400 	.word	0x40012400
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d040      	beq.n	8001ca0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f042 0201 	orr.w	r2, r2, #1
 8001c2c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8001cac <ADC_Enable+0xac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a1f      	ldr	r2, [pc, #124]	@ (8001cb0 <ADC_Enable+0xb0>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	0c9b      	lsrs	r3, r3, #18
 8001c3a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c3c:	e002      	b.n	8001c44 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	3b01      	subs	r3, #1
 8001c42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f9      	bne.n	8001c3e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c4a:	f7ff fb49 	bl	80012e0 <HAL_GetTick>
 8001c4e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c50:	e01f      	b.n	8001c92 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c52:	f7ff fb45 	bl	80012e0 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d918      	bls.n	8001c92 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d011      	beq.n	8001c92 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c72:	f043 0210 	orr.w	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e007      	b.n	8001ca2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d1d8      	bne.n	8001c52 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000010 	.word	0x20000010
 8001cb0:	431bde83 	.word	0x431bde83

08001cb4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d12e      	bne.n	8001d2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001cde:	f7ff faff 	bl	80012e0 <HAL_GetTick>
 8001ce2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ce4:	e01b      	b.n	8001d1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ce6:	f7ff fafb 	bl	80012e0 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d914      	bls.n	8001d1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 0301 	and.w	r3, r3, #1
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d10d      	bne.n	8001d1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	f043 0210 	orr.w	r2, r3, #16
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	f043 0201 	orr.w	r2, r3, #1
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e007      	b.n	8001d2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d0dc      	beq.n	8001ce6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0ed      	b.n	8001f36 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d102      	bne.n	8001d6c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff f850 	bl	8000e0c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 0201 	orr.w	r2, r2, #1
 8001d7a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d7c:	f7ff fab0 	bl	80012e0 <HAL_GetTick>
 8001d80:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d82:	e012      	b.n	8001daa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d84:	f7ff faac 	bl	80012e0 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b0a      	cmp	r3, #10
 8001d90:	d90b      	bls.n	8001daa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2205      	movs	r2, #5
 8001da2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e0c5      	b.n	8001f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0e5      	beq.n	8001d84 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f022 0202 	bic.w	r2, r2, #2
 8001dc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001dc8:	f7ff fa8a 	bl	80012e0 <HAL_GetTick>
 8001dcc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dce:	e012      	b.n	8001df6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dd0:	f7ff fa86 	bl	80012e0 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b0a      	cmp	r3, #10
 8001ddc:	d90b      	bls.n	8001df6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2205      	movs	r2, #5
 8001dee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e09f      	b.n	8001f36 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1e5      	bne.n	8001dd0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	7e1b      	ldrb	r3, [r3, #24]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e007      	b.n	8001e2e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	7e5b      	ldrb	r3, [r3, #25]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d108      	bne.n	8001e48 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e56:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	7e9b      	ldrb	r3, [r3, #26]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d108      	bne.n	8001e72 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0220 	orr.w	r2, r2, #32
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e007      	b.n	8001e82 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0220 	bic.w	r2, r2, #32
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7edb      	ldrb	r3, [r3, #27]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0210 	bic.w	r2, r2, #16
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	e007      	b.n	8001eac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0210 	orr.w	r2, r2, #16
 8001eaa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d108      	bne.n	8001ec6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0208 	orr.w	r2, r2, #8
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	e007      	b.n	8001ed6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f022 0208 	bic.w	r2, r2, #8
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	7f5b      	ldrb	r3, [r3, #29]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d108      	bne.n	8001ef0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f042 0204 	orr.w	r2, r2, #4
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	e007      	b.n	8001f00 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0204 	bic.w	r2, r2, #4
 8001efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	431a      	orrs	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	ea42 0103 	orr.w	r1, r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	430a      	orrs	r2, r1
 8001f24:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b08a      	sub	sp, #40	@ 0x28
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	695b      	ldr	r3, [r3, #20]
 8001f50:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	f003 0301 	and.w	r3, r3, #1
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d07c      	beq.n	800207e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d023      	beq.n	8001fd6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f983 	bl	80022ac <HAL_CAN_TxMailbox0CompleteCallback>
 8001fa6:	e016      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fba:	e00c      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fce:	e002      	b.n	8001fd6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 f986 	bl	80022e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d024      	beq.n	800202a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fe8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f962 	bl	80022be <HAL_CAN_TxMailbox1CompleteCallback>
 8001ffa:	e016      	b.n	800202a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
 800200e:	e00c      	b.n	800202a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002016:	2b00      	cmp	r3, #0
 8002018:	d004      	beq.n	8002024 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
 8002022:	e002      	b.n	800202a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f965 	bl	80022f4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d024      	beq.n	800207e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800203c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f941 	bl	80022d0 <HAL_CAN_TxMailbox2CompleteCallback>
 800204e:	e016      	b.n	800207e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d004      	beq.n	8002064 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800205a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800205c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
 8002062:	e00c      	b.n	800207e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d004      	beq.n	8002078 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
 8002076:	e002      	b.n	800207e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f000 f944 	bl	8002306 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00c      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	f003 0310 	and.w	r3, r3, #16
 800208e:	2b00      	cmp	r3, #0
 8002090:	d007      	beq.n	80020a2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002094:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2210      	movs	r2, #16
 80020a0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d006      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2208      	movs	r2, #8
 80020bc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f933 	bl	800232a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f91b 	bl	8002318 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020e2:	6a3b      	ldr	r3, [r7, #32]
 80020e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00c      	beq.n	8002106 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 0310 	and.w	r3, r3, #16
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d007      	beq.n	8002106 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2210      	movs	r2, #16
 8002104:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002106:	6a3b      	ldr	r3, [r7, #32]
 8002108:	f003 0320 	and.w	r3, r3, #32
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00b      	beq.n	8002128 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	f003 0308 	and.w	r3, r3, #8
 8002116:	2b00      	cmp	r3, #0
 8002118:	d006      	beq.n	8002128 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2208      	movs	r2, #8
 8002120:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f913 	bl	800234e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002128:	6a3b      	ldr	r3, [r7, #32]
 800212a:	f003 0310 	and.w	r3, r3, #16
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	691b      	ldr	r3, [r3, #16]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d002      	beq.n	8002146 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f8fb 	bl	800233c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00b      	beq.n	8002168 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2210      	movs	r2, #16
 8002160:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f8fc 	bl	8002360 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00b      	beq.n	800218a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d006      	beq.n	800218a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2208      	movs	r2, #8
 8002182:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f8f4 	bl	8002372 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800218a:	6a3b      	ldr	r3, [r7, #32]
 800218c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d07b      	beq.n	800228c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d072      	beq.n	8002284 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80021b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021ba:	6a3b      	ldr	r3, [r7, #32]
 80021bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ec:	f043 0304 	orr.w	r3, r3, #4
 80021f0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021f2:	6a3b      	ldr	r3, [r7, #32]
 80021f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d043      	beq.n	8002284 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002202:	2b00      	cmp	r3, #0
 8002204:	d03e      	beq.n	8002284 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800220c:	2b60      	cmp	r3, #96	@ 0x60
 800220e:	d02b      	beq.n	8002268 <HAL_CAN_IRQHandler+0x32a>
 8002210:	2b60      	cmp	r3, #96	@ 0x60
 8002212:	d82e      	bhi.n	8002272 <HAL_CAN_IRQHandler+0x334>
 8002214:	2b50      	cmp	r3, #80	@ 0x50
 8002216:	d022      	beq.n	800225e <HAL_CAN_IRQHandler+0x320>
 8002218:	2b50      	cmp	r3, #80	@ 0x50
 800221a:	d82a      	bhi.n	8002272 <HAL_CAN_IRQHandler+0x334>
 800221c:	2b40      	cmp	r3, #64	@ 0x40
 800221e:	d019      	beq.n	8002254 <HAL_CAN_IRQHandler+0x316>
 8002220:	2b40      	cmp	r3, #64	@ 0x40
 8002222:	d826      	bhi.n	8002272 <HAL_CAN_IRQHandler+0x334>
 8002224:	2b30      	cmp	r3, #48	@ 0x30
 8002226:	d010      	beq.n	800224a <HAL_CAN_IRQHandler+0x30c>
 8002228:	2b30      	cmp	r3, #48	@ 0x30
 800222a:	d822      	bhi.n	8002272 <HAL_CAN_IRQHandler+0x334>
 800222c:	2b10      	cmp	r3, #16
 800222e:	d002      	beq.n	8002236 <HAL_CAN_IRQHandler+0x2f8>
 8002230:	2b20      	cmp	r3, #32
 8002232:	d005      	beq.n	8002240 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002234:	e01d      	b.n	8002272 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	f043 0308 	orr.w	r3, r3, #8
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800223e:	e019      	b.n	8002274 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002242:	f043 0310 	orr.w	r3, r3, #16
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002248:	e014      	b.n	8002274 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	f043 0320 	orr.w	r3, r3, #32
 8002250:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002252:	e00f      	b.n	8002274 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800225a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800225c:	e00a      	b.n	8002274 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002264:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002266:	e005      	b.n	8002274 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800226a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002270:	e000      	b.n	8002274 <HAL_CAN_IRQHandler+0x336>
            break;
 8002272:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699a      	ldr	r2, [r3, #24]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002282:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2204      	movs	r2, #4
 800228a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	2b00      	cmp	r3, #0
 8002290:	d008      	beq.n	80022a4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002298:	431a      	orrs	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 f870 	bl	8002384 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80022a4:	bf00      	nop
 80022a6:	3728      	adds	r7, #40	@ 0x28
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bc80      	pop	{r7}
 80022bc:	4770      	bx	lr

080022be <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022c6:	bf00      	nop
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	bc80      	pop	{r7}
 80022e0:	4770      	bx	lr

080022e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b083      	sub	sp, #12
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr

080022f4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr

08002306 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr

08002318 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr

0800233c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr

08002360 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bc80      	pop	{r7}
 8002370:	4770      	bx	lr

08002372 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr

08002384 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
	...

08002398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a8:	4b0c      	ldr	r3, [pc, #48]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023b4:	4013      	ands	r3, r2
 80023b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ca:	4a04      	ldr	r2, [pc, #16]	@ (80023dc <__NVIC_SetPriorityGrouping+0x44>)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	60d3      	str	r3, [r2, #12]
}
 80023d0:	bf00      	nop
 80023d2:	3714      	adds	r7, #20
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bc80      	pop	{r7}
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023e4:	4b04      	ldr	r3, [pc, #16]	@ (80023f8 <__NVIC_GetPriorityGrouping+0x18>)
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	0a1b      	lsrs	r3, r3, #8
 80023ea:	f003 0307 	and.w	r3, r3, #7
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240a:	2b00      	cmp	r3, #0
 800240c:	db0b      	blt.n	8002426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800240e:	79fb      	ldrb	r3, [r7, #7]
 8002410:	f003 021f 	and.w	r2, r3, #31
 8002414:	4906      	ldr	r1, [pc, #24]	@ (8002430 <__NVIC_EnableIRQ+0x34>)
 8002416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241a:	095b      	lsrs	r3, r3, #5
 800241c:	2001      	movs	r0, #1
 800241e:	fa00 f202 	lsl.w	r2, r0, r2
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	e000e100 	.word	0xe000e100

08002434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	4603      	mov	r3, r0
 800243c:	6039      	str	r1, [r7, #0]
 800243e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002444:	2b00      	cmp	r3, #0
 8002446:	db0a      	blt.n	800245e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	490c      	ldr	r1, [pc, #48]	@ (8002480 <__NVIC_SetPriority+0x4c>)
 800244e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002452:	0112      	lsls	r2, r2, #4
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	440b      	add	r3, r1
 8002458:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800245c:	e00a      	b.n	8002474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4908      	ldr	r1, [pc, #32]	@ (8002484 <__NVIC_SetPriority+0x50>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	3b04      	subs	r3, #4
 800246c:	0112      	lsls	r2, r2, #4
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	440b      	add	r3, r1
 8002472:	761a      	strb	r2, [r3, #24]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100
 8002484:	e000ed00 	.word	0xe000ed00

08002488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002488:	b480      	push	{r7}
 800248a:	b089      	sub	sp, #36	@ 0x24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f003 0307 	and.w	r3, r3, #7
 800249a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f1c3 0307 	rsb	r3, r3, #7
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	bf28      	it	cs
 80024a6:	2304      	movcs	r3, #4
 80024a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3304      	adds	r3, #4
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <NVIC_EncodePriority+0x30>
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3b03      	subs	r3, #3
 80024b6:	e000      	b.n	80024ba <NVIC_EncodePriority+0x32>
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024bc:	f04f 32ff 	mov.w	r2, #4294967295
 80024c0:	69bb      	ldr	r3, [r7, #24]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43da      	mvns	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	401a      	ands	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d0:	f04f 31ff 	mov.w	r1, #4294967295
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	43d9      	mvns	r1, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	4313      	orrs	r3, r2
         );
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3724      	adds	r7, #36	@ 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024fc:	d301      	bcc.n	8002502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fe:	2301      	movs	r3, #1
 8002500:	e00f      	b.n	8002522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002502:	4a0a      	ldr	r2, [pc, #40]	@ (800252c <SysTick_Config+0x40>)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	3b01      	subs	r3, #1
 8002508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800250a:	210f      	movs	r1, #15
 800250c:	f04f 30ff 	mov.w	r0, #4294967295
 8002510:	f7ff ff90 	bl	8002434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <SysTick_Config+0x40>)
 8002516:	2200      	movs	r2, #0
 8002518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800251a:	4b04      	ldr	r3, [pc, #16]	@ (800252c <SysTick_Config+0x40>)
 800251c:	2207      	movs	r2, #7
 800251e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	e000e010 	.word	0xe000e010

08002530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f7ff ff2d 	bl	8002398 <__NVIC_SetPriorityGrouping>
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	607a      	str	r2, [r7, #4]
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002558:	f7ff ff42 	bl	80023e0 <__NVIC_GetPriorityGrouping>
 800255c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68b9      	ldr	r1, [r7, #8]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f7ff ff90 	bl	8002488 <NVIC_EncodePriority>
 8002568:	4602      	mov	r2, r0
 800256a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff5f 	bl	8002434 <__NVIC_SetPriority>
}
 8002576:	bf00      	nop
 8002578:	3718      	adds	r7, #24
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b082      	sub	sp, #8
 8002582:	af00      	add	r7, sp, #0
 8002584:	4603      	mov	r3, r0
 8002586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff35 	bl	80023fc <__NVIC_EnableIRQ>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ffa2 	bl	80024ec <SysTick_Config>
 80025a8:	4603      	mov	r3, r0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3708      	adds	r7, #8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
	...

080025b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b08b      	sub	sp, #44	@ 0x2c
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025c2:	2300      	movs	r3, #0
 80025c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025c6:	e161      	b.n	800288c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025c8:	2201      	movs	r2, #1
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	4013      	ands	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	f040 8150 	bne.w	8002886 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4a97      	ldr	r2, [pc, #604]	@ (8002848 <HAL_GPIO_Init+0x294>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d05e      	beq.n	80026ae <HAL_GPIO_Init+0xfa>
 80025f0:	4a95      	ldr	r2, [pc, #596]	@ (8002848 <HAL_GPIO_Init+0x294>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d875      	bhi.n	80026e2 <HAL_GPIO_Init+0x12e>
 80025f6:	4a95      	ldr	r2, [pc, #596]	@ (800284c <HAL_GPIO_Init+0x298>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d058      	beq.n	80026ae <HAL_GPIO_Init+0xfa>
 80025fc:	4a93      	ldr	r2, [pc, #588]	@ (800284c <HAL_GPIO_Init+0x298>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d86f      	bhi.n	80026e2 <HAL_GPIO_Init+0x12e>
 8002602:	4a93      	ldr	r2, [pc, #588]	@ (8002850 <HAL_GPIO_Init+0x29c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d052      	beq.n	80026ae <HAL_GPIO_Init+0xfa>
 8002608:	4a91      	ldr	r2, [pc, #580]	@ (8002850 <HAL_GPIO_Init+0x29c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d869      	bhi.n	80026e2 <HAL_GPIO_Init+0x12e>
 800260e:	4a91      	ldr	r2, [pc, #580]	@ (8002854 <HAL_GPIO_Init+0x2a0>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d04c      	beq.n	80026ae <HAL_GPIO_Init+0xfa>
 8002614:	4a8f      	ldr	r2, [pc, #572]	@ (8002854 <HAL_GPIO_Init+0x2a0>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d863      	bhi.n	80026e2 <HAL_GPIO_Init+0x12e>
 800261a:	4a8f      	ldr	r2, [pc, #572]	@ (8002858 <HAL_GPIO_Init+0x2a4>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d046      	beq.n	80026ae <HAL_GPIO_Init+0xfa>
 8002620:	4a8d      	ldr	r2, [pc, #564]	@ (8002858 <HAL_GPIO_Init+0x2a4>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d85d      	bhi.n	80026e2 <HAL_GPIO_Init+0x12e>
 8002626:	2b12      	cmp	r3, #18
 8002628:	d82a      	bhi.n	8002680 <HAL_GPIO_Init+0xcc>
 800262a:	2b12      	cmp	r3, #18
 800262c:	d859      	bhi.n	80026e2 <HAL_GPIO_Init+0x12e>
 800262e:	a201      	add	r2, pc, #4	@ (adr r2, 8002634 <HAL_GPIO_Init+0x80>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	080026af 	.word	0x080026af
 8002638:	08002689 	.word	0x08002689
 800263c:	0800269b 	.word	0x0800269b
 8002640:	080026dd 	.word	0x080026dd
 8002644:	080026e3 	.word	0x080026e3
 8002648:	080026e3 	.word	0x080026e3
 800264c:	080026e3 	.word	0x080026e3
 8002650:	080026e3 	.word	0x080026e3
 8002654:	080026e3 	.word	0x080026e3
 8002658:	080026e3 	.word	0x080026e3
 800265c:	080026e3 	.word	0x080026e3
 8002660:	080026e3 	.word	0x080026e3
 8002664:	080026e3 	.word	0x080026e3
 8002668:	080026e3 	.word	0x080026e3
 800266c:	080026e3 	.word	0x080026e3
 8002670:	080026e3 	.word	0x080026e3
 8002674:	080026e3 	.word	0x080026e3
 8002678:	08002691 	.word	0x08002691
 800267c:	080026a5 	.word	0x080026a5
 8002680:	4a76      	ldr	r2, [pc, #472]	@ (800285c <HAL_GPIO_Init+0x2a8>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d013      	beq.n	80026ae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002686:	e02c      	b.n	80026e2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e029      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	3304      	adds	r3, #4
 8002696:	623b      	str	r3, [r7, #32]
          break;
 8002698:	e024      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	3308      	adds	r3, #8
 80026a0:	623b      	str	r3, [r7, #32]
          break;
 80026a2:	e01f      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	330c      	adds	r3, #12
 80026aa:	623b      	str	r3, [r7, #32]
          break;
 80026ac:	e01a      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026b6:	2304      	movs	r3, #4
 80026b8:	623b      	str	r3, [r7, #32]
          break;
 80026ba:	e013      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d105      	bne.n	80026d0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026c4:	2308      	movs	r3, #8
 80026c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	611a      	str	r2, [r3, #16]
          break;
 80026ce:	e009      	b.n	80026e4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d0:	2308      	movs	r3, #8
 80026d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69fa      	ldr	r2, [r7, #28]
 80026d8:	615a      	str	r2, [r3, #20]
          break;
 80026da:	e003      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026dc:	2300      	movs	r3, #0
 80026de:	623b      	str	r3, [r7, #32]
          break;
 80026e0:	e000      	b.n	80026e4 <HAL_GPIO_Init+0x130>
          break;
 80026e2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	2bff      	cmp	r3, #255	@ 0xff
 80026e8:	d801      	bhi.n	80026ee <HAL_GPIO_Init+0x13a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	e001      	b.n	80026f2 <HAL_GPIO_Init+0x13e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2bff      	cmp	r3, #255	@ 0xff
 80026f8:	d802      	bhi.n	8002700 <HAL_GPIO_Init+0x14c>
 80026fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	e002      	b.n	8002706 <HAL_GPIO_Init+0x152>
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	3b08      	subs	r3, #8
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	210f      	movs	r1, #15
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	fa01 f303 	lsl.w	r3, r1, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	401a      	ands	r2, r3
 8002718:	6a39      	ldr	r1, [r7, #32]
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	fa01 f303 	lsl.w	r3, r1, r3
 8002720:	431a      	orrs	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80a9 	beq.w	8002886 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002734:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_GPIO_Init+0x2ac>)
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	4a49      	ldr	r2, [pc, #292]	@ (8002860 <HAL_GPIO_Init+0x2ac>)
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	6193      	str	r3, [r2, #24]
 8002740:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_GPIO_Init+0x2ac>)
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800274c:	4a45      	ldr	r2, [pc, #276]	@ (8002864 <HAL_GPIO_Init+0x2b0>)
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	089b      	lsrs	r3, r3, #2
 8002752:	3302      	adds	r3, #2
 8002754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002758:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	220f      	movs	r2, #15
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	4013      	ands	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a3d      	ldr	r2, [pc, #244]	@ (8002868 <HAL_GPIO_Init+0x2b4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d00d      	beq.n	8002794 <HAL_GPIO_Init+0x1e0>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a3c      	ldr	r2, [pc, #240]	@ (800286c <HAL_GPIO_Init+0x2b8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d007      	beq.n	8002790 <HAL_GPIO_Init+0x1dc>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3b      	ldr	r2, [pc, #236]	@ (8002870 <HAL_GPIO_Init+0x2bc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d101      	bne.n	800278c <HAL_GPIO_Init+0x1d8>
 8002788:	2302      	movs	r3, #2
 800278a:	e004      	b.n	8002796 <HAL_GPIO_Init+0x1e2>
 800278c:	2303      	movs	r3, #3
 800278e:	e002      	b.n	8002796 <HAL_GPIO_Init+0x1e2>
 8002790:	2301      	movs	r3, #1
 8002792:	e000      	b.n	8002796 <HAL_GPIO_Init+0x1e2>
 8002794:	2300      	movs	r3, #0
 8002796:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002798:	f002 0203 	and.w	r2, r2, #3
 800279c:	0092      	lsls	r2, r2, #2
 800279e:	4093      	lsls	r3, r2
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027a6:	492f      	ldr	r1, [pc, #188]	@ (8002864 <HAL_GPIO_Init+0x2b0>)
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	089b      	lsrs	r3, r3, #2
 80027ac:	3302      	adds	r3, #2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c0:	4b2c      	ldr	r3, [pc, #176]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027c2:	689a      	ldr	r2, [r3, #8]
 80027c4:	492b      	ldr	r1, [pc, #172]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027ce:	4b29      	ldr	r3, [pc, #164]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027d0:	689a      	ldr	r2, [r3, #8]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	43db      	mvns	r3, r3
 80027d6:	4927      	ldr	r1, [pc, #156]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027d8:	4013      	ands	r3, r2
 80027da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d006      	beq.n	80027f6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e8:	4b22      	ldr	r3, [pc, #136]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	4921      	ldr	r1, [pc, #132]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	491d      	ldr	r1, [pc, #116]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 8002800:	4013      	ands	r3, r2
 8002802:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002810:	4b18      	ldr	r3, [pc, #96]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4917      	ldr	r1, [pc, #92]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
 800281c:	e006      	b.n	800282c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800281e:	4b15      	ldr	r3, [pc, #84]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	43db      	mvns	r3, r3
 8002826:	4913      	ldr	r1, [pc, #76]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 8002828:	4013      	ands	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01f      	beq.n	8002878 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002838:	4b0e      	ldr	r3, [pc, #56]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	490d      	ldr	r1, [pc, #52]	@ (8002874 <HAL_GPIO_Init+0x2c0>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	600b      	str	r3, [r1, #0]
 8002844:	e01f      	b.n	8002886 <HAL_GPIO_Init+0x2d2>
 8002846:	bf00      	nop
 8002848:	10320000 	.word	0x10320000
 800284c:	10310000 	.word	0x10310000
 8002850:	10220000 	.word	0x10220000
 8002854:	10210000 	.word	0x10210000
 8002858:	10120000 	.word	0x10120000
 800285c:	10110000 	.word	0x10110000
 8002860:	40021000 	.word	0x40021000
 8002864:	40010000 	.word	0x40010000
 8002868:	40010800 	.word	0x40010800
 800286c:	40010c00 	.word	0x40010c00
 8002870:	40011000 	.word	0x40011000
 8002874:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_GPIO_Init+0x2f4>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	43db      	mvns	r3, r3
 8002880:	4909      	ldr	r1, [pc, #36]	@ (80028a8 <HAL_GPIO_Init+0x2f4>)
 8002882:	4013      	ands	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	3301      	adds	r3, #1
 800288a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	fa22 f303 	lsr.w	r3, r2, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	f47f ae96 	bne.w	80025c8 <HAL_GPIO_Init+0x14>
  }
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	372c      	adds	r7, #44	@ 0x2c
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr
 80028a8:	40010400 	.word	0x40010400

080028ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	807b      	strh	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028bc:	787b      	ldrb	r3, [r7, #1]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028c2:	887a      	ldrh	r2, [r7, #2]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c8:	e003      	b.n	80028d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	041a      	lsls	r2, r3, #16
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	611a      	str	r2, [r3, #16]
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	460b      	mov	r3, r1
 80028e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	041a      	lsls	r2, r3, #16
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	43d9      	mvns	r1, r3
 80028fa:	887b      	ldrh	r3, [r7, #2]
 80028fc:	400b      	ands	r3, r1
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	611a      	str	r2, [r3, #16]
}
 8002904:	bf00      	nop
 8002906:	3714      	adds	r7, #20
 8002908:	46bd      	mov	sp, r7
 800290a:	bc80      	pop	{r7}
 800290c:	4770      	bx	lr
	...

08002910 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e12b      	b.n	8002b7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fe fac4 	bl	8000ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	@ 0x24
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002962:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002972:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002974:	f001 f960 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 8002978:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4a81      	ldr	r2, [pc, #516]	@ (8002b84 <HAL_I2C_Init+0x274>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d807      	bhi.n	8002994 <HAL_I2C_Init+0x84>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a80      	ldr	r2, [pc, #512]	@ (8002b88 <HAL_I2C_Init+0x278>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	e006      	b.n	80029a2 <HAL_I2C_Init+0x92>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a7d      	ldr	r2, [pc, #500]	@ (8002b8c <HAL_I2C_Init+0x27c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	bf94      	ite	ls
 800299c:	2301      	movls	r3, #1
 800299e:	2300      	movhi	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0e7      	b.n	8002b7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	4a78      	ldr	r2, [pc, #480]	@ (8002b90 <HAL_I2C_Init+0x280>)
 80029ae:	fba2 2303 	umull	r2, r3, r2, r3
 80029b2:	0c9b      	lsrs	r3, r3, #18
 80029b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b84 <HAL_I2C_Init+0x274>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d802      	bhi.n	80029e4 <HAL_I2C_Init+0xd4>
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3301      	adds	r3, #1
 80029e2:	e009      	b.n	80029f8 <HAL_I2C_Init+0xe8>
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029ea:	fb02 f303 	mul.w	r3, r2, r3
 80029ee:	4a69      	ldr	r2, [pc, #420]	@ (8002b94 <HAL_I2C_Init+0x284>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	3301      	adds	r3, #1
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	495c      	ldr	r1, [pc, #368]	@ (8002b84 <HAL_I2C_Init+0x274>)
 8002a14:	428b      	cmp	r3, r1
 8002a16:	d819      	bhi.n	8002a4c <HAL_I2C_Init+0x13c>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e59      	subs	r1, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a26:	1c59      	adds	r1, r3, #1
 8002a28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a2c:	400b      	ands	r3, r1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_I2C_Init+0x138>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	1e59      	subs	r1, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a40:	3301      	adds	r3, #1
 8002a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a46:	e051      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002a48:	2304      	movs	r3, #4
 8002a4a:	e04f      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d111      	bne.n	8002a78 <HAL_I2C_Init+0x168>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	1e58      	subs	r0, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	460b      	mov	r3, r1
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	440b      	add	r3, r1
 8002a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a66:	3301      	adds	r3, #1
 8002a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	bf0c      	ite	eq
 8002a70:	2301      	moveq	r3, #1
 8002a72:	2300      	movne	r3, #0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	e012      	b.n	8002a9e <HAL_I2C_Init+0x18e>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1e58      	subs	r0, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6859      	ldr	r1, [r3, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	440b      	add	r3, r1
 8002a86:	0099      	lsls	r1, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf0c      	ite	eq
 8002a98:	2301      	moveq	r3, #1
 8002a9a:	2300      	movne	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_I2C_Init+0x196>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e022      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10e      	bne.n	8002acc <HAL_I2C_Init+0x1bc>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1e58      	subs	r0, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6859      	ldr	r1, [r3, #4]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	440b      	add	r3, r1
 8002abc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac0:	3301      	adds	r3, #1
 8002ac2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aca:	e00f      	b.n	8002aec <HAL_I2C_Init+0x1dc>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	1e58      	subs	r0, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	0099      	lsls	r1, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6809      	ldr	r1, [r1, #0]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6911      	ldr	r1, [r2, #16]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68d2      	ldr	r2, [r2, #12]
 8002b26:	4311      	orrs	r1, r2
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	431a      	orrs	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0201 	orr.w	r2, r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	000186a0 	.word	0x000186a0
 8002b88:	001e847f 	.word	0x001e847f
 8002b8c:	003d08ff 	.word	0x003d08ff
 8002b90:	431bde83 	.word	0x431bde83
 8002b94:	10624dd3 	.word	0x10624dd3

08002b98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b088      	sub	sp, #32
 8002b9c:	af02      	add	r7, sp, #8
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	817b      	strh	r3, [r7, #10]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bac:	f7fe fb98 	bl	80012e0 <HAL_GetTick>
 8002bb0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b20      	cmp	r3, #32
 8002bbc:	f040 80e0 	bne.w	8002d80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2319      	movs	r3, #25
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4970      	ldr	r1, [pc, #448]	@ (8002d8c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 fa92 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e0d3      	b.n	8002d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_I2C_Master_Transmit+0x50>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e0cc      	b.n	8002d82 <HAL_I2C_Master_Transmit+0x1ea>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d007      	beq.n	8002c0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f042 0201 	orr.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2221      	movs	r2, #33	@ 0x21
 8002c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	893a      	ldrh	r2, [r7, #8]
 8002c3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4a50      	ldr	r2, [pc, #320]	@ (8002d90 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c50:	8979      	ldrh	r1, [r7, #10]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f9ca 	bl	8002ff0 <I2C_MasterRequestWrite>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e08d      	b.n	8002d82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c66:	2300      	movs	r3, #0
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	695b      	ldr	r3, [r3, #20]
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c7c:	e066      	b.n	8002d4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6a39      	ldr	r1, [r7, #32]
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fb50 	bl	8003328 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00d      	beq.n	8002caa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d107      	bne.n	8002ca6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ca4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06b      	b.n	8002d82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cae:	781a      	ldrb	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b04      	cmp	r3, #4
 8002ce6:	d11b      	bne.n	8002d20 <HAL_I2C_Master_Transmit+0x188>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d017      	beq.n	8002d20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	6a39      	ldr	r1, [r7, #32]
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fb47 	bl	80033b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	2b04      	cmp	r3, #4
 8002d36:	d107      	bne.n	8002d48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e01a      	b.n	8002d82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d194      	bne.n	8002c7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	e000      	b.n	8002d82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d80:	2302      	movs	r3, #2
  }
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3718      	adds	r7, #24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	00100002 	.word	0x00100002
 8002d90:	ffff0000 	.word	0xffff0000

08002d94 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	@ 0x28
 8002d98:	af02      	add	r7, sp, #8
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	460b      	mov	r3, r1
 8002da2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7fe fa9c 	bl	80012e0 <HAL_GetTick>
 8002da8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b20      	cmp	r3, #32
 8002db8:	f040 8111 	bne.w	8002fde <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	2319      	movs	r3, #25
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	4988      	ldr	r1, [pc, #544]	@ (8002fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 f994 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e104      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d101      	bne.n	8002de4 <HAL_I2C_IsDeviceReady+0x50>
 8002de0:	2302      	movs	r3, #2
 8002de2:	e0fd      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d007      	beq.n	8002e0a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f042 0201 	orr.w	r2, r2, #1
 8002e08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e18:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2224      	movs	r2, #36	@ 0x24
 8002e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2200      	movs	r2, #0
 8002e26:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a70      	ldr	r2, [pc, #448]	@ (8002fec <HAL_I2C_IsDeviceReady+0x258>)
 8002e2c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	9300      	str	r3, [sp, #0]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f952 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e64:	d103      	bne.n	8002e6e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e0b6      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e80:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e82:	f7fe fa2d 	bl	80012e0 <HAL_GetTick>
 8002e86:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0302 	and.w	r3, r3, #2
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002eb6:	e025      	b.n	8002f04 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eb8:	f7fe fa12 	bl	80012e0 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d302      	bcc.n	8002ece <HAL_I2C_IsDeviceReady+0x13a>
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d103      	bne.n	8002ed6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	22a0      	movs	r2, #160	@ 0xa0
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	bf0c      	ite	eq
 8002ee4:	2301      	moveq	r3, #1
 8002ee6:	2300      	movne	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2ba0      	cmp	r3, #160	@ 0xa0
 8002f0e:	d005      	beq.n	8002f1c <HAL_I2C_IsDeviceReady+0x188>
 8002f10:	7dfb      	ldrb	r3, [r7, #23]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <HAL_I2C_IsDeviceReady+0x188>
 8002f16:	7dbb      	ldrb	r3, [r7, #22]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0cd      	beq.n	8002eb8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d129      	bne.n	8002f86 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f40:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	2319      	movs	r3, #25
 8002f5e:	2201      	movs	r2, #1
 8002f60:	4921      	ldr	r1, [pc, #132]	@ (8002fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 f8c6 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e036      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2220      	movs	r2, #32
 8002f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e02c      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f94:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f9e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	9300      	str	r3, [sp, #0]
 8002fa4:	2319      	movs	r3, #25
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	490f      	ldr	r1, [pc, #60]	@ (8002fe8 <HAL_I2C_IsDeviceReady+0x254>)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8a2 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e012      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	f4ff af32 	bcc.w	8002e2e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	00100002 	.word	0x00100002
 8002fec:	ffff0000 	.word	0xffff0000

08002ff0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	603b      	str	r3, [r7, #0]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b08      	cmp	r3, #8
 800300a:	d006      	beq.n	800301a <I2C_MasterRequestWrite+0x2a>
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d003      	beq.n	800301a <I2C_MasterRequestWrite+0x2a>
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003018:	d108      	bne.n	800302c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	e00b      	b.n	8003044 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	2b12      	cmp	r3, #18
 8003032:	d107      	bne.n	8003044 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003042:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	9300      	str	r3, [sp, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 f84f 	bl	80030f4 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d00d      	beq.n	8003078 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800306a:	d103      	bne.n	8003074 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e035      	b.n	80030e4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003080:	d108      	bne.n	8003094 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003082:	897b      	ldrh	r3, [r7, #10]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	e01b      	b.n	80030cc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003094:	897b      	ldrh	r3, [r7, #10]
 8003096:	11db      	asrs	r3, r3, #7
 8003098:	b2db      	uxtb	r3, r3
 800309a:	f003 0306 	and.w	r3, r3, #6
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	f063 030f 	orn	r3, r3, #15
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	490e      	ldr	r1, [pc, #56]	@ (80030ec <I2C_MasterRequestWrite+0xfc>)
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 f898 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e010      	b.n	80030e4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030c2:	897b      	ldrh	r3, [r7, #10]
 80030c4:	b2da      	uxtb	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	4907      	ldr	r1, [pc, #28]	@ (80030f0 <I2C_MasterRequestWrite+0x100>)
 80030d2:	68f8      	ldr	r0, [r7, #12]
 80030d4:	f000 f888 	bl	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	00010008 	.word	0x00010008
 80030f0:	00010002 	.word	0x00010002

080030f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003104:	e048      	b.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310c:	d044      	beq.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310e:	f7fe f8e7 	bl	80012e0 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	429a      	cmp	r2, r3
 800311c:	d302      	bcc.n	8003124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d139      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	0c1b      	lsrs	r3, r3, #16
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d10d      	bne.n	800314a <I2C_WaitOnFlagUntilTimeout+0x56>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	e00c      	b.n	8003164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	43da      	mvns	r2, r3
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4013      	ands	r3, r2
 8003156:	b29b      	uxth	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	429a      	cmp	r2, r3
 8003168:	d116      	bne.n	8003198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2220      	movs	r2, #32
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f043 0220 	orr.w	r2, r3, #32
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e023      	b.n	80031e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	0c1b      	lsrs	r3, r3, #16
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10d      	bne.n	80031be <I2C_WaitOnFlagUntilTimeout+0xca>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	43da      	mvns	r2, r3
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	e00c      	b.n	80031d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	43da      	mvns	r2, r3
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4013      	ands	r3, r2
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	461a      	mov	r2, r3
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d093      	beq.n	8003106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031f6:	e071      	b.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003206:	d123      	bne.n	8003250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e067      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003256:	d041      	beq.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7fe f842 	bl	80012e0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d136      	bne.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	0c1b      	lsrs	r3, r3, #16
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b01      	cmp	r3, #1
 8003276:	d10c      	bne.n	8003292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	695b      	ldr	r3, [r3, #20]
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	b29b      	uxth	r3, r3
 8003286:	2b00      	cmp	r3, #0
 8003288:	bf14      	ite	ne
 800328a:	2301      	movne	r3, #1
 800328c:	2300      	moveq	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	e00b      	b.n	80032aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	43da      	mvns	r2, r3
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	b29b      	uxth	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	bf14      	ite	ne
 80032a4:	2301      	movne	r3, #1
 80032a6:	2300      	moveq	r3, #0
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d016      	beq.n	80032dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f043 0220 	orr.w	r2, r3, #32
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e021      	b.n	8003320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	0c1b      	lsrs	r3, r3, #16
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d10c      	bne.n	8003300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	695b      	ldr	r3, [r3, #20]
 80032ec:	43da      	mvns	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e00b      	b.n	8003318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	43da      	mvns	r2, r3
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	4013      	ands	r3, r2
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	f47f af6d 	bne.w	80031f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f886 	bl	8003448 <I2C_IsAcknowledgeFailed>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e034      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d028      	beq.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fd ffc7 	bl	80012e0 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11d      	bne.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336e:	2b80      	cmp	r3, #128	@ 0x80
 8003370:	d016      	beq.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033aa:	2b80      	cmp	r3, #128	@ 0x80
 80033ac:	d1c3      	bne.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c4:	e034      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f83e 	bl	8003448 <I2C_IsAcknowledgeFailed>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e034      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033dc:	d028      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033de:	f7fd ff7f 	bl	80012e0 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	68ba      	ldr	r2, [r7, #8]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d302      	bcc.n	80033f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d11d      	bne.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	695b      	ldr	r3, [r3, #20]
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d016      	beq.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2220      	movs	r2, #32
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	f043 0220 	orr.w	r2, r3, #32
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e007      	b.n	8003440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b04      	cmp	r3, #4
 800343c:	d1c3      	bne.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800345a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800345e:	d11b      	bne.n	8003498 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003468:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e000      	b.n	800349a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	bc80      	pop	{r7}
 80034a2:	4770      	bx	lr

080034a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e272      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f000 8087 	beq.w	80035d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034c4:	4b92      	ldr	r3, [pc, #584]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d00c      	beq.n	80034ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 030c 	and.w	r3, r3, #12
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d112      	bne.n	8003502 <HAL_RCC_OscConfig+0x5e>
 80034dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034e8:	d10b      	bne.n	8003502 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ea:	4b89      	ldr	r3, [pc, #548]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d06c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x12c>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d168      	bne.n	80035d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e24c      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800350a:	d106      	bne.n	800351a <HAL_RCC_OscConfig+0x76>
 800350c:	4b80      	ldr	r3, [pc, #512]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a7f      	ldr	r2, [pc, #508]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003512:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	e02e      	b.n	8003578 <HAL_RCC_OscConfig+0xd4>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0x98>
 8003522:	4b7b      	ldr	r3, [pc, #492]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a7a      	ldr	r2, [pc, #488]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b78      	ldr	r3, [pc, #480]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a77      	ldr	r2, [pc, #476]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003534:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e01d      	b.n	8003578 <HAL_RCC_OscConfig+0xd4>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003544:	d10c      	bne.n	8003560 <HAL_RCC_OscConfig+0xbc>
 8003546:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a71      	ldr	r2, [pc, #452]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800354c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003550:	6013      	str	r3, [r2, #0]
 8003552:	4b6f      	ldr	r3, [pc, #444]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e00b      	b.n	8003578 <HAL_RCC_OscConfig+0xd4>
 8003560:	4b6b      	ldr	r3, [pc, #428]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a6a      	ldr	r2, [pc, #424]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003566:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b68      	ldr	r3, [pc, #416]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a67      	ldr	r2, [pc, #412]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003572:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003576:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d013      	beq.n	80035a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fd feae 	bl	80012e0 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003588:	f7fd feaa 	bl	80012e0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b64      	cmp	r3, #100	@ 0x64
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e200      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b5d      	ldr	r3, [pc, #372]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d0f0      	beq.n	8003588 <HAL_RCC_OscConfig+0xe4>
 80035a6:	e014      	b.n	80035d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fd fe9a 	bl	80012e0 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fd fe96 	bl	80012e0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	@ 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e1ec      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c2:	4b53      	ldr	r3, [pc, #332]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1f0      	bne.n	80035b0 <HAL_RCC_OscConfig+0x10c>
 80035ce:	e000      	b.n	80035d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d063      	beq.n	80036a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035de:	4b4c      	ldr	r3, [pc, #304]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f003 030c 	and.w	r3, r3, #12
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d00b      	beq.n	8003602 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035ea:	4b49      	ldr	r3, [pc, #292]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d11c      	bne.n	8003630 <HAL_RCC_OscConfig+0x18c>
 80035f6:	4b46      	ldr	r3, [pc, #280]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d116      	bne.n	8003630 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003602:	4b43      	ldr	r3, [pc, #268]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <HAL_RCC_OscConfig+0x176>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d001      	beq.n	800361a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e1c0      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361a:	4b3d      	ldr	r3, [pc, #244]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4939      	ldr	r1, [pc, #228]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800362a:	4313      	orrs	r3, r2
 800362c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	e03a      	b.n	80036a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	691b      	ldr	r3, [r3, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d020      	beq.n	800367a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003638:	4b36      	ldr	r3, [pc, #216]	@ (8003714 <HAL_RCC_OscConfig+0x270>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fd fe4f 	bl	80012e0 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003646:	f7fd fe4b 	bl	80012e0 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1a1      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003658:	4b2d      	ldr	r3, [pc, #180]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003664:	4b2a      	ldr	r3, [pc, #168]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	4927      	ldr	r1, [pc, #156]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e015      	b.n	80036a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800367a:	4b26      	ldr	r3, [pc, #152]	@ (8003714 <HAL_RCC_OscConfig+0x270>)
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fd fe2e 	bl	80012e0 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003688:	f7fd fe2a 	bl	80012e0 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b02      	cmp	r3, #2
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e180      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369a:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d03a      	beq.n	8003728 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d019      	beq.n	80036ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ba:	4b17      	ldr	r3, [pc, #92]	@ (8003718 <HAL_RCC_OscConfig+0x274>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036c0:	f7fd fe0e 	bl	80012e0 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c8:	f7fd fe0a 	bl	80012e0 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e160      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036da:	4b0d      	ldr	r3, [pc, #52]	@ (8003710 <HAL_RCC_OscConfig+0x26c>)
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0f0      	beq.n	80036c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036e6:	2001      	movs	r0, #1
 80036e8:	f000 face 	bl	8003c88 <RCC_Delay>
 80036ec:	e01c      	b.n	8003728 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <HAL_RCC_OscConfig+0x274>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f4:	f7fd fdf4 	bl	80012e0 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036fa:	e00f      	b.n	800371c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fd fdf0 	bl	80012e0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d908      	bls.n	800371c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e146      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
 800370e:	bf00      	nop
 8003710:	40021000 	.word	0x40021000
 8003714:	42420000 	.word	0x42420000
 8003718:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	4b92      	ldr	r3, [pc, #584]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e9      	bne.n	80036fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80a6 	beq.w	8003882 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800373a:	4b8b      	ldr	r3, [pc, #556]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003742:	2b00      	cmp	r3, #0
 8003744:	d10d      	bne.n	8003762 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003746:	4b88      	ldr	r3, [pc, #544]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	4a87      	ldr	r2, [pc, #540]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800374c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003750:	61d3      	str	r3, [r2, #28]
 8003752:	4b85      	ldr	r3, [pc, #532]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375a:	60bb      	str	r3, [r7, #8]
 800375c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800375e:	2301      	movs	r3, #1
 8003760:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003762:	4b82      	ldr	r3, [pc, #520]	@ (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376a:	2b00      	cmp	r3, #0
 800376c:	d118      	bne.n	80037a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800376e:	4b7f      	ldr	r3, [pc, #508]	@ (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a7e      	ldr	r2, [pc, #504]	@ (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003774:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003778:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800377a:	f7fd fdb1 	bl	80012e0 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003782:	f7fd fdad 	bl	80012e0 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b64      	cmp	r3, #100	@ 0x64
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e103      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003794:	4b75      	ldr	r3, [pc, #468]	@ (800396c <HAL_RCC_OscConfig+0x4c8>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d106      	bne.n	80037b6 <HAL_RCC_OscConfig+0x312>
 80037a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	f043 0301 	orr.w	r3, r3, #1
 80037b2:	6213      	str	r3, [r2, #32]
 80037b4:	e02d      	b.n	8003812 <HAL_RCC_OscConfig+0x36e>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x334>
 80037be:	4b6a      	ldr	r3, [pc, #424]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	4a69      	ldr	r2, [pc, #420]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	f023 0301 	bic.w	r3, r3, #1
 80037c8:	6213      	str	r3, [r2, #32]
 80037ca:	4b67      	ldr	r3, [pc, #412]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	4a66      	ldr	r2, [pc, #408]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f023 0304 	bic.w	r3, r3, #4
 80037d4:	6213      	str	r3, [r2, #32]
 80037d6:	e01c      	b.n	8003812 <HAL_RCC_OscConfig+0x36e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	2b05      	cmp	r3, #5
 80037de:	d10c      	bne.n	80037fa <HAL_RCC_OscConfig+0x356>
 80037e0:	4b61      	ldr	r3, [pc, #388]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	4a60      	ldr	r2, [pc, #384]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037e6:	f043 0304 	orr.w	r3, r3, #4
 80037ea:	6213      	str	r3, [r2, #32]
 80037ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037f2:	f043 0301 	orr.w	r3, r3, #1
 80037f6:	6213      	str	r3, [r2, #32]
 80037f8:	e00b      	b.n	8003812 <HAL_RCC_OscConfig+0x36e>
 80037fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	6213      	str	r3, [r2, #32]
 8003806:	4b58      	ldr	r3, [pc, #352]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800380c:	f023 0304 	bic.w	r3, r3, #4
 8003810:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d015      	beq.n	8003846 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800381a:	f7fd fd61 	bl	80012e0 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003820:	e00a      	b.n	8003838 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003822:	f7fd fd5d 	bl	80012e0 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0b1      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003838:	4b4b      	ldr	r3, [pc, #300]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d0ee      	beq.n	8003822 <HAL_RCC_OscConfig+0x37e>
 8003844:	e014      	b.n	8003870 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fd fd4b 	bl	80012e0 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fd fd47 	bl	80012e0 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e09b      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003864:	4b40      	ldr	r3, [pc, #256]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d1ee      	bne.n	800384e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003870:	7dfb      	ldrb	r3, [r7, #23]
 8003872:	2b01      	cmp	r3, #1
 8003874:	d105      	bne.n	8003882 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003876:	4b3c      	ldr	r3, [pc, #240]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	4a3b      	ldr	r2, [pc, #236]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003880:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8087 	beq.w	800399a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800388c:	4b36      	ldr	r3, [pc, #216]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d061      	beq.n	800395c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d146      	bne.n	800392e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a0:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <HAL_RCC_OscConfig+0x4cc>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a6:	f7fd fd1b 	bl	80012e0 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ae:	f7fd fd17 	bl	80012e0 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e06d      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038c0:	4b29      	ldr	r3, [pc, #164]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038d4:	d108      	bne.n	80038e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038d6:	4b24      	ldr	r3, [pc, #144]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4921      	ldr	r1, [pc, #132]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a19      	ldr	r1, [r3, #32]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	430b      	orrs	r3, r1
 80038fa:	491b      	ldr	r1, [pc, #108]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003900:	4b1b      	ldr	r3, [pc, #108]	@ (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003902:	2201      	movs	r2, #1
 8003904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003906:	f7fd fceb 	bl	80012e0 <HAL_GetTick>
 800390a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800390c:	e008      	b.n	8003920 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800390e:	f7fd fce7 	bl	80012e0 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d901      	bls.n	8003920 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800391c:	2303      	movs	r3, #3
 800391e:	e03d      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003920:	4b11      	ldr	r3, [pc, #68]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0f0      	beq.n	800390e <HAL_RCC_OscConfig+0x46a>
 800392c:	e035      	b.n	800399a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800392e:	4b10      	ldr	r3, [pc, #64]	@ (8003970 <HAL_RCC_OscConfig+0x4cc>)
 8003930:	2200      	movs	r2, #0
 8003932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003934:	f7fd fcd4 	bl	80012e0 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393c:	f7fd fcd0 	bl	80012e0 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e026      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800394e:	4b06      	ldr	r3, [pc, #24]	@ (8003968 <HAL_RCC_OscConfig+0x4c4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f0      	bne.n	800393c <HAL_RCC_OscConfig+0x498>
 800395a:	e01e      	b.n	800399a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	69db      	ldr	r3, [r3, #28]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d107      	bne.n	8003974 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e019      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
 8003968:	40021000 	.word	0x40021000
 800396c:	40007000 	.word	0x40007000
 8003970:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003974:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <HAL_RCC_OscConfig+0x500>)
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d001      	beq.n	800399a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e000      	b.n	800399c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3718      	adds	r7, #24
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000

080039a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e0d0      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b67      	ldr	r3, [pc, #412]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 0207 	bic.w	r2, r3, #7
 80039d2:	4965      	ldr	r1, [pc, #404]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d040      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d115      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d107      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a66:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e073      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a76:	4b3d      	ldr	r3, [pc, #244]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e06b      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a86:	4b39      	ldr	r3, [pc, #228]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f023 0203 	bic.w	r2, r3, #3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	4936      	ldr	r1, [pc, #216]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a98:	f7fd fc22 	bl	80012e0 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa0:	f7fd fc1e 	bl	80012e0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e053      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f003 020c 	and.w	r2, r3, #12
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d1eb      	bne.n	8003aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b27      	ldr	r3, [pc, #156]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d210      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b24      	ldr	r3, [pc, #144]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0207 	bic.w	r2, r3, #7
 8003ade:	4922      	ldr	r1, [pc, #136]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_RCC_ClockConfig+0x1c0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_RCC_ClockConfig+0x1cc>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCC_ClockConfig+0x1d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fb80 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40022000 	.word	0x40022000
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08007d94 	.word	0x08007d94
 8003b74:	20000010 	.word	0x20000010
 8003b78:	20000014 	.word	0x20000014

08003b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b087      	sub	sp, #28
 8003b80:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	2300      	movs	r3, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b92:	2300      	movs	r3, #0
 8003b94:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b96:	4b1e      	ldr	r3, [pc, #120]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d002      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x30>
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	d003      	beq.n	8003bb2 <HAL_RCC_GetSysClockFreq+0x36>
 8003baa:	e027      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bac:	4b19      	ldr	r3, [pc, #100]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bae:	613b      	str	r3, [r7, #16]
      break;
 8003bb0:	e027      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	0c9b      	lsrs	r3, r3, #18
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	4a17      	ldr	r2, [pc, #92]	@ (8003c18 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bbc:	5cd3      	ldrb	r3, [r2, r3]
 8003bbe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d010      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bca:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	0c5b      	lsrs	r3, r3, #17
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	4a11      	ldr	r2, [pc, #68]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bde:	fb03 f202 	mul.w	r2, r3, r2
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e004      	b.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a0c      	ldr	r2, [pc, #48]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bf0:	fb02 f303 	mul.w	r3, r2, r3
 8003bf4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	613b      	str	r3, [r7, #16]
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bfe:	613b      	str	r3, [r7, #16]
      break;
 8003c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c02:	693b      	ldr	r3, [r7, #16]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	371c      	adds	r7, #28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	007a1200 	.word	0x007a1200
 8003c18:	08007dac 	.word	0x08007dac
 8003c1c:	08007dbc 	.word	0x08007dbc
 8003c20:	003d0900 	.word	0x003d0900

08003c24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b02      	ldr	r3, [pc, #8]	@ (8003c34 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr
 8003c34:	20000010 	.word	0x20000010

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff2 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	@ (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	0a1b      	lsrs	r3, r3, #8
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	@ (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	08007da4 	.word	0x08007da4

08003c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c64:	f7ff ffde 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	4b05      	ldr	r3, [pc, #20]	@ (8003c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	0adb      	lsrs	r3, r3, #11
 8003c70:	f003 0307 	and.w	r3, r3, #7
 8003c74:	4903      	ldr	r1, [pc, #12]	@ (8003c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c76:	5ccb      	ldrb	r3, [r1, r3]
 8003c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	40021000 	.word	0x40021000
 8003c84:	08007da4 	.word	0x08007da4

08003c88 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c90:	4b0a      	ldr	r3, [pc, #40]	@ (8003cbc <RCC_Delay+0x34>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc0 <RCC_Delay+0x38>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	0a5b      	lsrs	r3, r3, #9
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ca4:	bf00      	nop
  }
  while (Delay --);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	1e5a      	subs	r2, r3, #1
 8003caa:	60fa      	str	r2, [r7, #12]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f9      	bne.n	8003ca4 <RCC_Delay+0x1c>
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	3714      	adds	r7, #20
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	20000010 	.word	0x20000010
 8003cc0:	10624dd3 	.word	0x10624dd3

08003cc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d07d      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce4:	4b4f      	ldr	r3, [pc, #316]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d10d      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b4c      	ldr	r3, [pc, #304]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf2:	69db      	ldr	r3, [r3, #28]
 8003cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	61d3      	str	r3, [r2, #28]
 8003cfc:	4b49      	ldr	r3, [pc, #292]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	4b46      	ldr	r3, [pc, #280]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d118      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d18:	4b43      	ldr	r3, [pc, #268]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a42      	ldr	r2, [pc, #264]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d24:	f7fd fadc 	bl	80012e0 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2a:	e008      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2c:	f7fd fad8 	bl	80012e0 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b64      	cmp	r3, #100	@ 0x64
 8003d38:	d901      	bls.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e06d      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d0f0      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d4a:	4b36      	ldr	r3, [pc, #216]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d52:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d02e      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d027      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d68:	4b2e      	ldr	r3, [pc, #184]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d72:	4b2e      	ldr	r3, [pc, #184]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d74:	2201      	movs	r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d78:	4b2c      	ldr	r3, [pc, #176]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d7e:	4a29      	ldr	r2, [pc, #164]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d014      	beq.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fd faa7 	bl	80012e0 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d94:	e00a      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d96:	f7fd faa3 	bl	80012e0 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d901      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e036      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dac:	4b1d      	ldr	r3, [pc, #116]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f003 0302 	and.w	r3, r3, #2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ee      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003db8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	4917      	ldr	r1, [pc, #92]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dca:	7dfb      	ldrb	r3, [r7, #23]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d105      	bne.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd0:	4b14      	ldr	r3, [pc, #80]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd2:	69db      	ldr	r3, [r3, #28]
 8003dd4:	4a13      	ldr	r2, [pc, #76]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003dda:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d008      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003de8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	490b      	ldr	r1, [pc, #44]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e06:	4b07      	ldr	r3, [pc, #28]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	4904      	ldr	r1, [pc, #16]	@ (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	42420440 	.word	0x42420440

08003e30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	61fb      	str	r3, [r7, #28]
 8003e40:	2300      	movs	r3, #0
 8003e42:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b10      	cmp	r3, #16
 8003e50:	d00a      	beq.n	8003e68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b10      	cmp	r3, #16
 8003e56:	f200 808a 	bhi.w	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d045      	beq.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d075      	beq.n	8003f52 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e66:	e082      	b.n	8003f6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003e68:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e6e:	4b45      	ldr	r3, [pc, #276]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d07b      	beq.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	0c9b      	lsrs	r3, r3, #18
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	4a41      	ldr	r2, [pc, #260]	@ (8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e84:	5cd3      	ldrb	r3, [r2, r3]
 8003e86:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d015      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e92:	4b3c      	ldr	r3, [pc, #240]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0c5b      	lsrs	r3, r3, #17
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003e9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ea0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003eac:	4a38      	ldr	r2, [pc, #224]	@ (8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	fb02 f303 	mul.w	r3, r2, r3
 8003eba:	61fb      	str	r3, [r7, #28]
 8003ebc:	e004      	b.n	8003ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4a34      	ldr	r2, [pc, #208]	@ (8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003ec2:	fb02 f303 	mul.w	r3, r2, r3
 8003ec6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ed4:	d102      	bne.n	8003edc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	61bb      	str	r3, [r7, #24]
      break;
 8003eda:	e04a      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	085b      	lsrs	r3, r3, #1
 8003ee8:	61bb      	str	r3, [r7, #24]
      break;
 8003eea:	e042      	b.n	8003f72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003eec:	4b25      	ldr	r3, [pc, #148]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ef8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003efc:	d108      	bne.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f08:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	e01f      	b.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f1a:	d109      	bne.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f1c:	4b19      	ldr	r3, [pc, #100]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d003      	beq.n	8003f30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f28:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003f2c:	61bb      	str	r3, [r7, #24]
 8003f2e:	e00f      	b.n	8003f50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f3a:	d11c      	bne.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d016      	beq.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003f48:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003f4c:	61bb      	str	r3, [r7, #24]
      break;
 8003f4e:	e012      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f50:	e011      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f52:	f7ff fe85 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 8003f56:	4602      	mov	r2, r0
 8003f58:	4b0a      	ldr	r3, [pc, #40]	@ (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0b9b      	lsrs	r3, r3, #14
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	61bb      	str	r3, [r7, #24]
      break;
 8003f6c:	e004      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f6e:	bf00      	nop
 8003f70:	e002      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f72:	bf00      	nop
 8003f74:	e000      	b.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f76:	bf00      	nop
    }
  }
  return (frequency);
 8003f78:	69bb      	ldr	r3, [r7, #24]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3720      	adds	r7, #32
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	08007dc0 	.word	0x08007dc0
 8003f8c:	08007dd0 	.word	0x08007dd0
 8003f90:	007a1200 	.word	0x007a1200
 8003f94:	003d0900 	.word	0x003d0900
 8003f98:	aaaaaaab 	.word	0xaaaaaaab

08003f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e041      	b.n	8004032 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7fc ffd0 	bl	8000f68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4610      	mov	r0, r2
 8003fdc:	f000 fc0c 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b01      	cmp	r3, #1
 800404e:	d001      	beq.n	8004054 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e02d      	b.n	80040b0 <HAL_TIM_Base_Start+0x74>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a16      	ldr	r2, [pc, #88]	@ (80040bc <HAL_TIM_Base_Start+0x80>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d009      	beq.n	800407a <HAL_TIM_Base_Start+0x3e>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406e:	d004      	beq.n	800407a <HAL_TIM_Base_Start+0x3e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a12      	ldr	r2, [pc, #72]	@ (80040c0 <HAL_TIM_Base_Start+0x84>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d111      	bne.n	800409e <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2b06      	cmp	r3, #6
 800408a:	d010      	beq.n	80040ae <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f042 0201 	orr.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800409c:	e007      	b.n	80040ae <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40012c00 	.word	0x40012c00
 80040c0:	40000400 	.word	0x40000400

080040c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e041      	b.n	800415a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d106      	bne.n	80040f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f839 	bl	8004162 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	4619      	mov	r1, r3
 8004102:	4610      	mov	r0, r2
 8004104:	f000 fb78 	bl	80047f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d109      	bne.n	8004198 <HAL_TIM_PWM_Start+0x24>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b01      	cmp	r3, #1
 800418e:	bf14      	ite	ne
 8004190:	2301      	movne	r3, #1
 8004192:	2300      	moveq	r3, #0
 8004194:	b2db      	uxtb	r3, r3
 8004196:	e022      	b.n	80041de <HAL_TIM_PWM_Start+0x6a>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	d109      	bne.n	80041b2 <HAL_TIM_PWM_Start+0x3e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	bf14      	ite	ne
 80041aa:	2301      	movne	r3, #1
 80041ac:	2300      	moveq	r3, #0
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	e015      	b.n	80041de <HAL_TIM_PWM_Start+0x6a>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d109      	bne.n	80041cc <HAL_TIM_PWM_Start+0x58>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e008      	b.n	80041de <HAL_TIM_PWM_Start+0x6a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	bf14      	ite	ne
 80041d8:	2301      	movne	r3, #1
 80041da:	2300      	moveq	r3, #0
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e059      	b.n	800429a <HAL_TIM_PWM_Start+0x126>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d104      	bne.n	80041f6 <HAL_TIM_PWM_Start+0x82>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f4:	e013      	b.n	800421e <HAL_TIM_PWM_Start+0xaa>
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d104      	bne.n	8004206 <HAL_TIM_PWM_Start+0x92>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004204:	e00b      	b.n	800421e <HAL_TIM_PWM_Start+0xaa>
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d104      	bne.n	8004216 <HAL_TIM_PWM_Start+0xa2>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2202      	movs	r2, #2
 8004210:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004214:	e003      	b.n	800421e <HAL_TIM_PWM_Start+0xaa>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2201      	movs	r2, #1
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fd68 	bl	8004cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1c      	ldr	r2, [pc, #112]	@ (80042a4 <HAL_TIM_PWM_Start+0x130>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d107      	bne.n	8004246 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004244:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a16      	ldr	r2, [pc, #88]	@ (80042a4 <HAL_TIM_PWM_Start+0x130>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d009      	beq.n	8004264 <HAL_TIM_PWM_Start+0xf0>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004258:	d004      	beq.n	8004264 <HAL_TIM_PWM_Start+0xf0>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a12      	ldr	r2, [pc, #72]	@ (80042a8 <HAL_TIM_PWM_Start+0x134>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d111      	bne.n	8004288 <HAL_TIM_PWM_Start+0x114>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0307 	and.w	r3, r3, #7
 800426e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b06      	cmp	r3, #6
 8004274:	d010      	beq.n	8004298 <HAL_TIM_PWM_Start+0x124>
    {
      __HAL_TIM_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004286:	e007      	b.n	8004298 <HAL_TIM_PWM_Start+0x124>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	40012c00 	.word	0x40012c00
 80042a8:	40000400 	.word	0x40000400

080042ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d020      	beq.n	8004310 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0202 	mvn.w	r2, #2
 80042e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fa63 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa56 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 fa65 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0304 	and.w	r3, r3, #4
 8004316:	2b00      	cmp	r3, #0
 8004318:	d020      	beq.n	800435c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0204 	mvn.w	r2, #4
 800432c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2202      	movs	r2, #2
 8004332:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f000 fa3d 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 8004348:	e005      	b.n	8004356 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa30 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f000 fa3f 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	f003 0308 	and.w	r3, r3, #8
 8004362:	2b00      	cmp	r3, #0
 8004364:	d020      	beq.n	80043a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f003 0308 	and.w	r3, r3, #8
 800436c:	2b00      	cmp	r3, #0
 800436e:	d01b      	beq.n	80043a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f06f 0208 	mvn.w	r2, #8
 8004378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2204      	movs	r2, #4
 800437e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 fa17 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 8004394:	e005      	b.n	80043a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa0a 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fa19 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d020      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01b      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f06f 0210 	mvn.w	r2, #16
 80043c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2208      	movs	r2, #8
 80043ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9f1 	bl	80047c2 <HAL_TIM_IC_CaptureCallback>
 80043e0:	e005      	b.n	80043ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 f9e4 	bl	80047b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 f9f3 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00c      	beq.n	8004418 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0201 	mvn.w	r2, #1
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9c3 	bl	800479e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441e:	2b00      	cmp	r3, #0
 8004420:	d00c      	beq.n	800443c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004428:	2b00      	cmp	r3, #0
 800442a:	d007      	beq.n	800443c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fce5 	bl	8004e06 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00c      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d007      	beq.n	8004460 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f9c3 	bl	80047e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00c      	beq.n	8004484 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f06f 0220 	mvn.w	r2, #32
 800447c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fcb8 	bl	8004df4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d101      	bne.n	80044aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044a6:	2302      	movs	r3, #2
 80044a8:	e0ae      	b.n	8004608 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b0c      	cmp	r3, #12
 80044b6:	f200 809f 	bhi.w	80045f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ba:	a201      	add	r2, pc, #4	@ (adr r2, 80044c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c0:	080044f5 	.word	0x080044f5
 80044c4:	080045f9 	.word	0x080045f9
 80044c8:	080045f9 	.word	0x080045f9
 80044cc:	080045f9 	.word	0x080045f9
 80044d0:	08004535 	.word	0x08004535
 80044d4:	080045f9 	.word	0x080045f9
 80044d8:	080045f9 	.word	0x080045f9
 80044dc:	080045f9 	.word	0x080045f9
 80044e0:	08004577 	.word	0x08004577
 80044e4:	080045f9 	.word	0x080045f9
 80044e8:	080045f9 	.word	0x080045f9
 80044ec:	080045f9 	.word	0x080045f9
 80044f0:	080045b7 	.word	0x080045b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f9e0 	bl	80048c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	619a      	str	r2, [r3, #24]
      break;
 8004532:	e064      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fa26 	bl	800498c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800454e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	619a      	str	r2, [r3, #24]
      break;
 8004574:	e043      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fa6f 	bl	8004a60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0208 	orr.w	r2, r2, #8
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0204 	bic.w	r2, r2, #4
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	61da      	str	r2, [r3, #28]
      break;
 80045b4:	e023      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fab9 	bl	8004b34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69d9      	ldr	r1, [r3, #28]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	61da      	str	r2, [r3, #28]
      break;
 80045f6:	e002      	b.n	80045fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	75fb      	strb	r3, [r7, #23]
      break;
 80045fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004606:	7dfb      	ldrb	r3, [r7, #23]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3718      	adds	r7, #24
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004624:	2b01      	cmp	r3, #1
 8004626:	d101      	bne.n	800462c <HAL_TIM_ConfigClockSource+0x1c>
 8004628:	2302      	movs	r3, #2
 800462a:	e0b4      	b.n	8004796 <HAL_TIM_ConfigClockSource+0x186>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800464a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004652:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68ba      	ldr	r2, [r7, #8]
 800465a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004664:	d03e      	beq.n	80046e4 <HAL_TIM_ConfigClockSource+0xd4>
 8004666:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800466a:	f200 8087 	bhi.w	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004672:	f000 8086 	beq.w	8004782 <HAL_TIM_ConfigClockSource+0x172>
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	d87f      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b70      	cmp	r3, #112	@ 0x70
 800467e:	d01a      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0xa6>
 8004680:	2b70      	cmp	r3, #112	@ 0x70
 8004682:	d87b      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b60      	cmp	r3, #96	@ 0x60
 8004686:	d050      	beq.n	800472a <HAL_TIM_ConfigClockSource+0x11a>
 8004688:	2b60      	cmp	r3, #96	@ 0x60
 800468a:	d877      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b50      	cmp	r3, #80	@ 0x50
 800468e:	d03c      	beq.n	800470a <HAL_TIM_ConfigClockSource+0xfa>
 8004690:	2b50      	cmp	r3, #80	@ 0x50
 8004692:	d873      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b40      	cmp	r3, #64	@ 0x40
 8004696:	d058      	beq.n	800474a <HAL_TIM_ConfigClockSource+0x13a>
 8004698:	2b40      	cmp	r3, #64	@ 0x40
 800469a:	d86f      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 800469c:	2b30      	cmp	r3, #48	@ 0x30
 800469e:	d064      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046a0:	2b30      	cmp	r3, #48	@ 0x30
 80046a2:	d86b      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 80046a4:	2b20      	cmp	r3, #32
 80046a6:	d060      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d867      	bhi.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d05c      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046b0:	2b10      	cmp	r3, #16
 80046b2:	d05a      	beq.n	800476a <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	e062      	b.n	800477c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c6:	f000 fafa 	bl	8004cbe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80046d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	609a      	str	r2, [r3, #8]
      break;
 80046e2:	e04f      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046f4:	f000 fae3 	bl	8004cbe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004706:	609a      	str	r2, [r3, #8]
      break;
 8004708:	e03c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	461a      	mov	r2, r3
 8004718:	f000 fa5a 	bl	8004bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2150      	movs	r1, #80	@ 0x50
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fab1 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 8004728:	e02c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	461a      	mov	r2, r3
 8004738:	f000 fa78 	bl	8004c2c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	2160      	movs	r1, #96	@ 0x60
 8004742:	4618      	mov	r0, r3
 8004744:	f000 faa1 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 8004748:	e01c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	461a      	mov	r2, r3
 8004758:	f000 fa3a 	bl	8004bd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2140      	movs	r1, #64	@ 0x40
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fa91 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 8004768:	e00c      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f000 fa88 	bl	8004c8a <TIM_ITRx_SetConfig>
      break;
 800477a:	e003      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	73fb      	strb	r3, [r7, #15]
      break;
 8004780:	e000      	b.n	8004784 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004794:	7bfb      	ldrb	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047a6:	bf00      	nop
 80047a8:	370c      	adds	r7, #12
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr

080047b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047b8:	bf00      	nop
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bc80      	pop	{r7}
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a2b      	ldr	r2, [pc, #172]	@ (80048b8 <TIM_Base_SetConfig+0xc0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d007      	beq.n	8004820 <TIM_Base_SetConfig+0x28>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004816:	d003      	beq.n	8004820 <TIM_Base_SetConfig+0x28>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a28      	ldr	r2, [pc, #160]	@ (80048bc <TIM_Base_SetConfig+0xc4>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d108      	bne.n	8004832 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	4313      	orrs	r3, r2
 8004830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a20      	ldr	r2, [pc, #128]	@ (80048b8 <TIM_Base_SetConfig+0xc0>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_Base_SetConfig+0x52>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004840:	d003      	beq.n	800484a <TIM_Base_SetConfig+0x52>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a1d      	ldr	r2, [pc, #116]	@ (80048bc <TIM_Base_SetConfig+0xc4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d108      	bne.n	800485c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	4313      	orrs	r3, r2
 800485a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4a0d      	ldr	r2, [pc, #52]	@ (80048b8 <TIM_Base_SetConfig+0xc0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d103      	bne.n	8004890 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	691a      	ldr	r2, [r3, #16]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0301 	and.w	r3, r3, #1
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	f023 0201 	bic.w	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]
  }
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bc80      	pop	{r7}
 80048b6:	4770      	bx	lr
 80048b8:	40012c00 	.word	0x40012c00
 80048bc:	40000400 	.word	0x40000400

080048c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	f023 0201 	bic.w	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0303 	bic.w	r3, r3, #3
 80048f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	4313      	orrs	r3, r2
 8004900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 0302 	bic.w	r3, r3, #2
 8004908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a1c      	ldr	r2, [pc, #112]	@ (8004988 <TIM_OC1_SetConfig+0xc8>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d10c      	bne.n	8004936 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f023 0308 	bic.w	r3, r3, #8
 8004922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	4313      	orrs	r3, r2
 800492c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f023 0304 	bic.w	r3, r3, #4
 8004934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a13      	ldr	r2, [pc, #76]	@ (8004988 <TIM_OC1_SetConfig+0xc8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d111      	bne.n	8004962 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800494c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	693a      	ldr	r2, [r7, #16]
 800495e:	4313      	orrs	r3, r2
 8004960:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	621a      	str	r2, [r3, #32]
}
 800497c:	bf00      	nop
 800497e:	371c      	adds	r7, #28
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40012c00 	.word	0x40012c00

0800498c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800498c:	b480      	push	{r7}
 800498e:	b087      	sub	sp, #28
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f023 0210 	bic.w	r2, r3, #16
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	021b      	lsls	r3, r3, #8
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0320 	bic.w	r3, r3, #32
 80049d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a1d      	ldr	r2, [pc, #116]	@ (8004a5c <TIM_OC2_SetConfig+0xd0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d10d      	bne.n	8004a08 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	697a      	ldr	r2, [r7, #20]
 80049fc:	4313      	orrs	r3, r2
 80049fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a14      	ldr	r2, [pc, #80]	@ (8004a5c <TIM_OC2_SetConfig+0xd0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d113      	bne.n	8004a38 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	40012c00 	.word	0x40012c00

08004a60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	68fa      	ldr	r2, [r7, #12]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	021b      	lsls	r3, r3, #8
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b30 <TIM_OC3_SetConfig+0xd0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d10d      	bne.n	8004ada <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ac4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ad8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a14      	ldr	r2, [pc, #80]	@ (8004b30 <TIM_OC3_SetConfig+0xd0>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d113      	bne.n	8004b0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	695b      	ldr	r3, [r3, #20]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	699b      	ldr	r3, [r3, #24]
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	621a      	str	r2, [r3, #32]
}
 8004b24:	bf00      	nop
 8004b26:	371c      	adds	r7, #28
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bc80      	pop	{r7}
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00

08004b34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	031b      	lsls	r3, r3, #12
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8004bcc <TIM_OC4_SetConfig+0x98>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d109      	bne.n	8004ba8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	019b      	lsls	r3, r3, #6
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68fa      	ldr	r2, [r7, #12]
 8004bb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	621a      	str	r2, [r3, #32]
}
 8004bc2:	bf00      	nop
 8004bc4:	371c      	adds	r7, #28
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr
 8004bcc:	40012c00 	.word	0x40012c00

08004bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b087      	sub	sp, #28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	f023 0201 	bic.w	r2, r3, #1
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 030a 	bic.w	r3, r3, #10
 8004c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	621a      	str	r2, [r3, #32]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bc80      	pop	{r7}
 8004c2a:	4770      	bx	lr

08004c2c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f023 0210 	bic.w	r2, r3, #16
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	031b      	lsls	r3, r3, #12
 8004c5c:	693a      	ldr	r2, [r7, #16]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004c68:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	4313      	orrs	r3, r2
 8004c72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	621a      	str	r2, [r3, #32]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bc80      	pop	{r7}
 8004c88:	4770      	bx	lr

08004c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	f043 0307 	orr.w	r3, r3, #7
 8004cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	3714      	adds	r7, #20
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b087      	sub	sp, #28
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	021a      	lsls	r2, r3, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	609a      	str	r2, [r3, #8]
}
 8004cf2:	bf00      	nop
 8004cf4:	371c      	adds	r7, #28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f003 031f 	and.w	r3, r3, #31
 8004d0e:	2201      	movs	r2, #1
 8004d10:	fa02 f303 	lsl.w	r3, r2, r3
 8004d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	43db      	mvns	r3, r3
 8004d1e:	401a      	ands	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6a1a      	ldr	r2, [r3, #32]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 031f 	and.w	r3, r3, #31
 8004d2e:	6879      	ldr	r1, [r7, #4]
 8004d30:	fa01 f303 	lsl.w	r3, r1, r3
 8004d34:	431a      	orrs	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	621a      	str	r2, [r3, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	371c      	adds	r7, #28
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr

08004d44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e041      	b.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2202      	movs	r2, #2
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a14      	ldr	r2, [pc, #80]	@ (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d009      	beq.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004da8:	d004      	beq.n	8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a10      	ldr	r2, [pc, #64]	@ (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d10c      	bne.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40012c00 	.word	0x40012c00
 8004df0:	40000400 	.word	0x40000400

08004df4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e042      	b.n	8004eb0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc f8e6 	bl	8001010 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	@ 0x24
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f971 	bl	8005144 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08a      	sub	sp, #40	@ 0x28
 8004ebc:	af02      	add	r7, sp, #8
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b20      	cmp	r3, #32
 8004ed6:	d175      	bne.n	8004fc4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d002      	beq.n	8004ee4 <HAL_UART_Transmit+0x2c>
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d101      	bne.n	8004ee8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e06e      	b.n	8004fc6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2221      	movs	r2, #33	@ 0x21
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ef6:	f7fc f9f3 	bl	80012e0 <HAL_GetTick>
 8004efa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	88fa      	ldrh	r2, [r7, #6]
 8004f00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	88fa      	ldrh	r2, [r7, #6]
 8004f06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f10:	d108      	bne.n	8004f24 <HAL_UART_Transmit+0x6c>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d104      	bne.n	8004f24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	61bb      	str	r3, [r7, #24]
 8004f22:	e003      	b.n	8004f2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f2c:	e02e      	b.n	8004f8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	2200      	movs	r2, #0
 8004f36:	2180      	movs	r1, #128	@ 0x80
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 f848 	bl	8004fce <UART_WaitOnFlagUntilTimeout>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d005      	beq.n	8004f50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e03a      	b.n	8004fc6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10b      	bne.n	8004f6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	881b      	ldrh	r3, [r3, #0]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	3302      	adds	r3, #2
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e007      	b.n	8004f7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1cb      	bne.n	8004f2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2140      	movs	r1, #64	@ 0x40
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f814 	bl	8004fce <UART_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	e006      	b.n	8004fc6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	e000      	b.n	8004fc6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fc4:	2302      	movs	r3, #2
  }
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3720      	adds	r7, #32
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	60f8      	str	r0, [r7, #12]
 8004fd6:	60b9      	str	r1, [r7, #8]
 8004fd8:	603b      	str	r3, [r7, #0]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fde:	e03b      	b.n	8005058 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d037      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fc f97a 	bl	80012e0 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	6a3a      	ldr	r2, [r7, #32]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	e03a      	b.n	8005078 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	d023      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b80      	cmp	r3, #128	@ 0x80
 8005014:	d020      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2b40      	cmp	r3, #64	@ 0x40
 800501a:	d01d      	beq.n	8005058 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0308 	and.w	r3, r3, #8
 8005026:	2b08      	cmp	r3, #8
 8005028:	d116      	bne.n	8005058 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	617b      	str	r3, [r7, #20]
 800503e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f000 f81d 	bl	8005080 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2208      	movs	r2, #8
 800504a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e00f      	b.n	8005078 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	429a      	cmp	r2, r3
 8005074:	d0b4      	beq.n	8004fe0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005080:	b480      	push	{r7}
 8005082:	b095      	sub	sp, #84	@ 0x54
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	330c      	adds	r3, #12
 800508e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800509e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80050aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e5      	bne.n	8005088 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	3314      	adds	r3, #20
 80050c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3314      	adds	r3, #20
 80050da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e5      	bne.n	80050bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d119      	bne.n	800512c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	330c      	adds	r3, #12
 80050fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	60bb      	str	r3, [r7, #8]
   return(result);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f023 0310 	bic.w	r3, r3, #16
 800510e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005118:	61ba      	str	r2, [r7, #24]
 800511a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6979      	ldr	r1, [r7, #20]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	613b      	str	r3, [r7, #16]
   return(result);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e5      	bne.n	80050f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800513a:	bf00      	nop
 800513c:	3754      	adds	r7, #84	@ 0x54
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr

08005144 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800517e:	f023 030c 	bic.w	r3, r3, #12
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	6812      	ldr	r2, [r2, #0]
 8005186:	68b9      	ldr	r1, [r7, #8]
 8005188:	430b      	orrs	r3, r1
 800518a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	430a      	orrs	r2, r1
 80051a0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005258 <UART_SetConfig+0x114>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d103      	bne.n	80051b4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80051ac:	f7fe fd58 	bl	8003c60 <HAL_RCC_GetPCLK2Freq>
 80051b0:	60f8      	str	r0, [r7, #12]
 80051b2:	e002      	b.n	80051ba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7fe fd40 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 80051b8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	009a      	lsls	r2, r3, #2
 80051c4:	441a      	add	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d0:	4a22      	ldr	r2, [pc, #136]	@ (800525c <UART_SetConfig+0x118>)
 80051d2:	fba2 2303 	umull	r2, r3, r2, r3
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	0119      	lsls	r1, r3, #4
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	4613      	mov	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	4413      	add	r3, r2
 80051e2:	009a      	lsls	r2, r3, #2
 80051e4:	441a      	add	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80051f0:	4b1a      	ldr	r3, [pc, #104]	@ (800525c <UART_SetConfig+0x118>)
 80051f2:	fba3 0302 	umull	r0, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	2064      	movs	r0, #100	@ 0x64
 80051fa:	fb00 f303 	mul.w	r3, r0, r3
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	3332      	adds	r3, #50	@ 0x32
 8005204:	4a15      	ldr	r2, [pc, #84]	@ (800525c <UART_SetConfig+0x118>)
 8005206:	fba2 2303 	umull	r2, r3, r2, r3
 800520a:	095b      	lsrs	r3, r3, #5
 800520c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005210:	4419      	add	r1, r3
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	4613      	mov	r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	4413      	add	r3, r2
 800521a:	009a      	lsls	r2, r3, #2
 800521c:	441a      	add	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	fbb2 f2f3 	udiv	r2, r2, r3
 8005228:	4b0c      	ldr	r3, [pc, #48]	@ (800525c <UART_SetConfig+0x118>)
 800522a:	fba3 0302 	umull	r0, r3, r3, r2
 800522e:	095b      	lsrs	r3, r3, #5
 8005230:	2064      	movs	r0, #100	@ 0x64
 8005232:	fb00 f303 	mul.w	r3, r0, r3
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	3332      	adds	r3, #50	@ 0x32
 800523c:	4a07      	ldr	r2, [pc, #28]	@ (800525c <UART_SetConfig+0x118>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	095b      	lsrs	r3, r3, #5
 8005244:	f003 020f 	and.w	r2, r3, #15
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	440a      	add	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005250:	bf00      	nop
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	40013800 	.word	0x40013800
 800525c:	51eb851f 	.word	0x51eb851f

08005260 <__itoa>:
 8005260:	1e93      	subs	r3, r2, #2
 8005262:	2b22      	cmp	r3, #34	@ 0x22
 8005264:	b510      	push	{r4, lr}
 8005266:	460c      	mov	r4, r1
 8005268:	d904      	bls.n	8005274 <__itoa+0x14>
 800526a:	2300      	movs	r3, #0
 800526c:	461c      	mov	r4, r3
 800526e:	700b      	strb	r3, [r1, #0]
 8005270:	4620      	mov	r0, r4
 8005272:	bd10      	pop	{r4, pc}
 8005274:	2a0a      	cmp	r2, #10
 8005276:	d109      	bne.n	800528c <__itoa+0x2c>
 8005278:	2800      	cmp	r0, #0
 800527a:	da07      	bge.n	800528c <__itoa+0x2c>
 800527c:	232d      	movs	r3, #45	@ 0x2d
 800527e:	700b      	strb	r3, [r1, #0]
 8005280:	2101      	movs	r1, #1
 8005282:	4240      	negs	r0, r0
 8005284:	4421      	add	r1, r4
 8005286:	f000 f805 	bl	8005294 <__utoa>
 800528a:	e7f1      	b.n	8005270 <__itoa+0x10>
 800528c:	2100      	movs	r1, #0
 800528e:	e7f9      	b.n	8005284 <__itoa+0x24>

08005290 <itoa>:
 8005290:	f7ff bfe6 	b.w	8005260 <__itoa>

08005294 <__utoa>:
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b08b      	sub	sp, #44	@ 0x2c
 8005298:	4605      	mov	r5, r0
 800529a:	460b      	mov	r3, r1
 800529c:	466e      	mov	r6, sp
 800529e:	4c1d      	ldr	r4, [pc, #116]	@ (8005314 <__utoa+0x80>)
 80052a0:	f104 0c20 	add.w	ip, r4, #32
 80052a4:	4637      	mov	r7, r6
 80052a6:	6820      	ldr	r0, [r4, #0]
 80052a8:	6861      	ldr	r1, [r4, #4]
 80052aa:	3408      	adds	r4, #8
 80052ac:	c703      	stmia	r7!, {r0, r1}
 80052ae:	4564      	cmp	r4, ip
 80052b0:	463e      	mov	r6, r7
 80052b2:	d1f7      	bne.n	80052a4 <__utoa+0x10>
 80052b4:	7921      	ldrb	r1, [r4, #4]
 80052b6:	6820      	ldr	r0, [r4, #0]
 80052b8:	7139      	strb	r1, [r7, #4]
 80052ba:	1e91      	subs	r1, r2, #2
 80052bc:	2922      	cmp	r1, #34	@ 0x22
 80052be:	6038      	str	r0, [r7, #0]
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	d904      	bls.n	80052d0 <__utoa+0x3c>
 80052c6:	7019      	strb	r1, [r3, #0]
 80052c8:	460b      	mov	r3, r1
 80052ca:	4618      	mov	r0, r3
 80052cc:	b00b      	add	sp, #44	@ 0x2c
 80052ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d0:	1e58      	subs	r0, r3, #1
 80052d2:	4684      	mov	ip, r0
 80052d4:	fbb5 f7f2 	udiv	r7, r5, r2
 80052d8:	fb02 5617 	mls	r6, r2, r7, r5
 80052dc:	3628      	adds	r6, #40	@ 0x28
 80052de:	446e      	add	r6, sp
 80052e0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80052e4:	460c      	mov	r4, r1
 80052e6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80052ea:	462e      	mov	r6, r5
 80052ec:	42b2      	cmp	r2, r6
 80052ee:	463d      	mov	r5, r7
 80052f0:	f101 0101 	add.w	r1, r1, #1
 80052f4:	d9ee      	bls.n	80052d4 <__utoa+0x40>
 80052f6:	2200      	movs	r2, #0
 80052f8:	545a      	strb	r2, [r3, r1]
 80052fa:	1919      	adds	r1, r3, r4
 80052fc:	1aa5      	subs	r5, r4, r2
 80052fe:	42aa      	cmp	r2, r5
 8005300:	dae3      	bge.n	80052ca <__utoa+0x36>
 8005302:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005306:	780e      	ldrb	r6, [r1, #0]
 8005308:	3201      	adds	r2, #1
 800530a:	7006      	strb	r6, [r0, #0]
 800530c:	f801 5901 	strb.w	r5, [r1], #-1
 8005310:	e7f4      	b.n	80052fc <__utoa+0x68>
 8005312:	bf00      	nop
 8005314:	08007dd2 	.word	0x08007dd2

08005318 <_vsniprintf_r>:
 8005318:	b530      	push	{r4, r5, lr}
 800531a:	4614      	mov	r4, r2
 800531c:	2c00      	cmp	r4, #0
 800531e:	4605      	mov	r5, r0
 8005320:	461a      	mov	r2, r3
 8005322:	b09b      	sub	sp, #108	@ 0x6c
 8005324:	da05      	bge.n	8005332 <_vsniprintf_r+0x1a>
 8005326:	238b      	movs	r3, #139	@ 0x8b
 8005328:	6003      	str	r3, [r0, #0]
 800532a:	f04f 30ff 	mov.w	r0, #4294967295
 800532e:	b01b      	add	sp, #108	@ 0x6c
 8005330:	bd30      	pop	{r4, r5, pc}
 8005332:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005336:	f8ad 300c 	strh.w	r3, [sp, #12]
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	9319      	str	r3, [sp, #100]	@ 0x64
 8005340:	bf0c      	ite	eq
 8005342:	4623      	moveq	r3, r4
 8005344:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005348:	9302      	str	r3, [sp, #8]
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005350:	9100      	str	r1, [sp, #0]
 8005352:	9104      	str	r1, [sp, #16]
 8005354:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005358:	4669      	mov	r1, sp
 800535a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800535c:	f000 f99e 	bl	800569c <_svfiprintf_r>
 8005360:	1c43      	adds	r3, r0, #1
 8005362:	bfbc      	itt	lt
 8005364:	238b      	movlt	r3, #139	@ 0x8b
 8005366:	602b      	strlt	r3, [r5, #0]
 8005368:	2c00      	cmp	r4, #0
 800536a:	d0e0      	beq.n	800532e <_vsniprintf_r+0x16>
 800536c:	2200      	movs	r2, #0
 800536e:	9b00      	ldr	r3, [sp, #0]
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	e7dc      	b.n	800532e <_vsniprintf_r+0x16>

08005374 <vsniprintf>:
 8005374:	b507      	push	{r0, r1, r2, lr}
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	4613      	mov	r3, r2
 800537a:	460a      	mov	r2, r1
 800537c:	4601      	mov	r1, r0
 800537e:	4803      	ldr	r0, [pc, #12]	@ (800538c <vsniprintf+0x18>)
 8005380:	6800      	ldr	r0, [r0, #0]
 8005382:	f7ff ffc9 	bl	8005318 <_vsniprintf_r>
 8005386:	b003      	add	sp, #12
 8005388:	f85d fb04 	ldr.w	pc, [sp], #4
 800538c:	2000001c 	.word	0x2000001c

08005390 <memset>:
 8005390:	4603      	mov	r3, r0
 8005392:	4402      	add	r2, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <__errno>:
 80053a0:	4b01      	ldr	r3, [pc, #4]	@ (80053a8 <__errno+0x8>)
 80053a2:	6818      	ldr	r0, [r3, #0]
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	2000001c 	.word	0x2000001c

080053ac <__libc_init_array>:
 80053ac:	b570      	push	{r4, r5, r6, lr}
 80053ae:	2600      	movs	r6, #0
 80053b0:	4d0c      	ldr	r5, [pc, #48]	@ (80053e4 <__libc_init_array+0x38>)
 80053b2:	4c0d      	ldr	r4, [pc, #52]	@ (80053e8 <__libc_init_array+0x3c>)
 80053b4:	1b64      	subs	r4, r4, r5
 80053b6:	10a4      	asrs	r4, r4, #2
 80053b8:	42a6      	cmp	r6, r4
 80053ba:	d109      	bne.n	80053d0 <__libc_init_array+0x24>
 80053bc:	f000 fc76 	bl	8005cac <_init>
 80053c0:	2600      	movs	r6, #0
 80053c2:	4d0a      	ldr	r5, [pc, #40]	@ (80053ec <__libc_init_array+0x40>)
 80053c4:	4c0a      	ldr	r4, [pc, #40]	@ (80053f0 <__libc_init_array+0x44>)
 80053c6:	1b64      	subs	r4, r4, r5
 80053c8:	10a4      	asrs	r4, r4, #2
 80053ca:	42a6      	cmp	r6, r4
 80053cc:	d105      	bne.n	80053da <__libc_init_array+0x2e>
 80053ce:	bd70      	pop	{r4, r5, r6, pc}
 80053d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d4:	4798      	blx	r3
 80053d6:	3601      	adds	r6, #1
 80053d8:	e7ee      	b.n	80053b8 <__libc_init_array+0xc>
 80053da:	f855 3b04 	ldr.w	r3, [r5], #4
 80053de:	4798      	blx	r3
 80053e0:	3601      	adds	r6, #1
 80053e2:	e7f2      	b.n	80053ca <__libc_init_array+0x1e>
 80053e4:	08007e2c 	.word	0x08007e2c
 80053e8:	08007e2c 	.word	0x08007e2c
 80053ec:	08007e2c 	.word	0x08007e2c
 80053f0:	08007e30 	.word	0x08007e30

080053f4 <__retarget_lock_acquire_recursive>:
 80053f4:	4770      	bx	lr

080053f6 <__retarget_lock_release_recursive>:
 80053f6:	4770      	bx	lr

080053f8 <_free_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4605      	mov	r5, r0
 80053fc:	2900      	cmp	r1, #0
 80053fe:	d040      	beq.n	8005482 <_free_r+0x8a>
 8005400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005404:	1f0c      	subs	r4, r1, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	bfb8      	it	lt
 800540a:	18e4      	addlt	r4, r4, r3
 800540c:	f000 f8de 	bl	80055cc <__malloc_lock>
 8005410:	4a1c      	ldr	r2, [pc, #112]	@ (8005484 <_free_r+0x8c>)
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	b933      	cbnz	r3, 8005424 <_free_r+0x2c>
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	6014      	str	r4, [r2, #0]
 800541a:	4628      	mov	r0, r5
 800541c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005420:	f000 b8da 	b.w	80055d8 <__malloc_unlock>
 8005424:	42a3      	cmp	r3, r4
 8005426:	d908      	bls.n	800543a <_free_r+0x42>
 8005428:	6820      	ldr	r0, [r4, #0]
 800542a:	1821      	adds	r1, r4, r0
 800542c:	428b      	cmp	r3, r1
 800542e:	bf01      	itttt	eq
 8005430:	6819      	ldreq	r1, [r3, #0]
 8005432:	685b      	ldreq	r3, [r3, #4]
 8005434:	1809      	addeq	r1, r1, r0
 8005436:	6021      	streq	r1, [r4, #0]
 8005438:	e7ed      	b.n	8005416 <_free_r+0x1e>
 800543a:	461a      	mov	r2, r3
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	b10b      	cbz	r3, 8005444 <_free_r+0x4c>
 8005440:	42a3      	cmp	r3, r4
 8005442:	d9fa      	bls.n	800543a <_free_r+0x42>
 8005444:	6811      	ldr	r1, [r2, #0]
 8005446:	1850      	adds	r0, r2, r1
 8005448:	42a0      	cmp	r0, r4
 800544a:	d10b      	bne.n	8005464 <_free_r+0x6c>
 800544c:	6820      	ldr	r0, [r4, #0]
 800544e:	4401      	add	r1, r0
 8005450:	1850      	adds	r0, r2, r1
 8005452:	4283      	cmp	r3, r0
 8005454:	6011      	str	r1, [r2, #0]
 8005456:	d1e0      	bne.n	800541a <_free_r+0x22>
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	4408      	add	r0, r1
 800545e:	6010      	str	r0, [r2, #0]
 8005460:	6053      	str	r3, [r2, #4]
 8005462:	e7da      	b.n	800541a <_free_r+0x22>
 8005464:	d902      	bls.n	800546c <_free_r+0x74>
 8005466:	230c      	movs	r3, #12
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	e7d6      	b.n	800541a <_free_r+0x22>
 800546c:	6820      	ldr	r0, [r4, #0]
 800546e:	1821      	adds	r1, r4, r0
 8005470:	428b      	cmp	r3, r1
 8005472:	bf01      	itttt	eq
 8005474:	6819      	ldreq	r1, [r3, #0]
 8005476:	685b      	ldreq	r3, [r3, #4]
 8005478:	1809      	addeq	r1, r1, r0
 800547a:	6021      	streq	r1, [r4, #0]
 800547c:	6063      	str	r3, [r4, #4]
 800547e:	6054      	str	r4, [r2, #4]
 8005480:	e7cb      	b.n	800541a <_free_r+0x22>
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000724 	.word	0x20000724

08005488 <sbrk_aligned>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4e0f      	ldr	r6, [pc, #60]	@ (80054c8 <sbrk_aligned+0x40>)
 800548c:	460c      	mov	r4, r1
 800548e:	6831      	ldr	r1, [r6, #0]
 8005490:	4605      	mov	r5, r0
 8005492:	b911      	cbnz	r1, 800549a <sbrk_aligned+0x12>
 8005494:	f000 fba8 	bl	8005be8 <_sbrk_r>
 8005498:	6030      	str	r0, [r6, #0]
 800549a:	4621      	mov	r1, r4
 800549c:	4628      	mov	r0, r5
 800549e:	f000 fba3 	bl	8005be8 <_sbrk_r>
 80054a2:	1c43      	adds	r3, r0, #1
 80054a4:	d103      	bne.n	80054ae <sbrk_aligned+0x26>
 80054a6:	f04f 34ff 	mov.w	r4, #4294967295
 80054aa:	4620      	mov	r0, r4
 80054ac:	bd70      	pop	{r4, r5, r6, pc}
 80054ae:	1cc4      	adds	r4, r0, #3
 80054b0:	f024 0403 	bic.w	r4, r4, #3
 80054b4:	42a0      	cmp	r0, r4
 80054b6:	d0f8      	beq.n	80054aa <sbrk_aligned+0x22>
 80054b8:	1a21      	subs	r1, r4, r0
 80054ba:	4628      	mov	r0, r5
 80054bc:	f000 fb94 	bl	8005be8 <_sbrk_r>
 80054c0:	3001      	adds	r0, #1
 80054c2:	d1f2      	bne.n	80054aa <sbrk_aligned+0x22>
 80054c4:	e7ef      	b.n	80054a6 <sbrk_aligned+0x1e>
 80054c6:	bf00      	nop
 80054c8:	20000720 	.word	0x20000720

080054cc <_malloc_r>:
 80054cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054d0:	1ccd      	adds	r5, r1, #3
 80054d2:	f025 0503 	bic.w	r5, r5, #3
 80054d6:	3508      	adds	r5, #8
 80054d8:	2d0c      	cmp	r5, #12
 80054da:	bf38      	it	cc
 80054dc:	250c      	movcc	r5, #12
 80054de:	2d00      	cmp	r5, #0
 80054e0:	4606      	mov	r6, r0
 80054e2:	db01      	blt.n	80054e8 <_malloc_r+0x1c>
 80054e4:	42a9      	cmp	r1, r5
 80054e6:	d904      	bls.n	80054f2 <_malloc_r+0x26>
 80054e8:	230c      	movs	r3, #12
 80054ea:	6033      	str	r3, [r6, #0]
 80054ec:	2000      	movs	r0, #0
 80054ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055c8 <_malloc_r+0xfc>
 80054f6:	f000 f869 	bl	80055cc <__malloc_lock>
 80054fa:	f8d8 3000 	ldr.w	r3, [r8]
 80054fe:	461c      	mov	r4, r3
 8005500:	bb44      	cbnz	r4, 8005554 <_malloc_r+0x88>
 8005502:	4629      	mov	r1, r5
 8005504:	4630      	mov	r0, r6
 8005506:	f7ff ffbf 	bl	8005488 <sbrk_aligned>
 800550a:	1c43      	adds	r3, r0, #1
 800550c:	4604      	mov	r4, r0
 800550e:	d158      	bne.n	80055c2 <_malloc_r+0xf6>
 8005510:	f8d8 4000 	ldr.w	r4, [r8]
 8005514:	4627      	mov	r7, r4
 8005516:	2f00      	cmp	r7, #0
 8005518:	d143      	bne.n	80055a2 <_malloc_r+0xd6>
 800551a:	2c00      	cmp	r4, #0
 800551c:	d04b      	beq.n	80055b6 <_malloc_r+0xea>
 800551e:	6823      	ldr	r3, [r4, #0]
 8005520:	4639      	mov	r1, r7
 8005522:	4630      	mov	r0, r6
 8005524:	eb04 0903 	add.w	r9, r4, r3
 8005528:	f000 fb5e 	bl	8005be8 <_sbrk_r>
 800552c:	4581      	cmp	r9, r0
 800552e:	d142      	bne.n	80055b6 <_malloc_r+0xea>
 8005530:	6821      	ldr	r1, [r4, #0]
 8005532:	4630      	mov	r0, r6
 8005534:	1a6d      	subs	r5, r5, r1
 8005536:	4629      	mov	r1, r5
 8005538:	f7ff ffa6 	bl	8005488 <sbrk_aligned>
 800553c:	3001      	adds	r0, #1
 800553e:	d03a      	beq.n	80055b6 <_malloc_r+0xea>
 8005540:	6823      	ldr	r3, [r4, #0]
 8005542:	442b      	add	r3, r5
 8005544:	6023      	str	r3, [r4, #0]
 8005546:	f8d8 3000 	ldr.w	r3, [r8]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	bb62      	cbnz	r2, 80055a8 <_malloc_r+0xdc>
 800554e:	f8c8 7000 	str.w	r7, [r8]
 8005552:	e00f      	b.n	8005574 <_malloc_r+0xa8>
 8005554:	6822      	ldr	r2, [r4, #0]
 8005556:	1b52      	subs	r2, r2, r5
 8005558:	d420      	bmi.n	800559c <_malloc_r+0xd0>
 800555a:	2a0b      	cmp	r2, #11
 800555c:	d917      	bls.n	800558e <_malloc_r+0xc2>
 800555e:	1961      	adds	r1, r4, r5
 8005560:	42a3      	cmp	r3, r4
 8005562:	6025      	str	r5, [r4, #0]
 8005564:	bf18      	it	ne
 8005566:	6059      	strne	r1, [r3, #4]
 8005568:	6863      	ldr	r3, [r4, #4]
 800556a:	bf08      	it	eq
 800556c:	f8c8 1000 	streq.w	r1, [r8]
 8005570:	5162      	str	r2, [r4, r5]
 8005572:	604b      	str	r3, [r1, #4]
 8005574:	4630      	mov	r0, r6
 8005576:	f000 f82f 	bl	80055d8 <__malloc_unlock>
 800557a:	f104 000b 	add.w	r0, r4, #11
 800557e:	1d23      	adds	r3, r4, #4
 8005580:	f020 0007 	bic.w	r0, r0, #7
 8005584:	1ac2      	subs	r2, r0, r3
 8005586:	bf1c      	itt	ne
 8005588:	1a1b      	subne	r3, r3, r0
 800558a:	50a3      	strne	r3, [r4, r2]
 800558c:	e7af      	b.n	80054ee <_malloc_r+0x22>
 800558e:	6862      	ldr	r2, [r4, #4]
 8005590:	42a3      	cmp	r3, r4
 8005592:	bf0c      	ite	eq
 8005594:	f8c8 2000 	streq.w	r2, [r8]
 8005598:	605a      	strne	r2, [r3, #4]
 800559a:	e7eb      	b.n	8005574 <_malloc_r+0xa8>
 800559c:	4623      	mov	r3, r4
 800559e:	6864      	ldr	r4, [r4, #4]
 80055a0:	e7ae      	b.n	8005500 <_malloc_r+0x34>
 80055a2:	463c      	mov	r4, r7
 80055a4:	687f      	ldr	r7, [r7, #4]
 80055a6:	e7b6      	b.n	8005516 <_malloc_r+0x4a>
 80055a8:	461a      	mov	r2, r3
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	42a3      	cmp	r3, r4
 80055ae:	d1fb      	bne.n	80055a8 <_malloc_r+0xdc>
 80055b0:	2300      	movs	r3, #0
 80055b2:	6053      	str	r3, [r2, #4]
 80055b4:	e7de      	b.n	8005574 <_malloc_r+0xa8>
 80055b6:	230c      	movs	r3, #12
 80055b8:	4630      	mov	r0, r6
 80055ba:	6033      	str	r3, [r6, #0]
 80055bc:	f000 f80c 	bl	80055d8 <__malloc_unlock>
 80055c0:	e794      	b.n	80054ec <_malloc_r+0x20>
 80055c2:	6005      	str	r5, [r0, #0]
 80055c4:	e7d6      	b.n	8005574 <_malloc_r+0xa8>
 80055c6:	bf00      	nop
 80055c8:	20000724 	.word	0x20000724

080055cc <__malloc_lock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	@ (80055d4 <__malloc_lock+0x8>)
 80055ce:	f7ff bf11 	b.w	80053f4 <__retarget_lock_acquire_recursive>
 80055d2:	bf00      	nop
 80055d4:	2000071c 	.word	0x2000071c

080055d8 <__malloc_unlock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	@ (80055e0 <__malloc_unlock+0x8>)
 80055da:	f7ff bf0c 	b.w	80053f6 <__retarget_lock_release_recursive>
 80055de:	bf00      	nop
 80055e0:	2000071c 	.word	0x2000071c

080055e4 <__ssputs_r>:
 80055e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055e8:	461f      	mov	r7, r3
 80055ea:	688e      	ldr	r6, [r1, #8]
 80055ec:	4682      	mov	sl, r0
 80055ee:	42be      	cmp	r6, r7
 80055f0:	460c      	mov	r4, r1
 80055f2:	4690      	mov	r8, r2
 80055f4:	680b      	ldr	r3, [r1, #0]
 80055f6:	d82d      	bhi.n	8005654 <__ssputs_r+0x70>
 80055f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005600:	d026      	beq.n	8005650 <__ssputs_r+0x6c>
 8005602:	6965      	ldr	r5, [r4, #20]
 8005604:	6909      	ldr	r1, [r1, #16]
 8005606:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800560a:	eba3 0901 	sub.w	r9, r3, r1
 800560e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005612:	1c7b      	adds	r3, r7, #1
 8005614:	444b      	add	r3, r9
 8005616:	106d      	asrs	r5, r5, #1
 8005618:	429d      	cmp	r5, r3
 800561a:	bf38      	it	cc
 800561c:	461d      	movcc	r5, r3
 800561e:	0553      	lsls	r3, r2, #21
 8005620:	d527      	bpl.n	8005672 <__ssputs_r+0x8e>
 8005622:	4629      	mov	r1, r5
 8005624:	f7ff ff52 	bl	80054cc <_malloc_r>
 8005628:	4606      	mov	r6, r0
 800562a:	b360      	cbz	r0, 8005686 <__ssputs_r+0xa2>
 800562c:	464a      	mov	r2, r9
 800562e:	6921      	ldr	r1, [r4, #16]
 8005630:	f000 faf8 	bl	8005c24 <memcpy>
 8005634:	89a3      	ldrh	r3, [r4, #12]
 8005636:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800563a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800563e:	81a3      	strh	r3, [r4, #12]
 8005640:	6126      	str	r6, [r4, #16]
 8005642:	444e      	add	r6, r9
 8005644:	6026      	str	r6, [r4, #0]
 8005646:	463e      	mov	r6, r7
 8005648:	6165      	str	r5, [r4, #20]
 800564a:	eba5 0509 	sub.w	r5, r5, r9
 800564e:	60a5      	str	r5, [r4, #8]
 8005650:	42be      	cmp	r6, r7
 8005652:	d900      	bls.n	8005656 <__ssputs_r+0x72>
 8005654:	463e      	mov	r6, r7
 8005656:	4632      	mov	r2, r6
 8005658:	4641      	mov	r1, r8
 800565a:	6820      	ldr	r0, [r4, #0]
 800565c:	f000 faaa 	bl	8005bb4 <memmove>
 8005660:	2000      	movs	r0, #0
 8005662:	68a3      	ldr	r3, [r4, #8]
 8005664:	1b9b      	subs	r3, r3, r6
 8005666:	60a3      	str	r3, [r4, #8]
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	4433      	add	r3, r6
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005672:	462a      	mov	r2, r5
 8005674:	f000 fae4 	bl	8005c40 <_realloc_r>
 8005678:	4606      	mov	r6, r0
 800567a:	2800      	cmp	r0, #0
 800567c:	d1e0      	bne.n	8005640 <__ssputs_r+0x5c>
 800567e:	4650      	mov	r0, sl
 8005680:	6921      	ldr	r1, [r4, #16]
 8005682:	f7ff feb9 	bl	80053f8 <_free_r>
 8005686:	230c      	movs	r3, #12
 8005688:	f8ca 3000 	str.w	r3, [sl]
 800568c:	89a3      	ldrh	r3, [r4, #12]
 800568e:	f04f 30ff 	mov.w	r0, #4294967295
 8005692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005696:	81a3      	strh	r3, [r4, #12]
 8005698:	e7e9      	b.n	800566e <__ssputs_r+0x8a>
	...

0800569c <_svfiprintf_r>:
 800569c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a0:	4698      	mov	r8, r3
 80056a2:	898b      	ldrh	r3, [r1, #12]
 80056a4:	4607      	mov	r7, r0
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	460d      	mov	r5, r1
 80056aa:	4614      	mov	r4, r2
 80056ac:	b09d      	sub	sp, #116	@ 0x74
 80056ae:	d510      	bpl.n	80056d2 <_svfiprintf_r+0x36>
 80056b0:	690b      	ldr	r3, [r1, #16]
 80056b2:	b973      	cbnz	r3, 80056d2 <_svfiprintf_r+0x36>
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	f7ff ff09 	bl	80054cc <_malloc_r>
 80056ba:	6028      	str	r0, [r5, #0]
 80056bc:	6128      	str	r0, [r5, #16]
 80056be:	b930      	cbnz	r0, 80056ce <_svfiprintf_r+0x32>
 80056c0:	230c      	movs	r3, #12
 80056c2:	603b      	str	r3, [r7, #0]
 80056c4:	f04f 30ff 	mov.w	r0, #4294967295
 80056c8:	b01d      	add	sp, #116	@ 0x74
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	2340      	movs	r3, #64	@ 0x40
 80056d0:	616b      	str	r3, [r5, #20]
 80056d2:	2300      	movs	r3, #0
 80056d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80056d6:	2320      	movs	r3, #32
 80056d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056dc:	2330      	movs	r3, #48	@ 0x30
 80056de:	f04f 0901 	mov.w	r9, #1
 80056e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80056e6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005880 <_svfiprintf_r+0x1e4>
 80056ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056ee:	4623      	mov	r3, r4
 80056f0:	469a      	mov	sl, r3
 80056f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056f6:	b10a      	cbz	r2, 80056fc <_svfiprintf_r+0x60>
 80056f8:	2a25      	cmp	r2, #37	@ 0x25
 80056fa:	d1f9      	bne.n	80056f0 <_svfiprintf_r+0x54>
 80056fc:	ebba 0b04 	subs.w	fp, sl, r4
 8005700:	d00b      	beq.n	800571a <_svfiprintf_r+0x7e>
 8005702:	465b      	mov	r3, fp
 8005704:	4622      	mov	r2, r4
 8005706:	4629      	mov	r1, r5
 8005708:	4638      	mov	r0, r7
 800570a:	f7ff ff6b 	bl	80055e4 <__ssputs_r>
 800570e:	3001      	adds	r0, #1
 8005710:	f000 80a7 	beq.w	8005862 <_svfiprintf_r+0x1c6>
 8005714:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005716:	445a      	add	r2, fp
 8005718:	9209      	str	r2, [sp, #36]	@ 0x24
 800571a:	f89a 3000 	ldrb.w	r3, [sl]
 800571e:	2b00      	cmp	r3, #0
 8005720:	f000 809f 	beq.w	8005862 <_svfiprintf_r+0x1c6>
 8005724:	2300      	movs	r3, #0
 8005726:	f04f 32ff 	mov.w	r2, #4294967295
 800572a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800572e:	f10a 0a01 	add.w	sl, sl, #1
 8005732:	9304      	str	r3, [sp, #16]
 8005734:	9307      	str	r3, [sp, #28]
 8005736:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800573a:	931a      	str	r3, [sp, #104]	@ 0x68
 800573c:	4654      	mov	r4, sl
 800573e:	2205      	movs	r2, #5
 8005740:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005744:	484e      	ldr	r0, [pc, #312]	@ (8005880 <_svfiprintf_r+0x1e4>)
 8005746:	f000 fa5f 	bl	8005c08 <memchr>
 800574a:	9a04      	ldr	r2, [sp, #16]
 800574c:	b9d8      	cbnz	r0, 8005786 <_svfiprintf_r+0xea>
 800574e:	06d0      	lsls	r0, r2, #27
 8005750:	bf44      	itt	mi
 8005752:	2320      	movmi	r3, #32
 8005754:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005758:	0711      	lsls	r1, r2, #28
 800575a:	bf44      	itt	mi
 800575c:	232b      	movmi	r3, #43	@ 0x2b
 800575e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005762:	f89a 3000 	ldrb.w	r3, [sl]
 8005766:	2b2a      	cmp	r3, #42	@ 0x2a
 8005768:	d015      	beq.n	8005796 <_svfiprintf_r+0xfa>
 800576a:	4654      	mov	r4, sl
 800576c:	2000      	movs	r0, #0
 800576e:	f04f 0c0a 	mov.w	ip, #10
 8005772:	9a07      	ldr	r2, [sp, #28]
 8005774:	4621      	mov	r1, r4
 8005776:	f811 3b01 	ldrb.w	r3, [r1], #1
 800577a:	3b30      	subs	r3, #48	@ 0x30
 800577c:	2b09      	cmp	r3, #9
 800577e:	d94b      	bls.n	8005818 <_svfiprintf_r+0x17c>
 8005780:	b1b0      	cbz	r0, 80057b0 <_svfiprintf_r+0x114>
 8005782:	9207      	str	r2, [sp, #28]
 8005784:	e014      	b.n	80057b0 <_svfiprintf_r+0x114>
 8005786:	eba0 0308 	sub.w	r3, r0, r8
 800578a:	fa09 f303 	lsl.w	r3, r9, r3
 800578e:	4313      	orrs	r3, r2
 8005790:	46a2      	mov	sl, r4
 8005792:	9304      	str	r3, [sp, #16]
 8005794:	e7d2      	b.n	800573c <_svfiprintf_r+0xa0>
 8005796:	9b03      	ldr	r3, [sp, #12]
 8005798:	1d19      	adds	r1, r3, #4
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	9103      	str	r1, [sp, #12]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	bfbb      	ittet	lt
 80057a2:	425b      	neglt	r3, r3
 80057a4:	f042 0202 	orrlt.w	r2, r2, #2
 80057a8:	9307      	strge	r3, [sp, #28]
 80057aa:	9307      	strlt	r3, [sp, #28]
 80057ac:	bfb8      	it	lt
 80057ae:	9204      	strlt	r2, [sp, #16]
 80057b0:	7823      	ldrb	r3, [r4, #0]
 80057b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057b4:	d10a      	bne.n	80057cc <_svfiprintf_r+0x130>
 80057b6:	7863      	ldrb	r3, [r4, #1]
 80057b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ba:	d132      	bne.n	8005822 <_svfiprintf_r+0x186>
 80057bc:	9b03      	ldr	r3, [sp, #12]
 80057be:	3402      	adds	r4, #2
 80057c0:	1d1a      	adds	r2, r3, #4
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	9203      	str	r2, [sp, #12]
 80057c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057ca:	9305      	str	r3, [sp, #20]
 80057cc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005884 <_svfiprintf_r+0x1e8>
 80057d0:	2203      	movs	r2, #3
 80057d2:	4650      	mov	r0, sl
 80057d4:	7821      	ldrb	r1, [r4, #0]
 80057d6:	f000 fa17 	bl	8005c08 <memchr>
 80057da:	b138      	cbz	r0, 80057ec <_svfiprintf_r+0x150>
 80057dc:	2240      	movs	r2, #64	@ 0x40
 80057de:	9b04      	ldr	r3, [sp, #16]
 80057e0:	eba0 000a 	sub.w	r0, r0, sl
 80057e4:	4082      	lsls	r2, r0
 80057e6:	4313      	orrs	r3, r2
 80057e8:	3401      	adds	r4, #1
 80057ea:	9304      	str	r3, [sp, #16]
 80057ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f0:	2206      	movs	r2, #6
 80057f2:	4825      	ldr	r0, [pc, #148]	@ (8005888 <_svfiprintf_r+0x1ec>)
 80057f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057f8:	f000 fa06 	bl	8005c08 <memchr>
 80057fc:	2800      	cmp	r0, #0
 80057fe:	d036      	beq.n	800586e <_svfiprintf_r+0x1d2>
 8005800:	4b22      	ldr	r3, [pc, #136]	@ (800588c <_svfiprintf_r+0x1f0>)
 8005802:	bb1b      	cbnz	r3, 800584c <_svfiprintf_r+0x1b0>
 8005804:	9b03      	ldr	r3, [sp, #12]
 8005806:	3307      	adds	r3, #7
 8005808:	f023 0307 	bic.w	r3, r3, #7
 800580c:	3308      	adds	r3, #8
 800580e:	9303      	str	r3, [sp, #12]
 8005810:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005812:	4433      	add	r3, r6
 8005814:	9309      	str	r3, [sp, #36]	@ 0x24
 8005816:	e76a      	b.n	80056ee <_svfiprintf_r+0x52>
 8005818:	460c      	mov	r4, r1
 800581a:	2001      	movs	r0, #1
 800581c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005820:	e7a8      	b.n	8005774 <_svfiprintf_r+0xd8>
 8005822:	2300      	movs	r3, #0
 8005824:	f04f 0c0a 	mov.w	ip, #10
 8005828:	4619      	mov	r1, r3
 800582a:	3401      	adds	r4, #1
 800582c:	9305      	str	r3, [sp, #20]
 800582e:	4620      	mov	r0, r4
 8005830:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005834:	3a30      	subs	r2, #48	@ 0x30
 8005836:	2a09      	cmp	r2, #9
 8005838:	d903      	bls.n	8005842 <_svfiprintf_r+0x1a6>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0c6      	beq.n	80057cc <_svfiprintf_r+0x130>
 800583e:	9105      	str	r1, [sp, #20]
 8005840:	e7c4      	b.n	80057cc <_svfiprintf_r+0x130>
 8005842:	4604      	mov	r4, r0
 8005844:	2301      	movs	r3, #1
 8005846:	fb0c 2101 	mla	r1, ip, r1, r2
 800584a:	e7f0      	b.n	800582e <_svfiprintf_r+0x192>
 800584c:	ab03      	add	r3, sp, #12
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	462a      	mov	r2, r5
 8005852:	4638      	mov	r0, r7
 8005854:	4b0e      	ldr	r3, [pc, #56]	@ (8005890 <_svfiprintf_r+0x1f4>)
 8005856:	a904      	add	r1, sp, #16
 8005858:	f3af 8000 	nop.w
 800585c:	1c42      	adds	r2, r0, #1
 800585e:	4606      	mov	r6, r0
 8005860:	d1d6      	bne.n	8005810 <_svfiprintf_r+0x174>
 8005862:	89ab      	ldrh	r3, [r5, #12]
 8005864:	065b      	lsls	r3, r3, #25
 8005866:	f53f af2d 	bmi.w	80056c4 <_svfiprintf_r+0x28>
 800586a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800586c:	e72c      	b.n	80056c8 <_svfiprintf_r+0x2c>
 800586e:	ab03      	add	r3, sp, #12
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	462a      	mov	r2, r5
 8005874:	4638      	mov	r0, r7
 8005876:	4b06      	ldr	r3, [pc, #24]	@ (8005890 <_svfiprintf_r+0x1f4>)
 8005878:	a904      	add	r1, sp, #16
 800587a:	f000 f87d 	bl	8005978 <_printf_i>
 800587e:	e7ed      	b.n	800585c <_svfiprintf_r+0x1c0>
 8005880:	08007df7 	.word	0x08007df7
 8005884:	08007dfd 	.word	0x08007dfd
 8005888:	08007e01 	.word	0x08007e01
 800588c:	00000000 	.word	0x00000000
 8005890:	080055e5 	.word	0x080055e5

08005894 <_printf_common>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	4616      	mov	r6, r2
 800589a:	4698      	mov	r8, r3
 800589c:	688a      	ldr	r2, [r1, #8]
 800589e:	690b      	ldr	r3, [r1, #16]
 80058a0:	4607      	mov	r7, r0
 80058a2:	4293      	cmp	r3, r2
 80058a4:	bfb8      	it	lt
 80058a6:	4613      	movlt	r3, r2
 80058a8:	6033      	str	r3, [r6, #0]
 80058aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058ae:	460c      	mov	r4, r1
 80058b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058b4:	b10a      	cbz	r2, 80058ba <_printf_common+0x26>
 80058b6:	3301      	adds	r3, #1
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	0699      	lsls	r1, r3, #26
 80058be:	bf42      	ittt	mi
 80058c0:	6833      	ldrmi	r3, [r6, #0]
 80058c2:	3302      	addmi	r3, #2
 80058c4:	6033      	strmi	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	f015 0506 	ands.w	r5, r5, #6
 80058cc:	d106      	bne.n	80058dc <_printf_common+0x48>
 80058ce:	f104 0a19 	add.w	sl, r4, #25
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dc2b      	bgt.n	8005934 <_printf_common+0xa0>
 80058dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	3b00      	subs	r3, #0
 80058e4:	bf18      	it	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	0692      	lsls	r2, r2, #26
 80058ea:	d430      	bmi.n	800594e <_printf_common+0xba>
 80058ec:	4641      	mov	r1, r8
 80058ee:	4638      	mov	r0, r7
 80058f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058f4:	47c8      	blx	r9
 80058f6:	3001      	adds	r0, #1
 80058f8:	d023      	beq.n	8005942 <_printf_common+0xae>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6922      	ldr	r2, [r4, #16]
 80058fe:	f003 0306 	and.w	r3, r3, #6
 8005902:	2b04      	cmp	r3, #4
 8005904:	bf14      	ite	ne
 8005906:	2500      	movne	r5, #0
 8005908:	6833      	ldreq	r3, [r6, #0]
 800590a:	f04f 0600 	mov.w	r6, #0
 800590e:	bf08      	it	eq
 8005910:	68e5      	ldreq	r5, [r4, #12]
 8005912:	f104 041a 	add.w	r4, r4, #26
 8005916:	bf08      	it	eq
 8005918:	1aed      	subeq	r5, r5, r3
 800591a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800591e:	bf08      	it	eq
 8005920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005924:	4293      	cmp	r3, r2
 8005926:	bfc4      	itt	gt
 8005928:	1a9b      	subgt	r3, r3, r2
 800592a:	18ed      	addgt	r5, r5, r3
 800592c:	42b5      	cmp	r5, r6
 800592e:	d11a      	bne.n	8005966 <_printf_common+0xd2>
 8005930:	2000      	movs	r0, #0
 8005932:	e008      	b.n	8005946 <_printf_common+0xb2>
 8005934:	2301      	movs	r3, #1
 8005936:	4652      	mov	r2, sl
 8005938:	4641      	mov	r1, r8
 800593a:	4638      	mov	r0, r7
 800593c:	47c8      	blx	r9
 800593e:	3001      	adds	r0, #1
 8005940:	d103      	bne.n	800594a <_printf_common+0xb6>
 8005942:	f04f 30ff 	mov.w	r0, #4294967295
 8005946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800594a:	3501      	adds	r5, #1
 800594c:	e7c1      	b.n	80058d2 <_printf_common+0x3e>
 800594e:	2030      	movs	r0, #48	@ 0x30
 8005950:	18e1      	adds	r1, r4, r3
 8005952:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800595c:	4422      	add	r2, r4
 800595e:	3302      	adds	r3, #2
 8005960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005964:	e7c2      	b.n	80058ec <_printf_common+0x58>
 8005966:	2301      	movs	r3, #1
 8005968:	4622      	mov	r2, r4
 800596a:	4641      	mov	r1, r8
 800596c:	4638      	mov	r0, r7
 800596e:	47c8      	blx	r9
 8005970:	3001      	adds	r0, #1
 8005972:	d0e6      	beq.n	8005942 <_printf_common+0xae>
 8005974:	3601      	adds	r6, #1
 8005976:	e7d9      	b.n	800592c <_printf_common+0x98>

08005978 <_printf_i>:
 8005978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800597c:	7e0f      	ldrb	r7, [r1, #24]
 800597e:	4691      	mov	r9, r2
 8005980:	2f78      	cmp	r7, #120	@ 0x78
 8005982:	4680      	mov	r8, r0
 8005984:	460c      	mov	r4, r1
 8005986:	469a      	mov	sl, r3
 8005988:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800598a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800598e:	d807      	bhi.n	80059a0 <_printf_i+0x28>
 8005990:	2f62      	cmp	r7, #98	@ 0x62
 8005992:	d80a      	bhi.n	80059aa <_printf_i+0x32>
 8005994:	2f00      	cmp	r7, #0
 8005996:	f000 80d1 	beq.w	8005b3c <_printf_i+0x1c4>
 800599a:	2f58      	cmp	r7, #88	@ 0x58
 800599c:	f000 80b8 	beq.w	8005b10 <_printf_i+0x198>
 80059a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059a8:	e03a      	b.n	8005a20 <_printf_i+0xa8>
 80059aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059ae:	2b15      	cmp	r3, #21
 80059b0:	d8f6      	bhi.n	80059a0 <_printf_i+0x28>
 80059b2:	a101      	add	r1, pc, #4	@ (adr r1, 80059b8 <_printf_i+0x40>)
 80059b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b8:	08005a11 	.word	0x08005a11
 80059bc:	08005a25 	.word	0x08005a25
 80059c0:	080059a1 	.word	0x080059a1
 80059c4:	080059a1 	.word	0x080059a1
 80059c8:	080059a1 	.word	0x080059a1
 80059cc:	080059a1 	.word	0x080059a1
 80059d0:	08005a25 	.word	0x08005a25
 80059d4:	080059a1 	.word	0x080059a1
 80059d8:	080059a1 	.word	0x080059a1
 80059dc:	080059a1 	.word	0x080059a1
 80059e0:	080059a1 	.word	0x080059a1
 80059e4:	08005b23 	.word	0x08005b23
 80059e8:	08005a4f 	.word	0x08005a4f
 80059ec:	08005add 	.word	0x08005add
 80059f0:	080059a1 	.word	0x080059a1
 80059f4:	080059a1 	.word	0x080059a1
 80059f8:	08005b45 	.word	0x08005b45
 80059fc:	080059a1 	.word	0x080059a1
 8005a00:	08005a4f 	.word	0x08005a4f
 8005a04:	080059a1 	.word	0x080059a1
 8005a08:	080059a1 	.word	0x080059a1
 8005a0c:	08005ae5 	.word	0x08005ae5
 8005a10:	6833      	ldr	r3, [r6, #0]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6032      	str	r2, [r6, #0]
 8005a18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a20:	2301      	movs	r3, #1
 8005a22:	e09c      	b.n	8005b5e <_printf_i+0x1e6>
 8005a24:	6833      	ldr	r3, [r6, #0]
 8005a26:	6820      	ldr	r0, [r4, #0]
 8005a28:	1d19      	adds	r1, r3, #4
 8005a2a:	6031      	str	r1, [r6, #0]
 8005a2c:	0606      	lsls	r6, r0, #24
 8005a2e:	d501      	bpl.n	8005a34 <_printf_i+0xbc>
 8005a30:	681d      	ldr	r5, [r3, #0]
 8005a32:	e003      	b.n	8005a3c <_printf_i+0xc4>
 8005a34:	0645      	lsls	r5, r0, #25
 8005a36:	d5fb      	bpl.n	8005a30 <_printf_i+0xb8>
 8005a38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a3c:	2d00      	cmp	r5, #0
 8005a3e:	da03      	bge.n	8005a48 <_printf_i+0xd0>
 8005a40:	232d      	movs	r3, #45	@ 0x2d
 8005a42:	426d      	negs	r5, r5
 8005a44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a48:	230a      	movs	r3, #10
 8005a4a:	4858      	ldr	r0, [pc, #352]	@ (8005bac <_printf_i+0x234>)
 8005a4c:	e011      	b.n	8005a72 <_printf_i+0xfa>
 8005a4e:	6821      	ldr	r1, [r4, #0]
 8005a50:	6833      	ldr	r3, [r6, #0]
 8005a52:	0608      	lsls	r0, r1, #24
 8005a54:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a58:	d402      	bmi.n	8005a60 <_printf_i+0xe8>
 8005a5a:	0649      	lsls	r1, r1, #25
 8005a5c:	bf48      	it	mi
 8005a5e:	b2ad      	uxthmi	r5, r5
 8005a60:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a62:	6033      	str	r3, [r6, #0]
 8005a64:	bf14      	ite	ne
 8005a66:	230a      	movne	r3, #10
 8005a68:	2308      	moveq	r3, #8
 8005a6a:	4850      	ldr	r0, [pc, #320]	@ (8005bac <_printf_i+0x234>)
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a72:	6866      	ldr	r6, [r4, #4]
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	60a6      	str	r6, [r4, #8]
 8005a78:	db05      	blt.n	8005a86 <_printf_i+0x10e>
 8005a7a:	6821      	ldr	r1, [r4, #0]
 8005a7c:	432e      	orrs	r6, r5
 8005a7e:	f021 0104 	bic.w	r1, r1, #4
 8005a82:	6021      	str	r1, [r4, #0]
 8005a84:	d04b      	beq.n	8005b1e <_printf_i+0x1a6>
 8005a86:	4616      	mov	r6, r2
 8005a88:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a8c:	fb03 5711 	mls	r7, r3, r1, r5
 8005a90:	5dc7      	ldrb	r7, [r0, r7]
 8005a92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a96:	462f      	mov	r7, r5
 8005a98:	42bb      	cmp	r3, r7
 8005a9a:	460d      	mov	r5, r1
 8005a9c:	d9f4      	bls.n	8005a88 <_printf_i+0x110>
 8005a9e:	2b08      	cmp	r3, #8
 8005aa0:	d10b      	bne.n	8005aba <_printf_i+0x142>
 8005aa2:	6823      	ldr	r3, [r4, #0]
 8005aa4:	07df      	lsls	r7, r3, #31
 8005aa6:	d508      	bpl.n	8005aba <_printf_i+0x142>
 8005aa8:	6923      	ldr	r3, [r4, #16]
 8005aaa:	6861      	ldr	r1, [r4, #4]
 8005aac:	4299      	cmp	r1, r3
 8005aae:	bfde      	ittt	le
 8005ab0:	2330      	movle	r3, #48	@ 0x30
 8005ab2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005aba:	1b92      	subs	r2, r2, r6
 8005abc:	6122      	str	r2, [r4, #16]
 8005abe:	464b      	mov	r3, r9
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f8cd a000 	str.w	sl, [sp]
 8005ac8:	aa03      	add	r2, sp, #12
 8005aca:	f7ff fee3 	bl	8005894 <_printf_common>
 8005ace:	3001      	adds	r0, #1
 8005ad0:	d14a      	bne.n	8005b68 <_printf_i+0x1f0>
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	b004      	add	sp, #16
 8005ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005adc:	6823      	ldr	r3, [r4, #0]
 8005ade:	f043 0320 	orr.w	r3, r3, #32
 8005ae2:	6023      	str	r3, [r4, #0]
 8005ae4:	2778      	movs	r7, #120	@ 0x78
 8005ae6:	4832      	ldr	r0, [pc, #200]	@ (8005bb0 <_printf_i+0x238>)
 8005ae8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	6831      	ldr	r1, [r6, #0]
 8005af0:	061f      	lsls	r7, r3, #24
 8005af2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005af6:	d402      	bmi.n	8005afe <_printf_i+0x186>
 8005af8:	065f      	lsls	r7, r3, #25
 8005afa:	bf48      	it	mi
 8005afc:	b2ad      	uxthmi	r5, r5
 8005afe:	6031      	str	r1, [r6, #0]
 8005b00:	07d9      	lsls	r1, r3, #31
 8005b02:	bf44      	itt	mi
 8005b04:	f043 0320 	orrmi.w	r3, r3, #32
 8005b08:	6023      	strmi	r3, [r4, #0]
 8005b0a:	b11d      	cbz	r5, 8005b14 <_printf_i+0x19c>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	e7ad      	b.n	8005a6c <_printf_i+0xf4>
 8005b10:	4826      	ldr	r0, [pc, #152]	@ (8005bac <_printf_i+0x234>)
 8005b12:	e7e9      	b.n	8005ae8 <_printf_i+0x170>
 8005b14:	6823      	ldr	r3, [r4, #0]
 8005b16:	f023 0320 	bic.w	r3, r3, #32
 8005b1a:	6023      	str	r3, [r4, #0]
 8005b1c:	e7f6      	b.n	8005b0c <_printf_i+0x194>
 8005b1e:	4616      	mov	r6, r2
 8005b20:	e7bd      	b.n	8005a9e <_printf_i+0x126>
 8005b22:	6833      	ldr	r3, [r6, #0]
 8005b24:	6825      	ldr	r5, [r4, #0]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6961      	ldr	r1, [r4, #20]
 8005b2a:	6030      	str	r0, [r6, #0]
 8005b2c:	062e      	lsls	r6, r5, #24
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	d501      	bpl.n	8005b36 <_printf_i+0x1be>
 8005b32:	6019      	str	r1, [r3, #0]
 8005b34:	e002      	b.n	8005b3c <_printf_i+0x1c4>
 8005b36:	0668      	lsls	r0, r5, #25
 8005b38:	d5fb      	bpl.n	8005b32 <_printf_i+0x1ba>
 8005b3a:	8019      	strh	r1, [r3, #0]
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4616      	mov	r6, r2
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	e7bc      	b.n	8005abe <_printf_i+0x146>
 8005b44:	6833      	ldr	r3, [r6, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	6032      	str	r2, [r6, #0]
 8005b4c:	681e      	ldr	r6, [r3, #0]
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	4630      	mov	r0, r6
 8005b52:	f000 f859 	bl	8005c08 <memchr>
 8005b56:	b108      	cbz	r0, 8005b5c <_printf_i+0x1e4>
 8005b58:	1b80      	subs	r0, r0, r6
 8005b5a:	6060      	str	r0, [r4, #4]
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	6123      	str	r3, [r4, #16]
 8005b60:	2300      	movs	r3, #0
 8005b62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b66:	e7aa      	b.n	8005abe <_printf_i+0x146>
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	6923      	ldr	r3, [r4, #16]
 8005b70:	47d0      	blx	sl
 8005b72:	3001      	adds	r0, #1
 8005b74:	d0ad      	beq.n	8005ad2 <_printf_i+0x15a>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	079b      	lsls	r3, r3, #30
 8005b7a:	d413      	bmi.n	8005ba4 <_printf_i+0x22c>
 8005b7c:	68e0      	ldr	r0, [r4, #12]
 8005b7e:	9b03      	ldr	r3, [sp, #12]
 8005b80:	4298      	cmp	r0, r3
 8005b82:	bfb8      	it	lt
 8005b84:	4618      	movlt	r0, r3
 8005b86:	e7a6      	b.n	8005ad6 <_printf_i+0x15e>
 8005b88:	2301      	movs	r3, #1
 8005b8a:	4632      	mov	r2, r6
 8005b8c:	4649      	mov	r1, r9
 8005b8e:	4640      	mov	r0, r8
 8005b90:	47d0      	blx	sl
 8005b92:	3001      	adds	r0, #1
 8005b94:	d09d      	beq.n	8005ad2 <_printf_i+0x15a>
 8005b96:	3501      	adds	r5, #1
 8005b98:	68e3      	ldr	r3, [r4, #12]
 8005b9a:	9903      	ldr	r1, [sp, #12]
 8005b9c:	1a5b      	subs	r3, r3, r1
 8005b9e:	42ab      	cmp	r3, r5
 8005ba0:	dcf2      	bgt.n	8005b88 <_printf_i+0x210>
 8005ba2:	e7eb      	b.n	8005b7c <_printf_i+0x204>
 8005ba4:	2500      	movs	r5, #0
 8005ba6:	f104 0619 	add.w	r6, r4, #25
 8005baa:	e7f5      	b.n	8005b98 <_printf_i+0x220>
 8005bac:	08007e08 	.word	0x08007e08
 8005bb0:	08007e19 	.word	0x08007e19

08005bb4 <memmove>:
 8005bb4:	4288      	cmp	r0, r1
 8005bb6:	b510      	push	{r4, lr}
 8005bb8:	eb01 0402 	add.w	r4, r1, r2
 8005bbc:	d902      	bls.n	8005bc4 <memmove+0x10>
 8005bbe:	4284      	cmp	r4, r0
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	d807      	bhi.n	8005bd4 <memmove+0x20>
 8005bc4:	1e43      	subs	r3, r0, #1
 8005bc6:	42a1      	cmp	r1, r4
 8005bc8:	d008      	beq.n	8005bdc <memmove+0x28>
 8005bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005bd2:	e7f8      	b.n	8005bc6 <memmove+0x12>
 8005bd4:	4601      	mov	r1, r0
 8005bd6:	4402      	add	r2, r0
 8005bd8:	428a      	cmp	r2, r1
 8005bda:	d100      	bne.n	8005bde <memmove+0x2a>
 8005bdc:	bd10      	pop	{r4, pc}
 8005bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005be6:	e7f7      	b.n	8005bd8 <memmove+0x24>

08005be8 <_sbrk_r>:
 8005be8:	b538      	push	{r3, r4, r5, lr}
 8005bea:	2300      	movs	r3, #0
 8005bec:	4d05      	ldr	r5, [pc, #20]	@ (8005c04 <_sbrk_r+0x1c>)
 8005bee:	4604      	mov	r4, r0
 8005bf0:	4608      	mov	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fb faba 	bl	800116c <_sbrk>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_sbrk_r+0x1a>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_sbrk_r+0x1a>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	20000718 	.word	0x20000718

08005c08 <memchr>:
 8005c08:	4603      	mov	r3, r0
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	b2c9      	uxtb	r1, r1
 8005c0e:	4402      	add	r2, r0
 8005c10:	4293      	cmp	r3, r2
 8005c12:	4618      	mov	r0, r3
 8005c14:	d101      	bne.n	8005c1a <memchr+0x12>
 8005c16:	2000      	movs	r0, #0
 8005c18:	e003      	b.n	8005c22 <memchr+0x1a>
 8005c1a:	7804      	ldrb	r4, [r0, #0]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	428c      	cmp	r4, r1
 8005c20:	d1f6      	bne.n	8005c10 <memchr+0x8>
 8005c22:	bd10      	pop	{r4, pc}

08005c24 <memcpy>:
 8005c24:	440a      	add	r2, r1
 8005c26:	4291      	cmp	r1, r2
 8005c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c2c:	d100      	bne.n	8005c30 <memcpy+0xc>
 8005c2e:	4770      	bx	lr
 8005c30:	b510      	push	{r4, lr}
 8005c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c36:	4291      	cmp	r1, r2
 8005c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c3c:	d1f9      	bne.n	8005c32 <memcpy+0xe>
 8005c3e:	bd10      	pop	{r4, pc}

08005c40 <_realloc_r>:
 8005c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	4607      	mov	r7, r0
 8005c46:	4614      	mov	r4, r2
 8005c48:	460d      	mov	r5, r1
 8005c4a:	b921      	cbnz	r1, 8005c56 <_realloc_r+0x16>
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c52:	f7ff bc3b 	b.w	80054cc <_malloc_r>
 8005c56:	b92a      	cbnz	r2, 8005c64 <_realloc_r+0x24>
 8005c58:	f7ff fbce 	bl	80053f8 <_free_r>
 8005c5c:	4625      	mov	r5, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c64:	f000 f81a 	bl	8005c9c <_malloc_usable_size_r>
 8005c68:	4284      	cmp	r4, r0
 8005c6a:	4606      	mov	r6, r0
 8005c6c:	d802      	bhi.n	8005c74 <_realloc_r+0x34>
 8005c6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005c72:	d8f4      	bhi.n	8005c5e <_realloc_r+0x1e>
 8005c74:	4621      	mov	r1, r4
 8005c76:	4638      	mov	r0, r7
 8005c78:	f7ff fc28 	bl	80054cc <_malloc_r>
 8005c7c:	4680      	mov	r8, r0
 8005c7e:	b908      	cbnz	r0, 8005c84 <_realloc_r+0x44>
 8005c80:	4645      	mov	r5, r8
 8005c82:	e7ec      	b.n	8005c5e <_realloc_r+0x1e>
 8005c84:	42b4      	cmp	r4, r6
 8005c86:	4622      	mov	r2, r4
 8005c88:	4629      	mov	r1, r5
 8005c8a:	bf28      	it	cs
 8005c8c:	4632      	movcs	r2, r6
 8005c8e:	f7ff ffc9 	bl	8005c24 <memcpy>
 8005c92:	4629      	mov	r1, r5
 8005c94:	4638      	mov	r0, r7
 8005c96:	f7ff fbaf 	bl	80053f8 <_free_r>
 8005c9a:	e7f1      	b.n	8005c80 <_realloc_r+0x40>

08005c9c <_malloc_usable_size_r>:
 8005c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ca0:	1f18      	subs	r0, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	bfbc      	itt	lt
 8005ca6:	580b      	ldrlt	r3, [r1, r0]
 8005ca8:	18c0      	addlt	r0, r0, r3
 8005caa:	4770      	bx	lr

08005cac <_init>:
 8005cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cae:	bf00      	nop
 8005cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cb2:	bc08      	pop	{r3}
 8005cb4:	469e      	mov	lr, r3
 8005cb6:	4770      	bx	lr

08005cb8 <_fini>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	bf00      	nop
 8005cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cbe:	bc08      	pop	{r3}
 8005cc0:	469e      	mov	lr, r3
 8005cc2:	4770      	bx	lr
