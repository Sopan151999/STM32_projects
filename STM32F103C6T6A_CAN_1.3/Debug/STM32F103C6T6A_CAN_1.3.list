
STM32F103C6T6A_CAN_1.3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bac  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000df4  08004cbc  08004cbc  00005cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ab0  08005ab0  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08005ab0  08005ab0  00007064  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08005ab0  08005ab0  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ab0  08005ab0  00006ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ab4  08005ab4  00006ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005ab8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000664  20000068  08005b1c  00007068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006cc  08005b1c  000076cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b60  00000000  00000000  0000708d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ef0  00000000  00000000  00010bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00012ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000755  00000000  00000000  00013490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a0d  00000000  00000000  00013be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d315  00000000  00000000  0002b5f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082c2e  00000000  00000000  00038907  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb535  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cdc  00000000  00000000  000bb578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000be254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ca4 	.word	0x08004ca4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004ca4 	.word	0x08004ca4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	@ 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <ApplicationControl>:
 */

#include"globel_data.h"
char buffer[16];
int ApplicationControl(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0

	STM_Msg_0x600.PWM_data =0;
 8000b4e:	4b48      	ldr	r3, [pc, #288]	@ (8000c70 <ApplicationControl+0x128>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	805a      	strh	r2, [r3, #2]
	STM_Msg_0x600.plm_data =0;
 8000b54:	4b46      	ldr	r3, [pc, #280]	@ (8000c70 <ApplicationControl+0x128>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	809a      	strh	r2, [r3, #4]
	STM_Msg_0x201.Anurag_age =21;
 8000b5a:	4b46      	ldr	r3, [pc, #280]	@ (8000c74 <ApplicationControl+0x12c>)
 8000b5c:	2215      	movs	r2, #21
 8000b5e:	701a      	strb	r2, [r3, #0]
	STM_Msg_0x201.Anurag_marks =99;
 8000b60:	4b44      	ldr	r3, [pc, #272]	@ (8000c74 <ApplicationControl+0x12c>)
 8000b62:	2263      	movs	r2, #99	@ 0x63
 8000b64:	705a      	strb	r2, [r3, #1]
	STM_Msg_0x201.AnuragPhNo5Dig = 73783 - 9000;
 8000b66:	4b43      	ldr	r3, [pc, #268]	@ (8000c74 <ApplicationControl+0x12c>)
 8000b68:	f64f 520f 	movw	r2, #64783	@ 0xfd0f
 8000b6c:	805a      	strh	r2, [r3, #2]
	STM_Msg_0x201.AnuragPhNo05Dig= 95844 - 90000;
 8000b6e:	4b41      	ldr	r3, [pc, #260]	@ (8000c74 <ApplicationControl+0x12c>)
 8000b70:	f241 62d4 	movw	r2, #5844	@ 0x16d4
 8000b74:	809a      	strh	r2, [r3, #4]
	STM_Msg_0x201.AnuragID = 45625;
 8000b76:	4b3f      	ldr	r3, [pc, #252]	@ (8000c74 <ApplicationControl+0x12c>)
 8000b78:	f24b 2239 	movw	r2, #45625	@ 0xb239
 8000b7c:	80da      	strh	r2, [r3, #6]
	STM_Msg_0x102.myPhoneNo = 7378395844;
 8000b7e:	493e      	ldr	r1, [pc, #248]	@ (8000c78 <ApplicationControl+0x130>)
 8000b80:	a339      	add	r3, pc, #228	@ (adr r3, 8000c68 <ApplicationControl+0x120>)
 8000b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b86:	e9c1 2300 	strd	r2, r3, [r1]



    CAN_Init();  // Start CAN + filters + IRQs
 8000b8a:	f000 f887 	bl	8000c9c <CAN_Init>
    SSD1306_Init();
 8000b8e:	f000 fb0f 	bl	80011b0 <SSD1306_Init>
    uint8_t msg[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 8000b92:	4a3a      	ldr	r2, [pc, #232]	@ (8000c7c <ApplicationControl+0x134>)
 8000b94:	463b      	mov	r3, r7
 8000b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9a:	e883 0003 	stmia.w	r3, {r0, r1}
    CAN_Send(0x123, msg, 8);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f240 1023 	movw	r0, #291	@ 0x123
 8000ba8:	f000 f8aa 	bl	8000d00 <CAN_Send>

    SSD1306_GotoXY (0,0);
 8000bac:	2100      	movs	r1, #0
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 fc66 	bl	8001480 <SSD1306_GotoXY>
    SSD1306_Puts ("SOPAN", &Font_11x18, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4932      	ldr	r1, [pc, #200]	@ (8000c80 <ApplicationControl+0x138>)
 8000bb8:	4832      	ldr	r0, [pc, #200]	@ (8000c84 <ApplicationControl+0x13c>)
 8000bba:	f000 fcf5 	bl	80015a8 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 8000bbe:	211e      	movs	r1, #30
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f000 fc5d 	bl	8001480 <SSD1306_GotoXY>
    SSD1306_Puts ("DHAYE", &Font_11x18, 1);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	492d      	ldr	r1, [pc, #180]	@ (8000c80 <ApplicationControl+0x138>)
 8000bca:	482f      	ldr	r0, [pc, #188]	@ (8000c88 <ApplicationControl+0x140>)
 8000bcc:	f000 fcec 	bl	80015a8 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000bd0:	f000 fbb2 	bl	8001338 <SSD1306_UpdateScreen>
    HAL_Delay (1000);
 8000bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd8:	f001 f8ce 	bl	8001d78 <HAL_Delay>
    SSD1306_Clear();
 8000bdc:	f000 fd09 	bl	80015f2 <SSD1306_Clear>

    while (1)
    {
    	STM_Msg_0x600.PWM_data ++;
 8000be0:	4b23      	ldr	r3, [pc, #140]	@ (8000c70 <ApplicationControl+0x128>)
 8000be2:	885b      	ldrh	r3, [r3, #2]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	4b21      	ldr	r3, [pc, #132]	@ (8000c70 <ApplicationControl+0x128>)
 8000bea:	805a      	strh	r2, [r3, #2]
    	STM_Msg_0x600.plm_data ++;
 8000bec:	4b20      	ldr	r3, [pc, #128]	@ (8000c70 <ApplicationControl+0x128>)
 8000bee:	889b      	ldrh	r3, [r3, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c70 <ApplicationControl+0x128>)
 8000bf6:	809a      	strh	r2, [r3, #4]
    	Handle_control_IO();
 8000bf8:	f000 fa9c 	bl	8001134 <Handle_control_IO>

        SSD1306_GotoXY (0,0);
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2000      	movs	r0, #0
 8000c00:	f000 fc3e 	bl	8001480 <SSD1306_GotoXY>
    	sprintf(buffer, "Val1: %-3d", STM_Msg_0x301.gfx_Val);
 8000c04:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <ApplicationControl+0x144>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4921      	ldr	r1, [pc, #132]	@ (8000c90 <ApplicationControl+0x148>)
 8000c0c:	4821      	ldr	r0, [pc, #132]	@ (8000c94 <ApplicationControl+0x14c>)
 8000c0e:	f003 fb99 	bl	8004344 <siprintf>
    	SSD1306_Puts (buffer, &Font_11x18, 1);
 8000c12:	2201      	movs	r2, #1
 8000c14:	491a      	ldr	r1, [pc, #104]	@ (8000c80 <ApplicationControl+0x138>)
 8000c16:	481f      	ldr	r0, [pc, #124]	@ (8000c94 <ApplicationControl+0x14c>)
 8000c18:	f000 fcc6 	bl	80015a8 <SSD1306_Puts>
    	memset(buffer, 0, sizeof(buffer));
 8000c1c:	2210      	movs	r2, #16
 8000c1e:	2100      	movs	r1, #0
 8000c20:	481c      	ldr	r0, [pc, #112]	@ (8000c94 <ApplicationControl+0x14c>)
 8000c22:	f003 fbb1 	bl	8004388 <memset>
    	sprintf(buffer, "Val1:%-3d", STM_Msg_0x301.gfx_val2);
 8000c26:	4b19      	ldr	r3, [pc, #100]	@ (8000c8c <ApplicationControl+0x144>)
 8000c28:	785b      	ldrb	r3, [r3, #1]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	491a      	ldr	r1, [pc, #104]	@ (8000c98 <ApplicationControl+0x150>)
 8000c2e:	4819      	ldr	r0, [pc, #100]	@ (8000c94 <ApplicationControl+0x14c>)
 8000c30:	f003 fb88 	bl	8004344 <siprintf>
    	SSD1306_GotoXY (0, 30);
 8000c34:	211e      	movs	r1, #30
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 fc22 	bl	8001480 <SSD1306_GotoXY>
    	SSD1306_Puts (buffer, &Font_11x18, 1);
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4910      	ldr	r1, [pc, #64]	@ (8000c80 <ApplicationControl+0x138>)
 8000c40:	4814      	ldr	r0, [pc, #80]	@ (8000c94 <ApplicationControl+0x14c>)
 8000c42:	f000 fcb1 	bl	80015a8 <SSD1306_Puts>
    	SSD1306_UpdateScreen();
 8000c46:	f000 fb77 	bl	8001338 <SSD1306_UpdateScreen>
//    	SSD1306_Clear();

        CAN_Send(0x123, msg, 8);
 8000c4a:	463b      	mov	r3, r7
 8000c4c:	2208      	movs	r2, #8
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f240 1023 	movw	r0, #291	@ 0x123
 8000c54:	f000 f854 	bl	8000d00 <CAN_Send>
        Handle_CAN_TX();
 8000c58:	f000 f87a 	bl	8000d50 <Handle_CAN_TX>
        HAL_Delay(10);
 8000c5c:	200a      	movs	r0, #10
 8000c5e:	f001 f88b 	bl	8001d78 <HAL_Delay>
    {
 8000c62:	bf00      	nop
 8000c64:	e7bc      	b.n	8000be0 <ApplicationControl+0x98>
 8000c66:	bf00      	nop
 8000c68:	b7c962c4 	.word	0xb7c962c4
 8000c6c:	00000001 	.word	0x00000001
 8000c70:	20000094 	.word	0x20000094
 8000c74:	2000009c 	.word	0x2000009c
 8000c78:	200000a8 	.word	0x200000a8
 8000c7c:	08004ce4 	.word	0x08004ce4
 8000c80:	20000000 	.word	0x20000000
 8000c84:	08004cbc 	.word	0x08004cbc
 8000c88:	08004cc4 	.word	0x08004cc4
 8000c8c:	200000b0 	.word	0x200000b0
 8000c90:	08004ccc 	.word	0x08004ccc
 8000c94:	20000084 	.word	0x20000084
 8000c98:	08004cd8 	.word	0x08004cd8

08000c9c <CAN_Init>:



// === CAN Initialization ===
void CAN_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0

	CAN_ConfigFilter();
 8000ca0:	f000 f80c 	bl	8000cbc <CAN_ConfigFilter>
    HAL_CAN_Start(&hcan);
 8000ca4:	4804      	ldr	r0, [pc, #16]	@ (8000cb8 <CAN_Init+0x1c>)
 8000ca6:	f001 fa4f 	bl	8002148 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000caa:	2110      	movs	r1, #16
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <CAN_Init+0x1c>)
 8000cae:	f001 fc7f 	bl	80025b0 <HAL_CAN_ActivateNotification>


}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000500 	.word	0x20000500

08000cbc <CAN_ConfigFilter>:

// === CAN Filter Configuration ===
void CAN_ConfigFilter(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b08a      	sub	sp, #40	@ 0x28
 8000cc0:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef filter;

    filter.FilterActivation = CAN_FILTER_ENABLE;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]
    filter.FilterBank = 10;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	617b      	str	r3, [r7, #20]
    filter.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	613b      	str	r3, [r7, #16]
    filter.FilterIdHigh = 0x0000;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	603b      	str	r3, [r7, #0]
    filter.FilterIdLow = 0x0000;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
    filter.FilterMaskIdHigh = 0x0000;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
    filter.FilterMaskIdLow = 0x0000;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
    filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61bb      	str	r3, [r7, #24]
    filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	61fb      	str	r3, [r7, #28]
    filter.SlaveStartFilterBank = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &filter);
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4803      	ldr	r0, [pc, #12]	@ (8000cfc <CAN_ConfigFilter+0x40>)
 8000cf0:	f001 f961 	bl	8001fb6 <HAL_CAN_ConfigFilter>
}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	@ 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000500 	.word	0x20000500

08000d00 <CAN_Send>:

// === CAN Send Function ===
HAL_StatusTypeDef CAN_Send(uint16_t StdID, uint8_t* data, uint8_t len)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	6039      	str	r1, [r7, #0]
 8000d0a:	80fb      	strh	r3, [r7, #6]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	717b      	strb	r3, [r7, #5]
    TxHeader.StdId = StdID;
 8000d10:	88fb      	ldrh	r3, [r7, #6]
 8000d12:	4a0b      	ldr	r2, [pc, #44]	@ (8000d40 <CAN_Send+0x40>)
 8000d14:	6013      	str	r3, [r2, #0]
    TxHeader.IDE = CAN_ID_STD;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <CAN_Send+0x40>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	@ (8000d40 <CAN_Send+0x40>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
    TxHeader.DLC = len;
 8000d22:	797b      	ldrb	r3, [r7, #5]
 8000d24:	4a06      	ldr	r2, [pc, #24]	@ (8000d40 <CAN_Send+0x40>)
 8000d26:	6113      	str	r3, [r2, #16]

    return HAL_CAN_AddTxMessage(&hcan, &TxHeader, data, &TxMailbox);
 8000d28:	4b06      	ldr	r3, [pc, #24]	@ (8000d44 <CAN_Send+0x44>)
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	4904      	ldr	r1, [pc, #16]	@ (8000d40 <CAN_Send+0x40>)
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <CAN_Send+0x48>)
 8000d30:	f001 fa4e 	bl	80021d0 <HAL_CAN_AddTxMessage>
 8000d34:	4603      	mov	r3, r0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000b4 	.word	0x200000b4
 8000d44:	200000f0 	.word	0x200000f0
 8000d48:	20000500 	.word	0x20000500
 8000d4c:	00000000 	.word	0x00000000

08000d50 <Handle_CAN_TX>:
//        HAL_Delay(100);
//
//	}
//}
void Handle_CAN_TX(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef lclTxHeader;

	uint8_t lcldata8t=0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint16_t lcldata16;
//	uint32_t lcldata32;
	uint64_t lcldata64;

    uint8_t msg[8] = {0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88};
 8000d5c:	4a98      	ldr	r2, [pc, #608]	@ (8000fc0 <Handle_CAN_TX+0x270>)
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d64:	e883 0003 	stmia.w	r3, {r0, r1}

    static uint8_t lclCnt = 0;
	lclTxHeader.IDE = CAN_ID_STD;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
	lclTxHeader.RTR = CAN_RTR_DATA;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    lclTxHeader.TransmitGlobalTime = DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	f887 3020 	strb.w	r3, [r7, #32]
    lclTxHeader.DLC = 8;  // default 8, can change per message
 8000d76:	2308      	movs	r3, #8
 8000d78:	61fb      	str	r3, [r7, #28]
    lclCnt++;
 8000d7a:	4b92      	ldr	r3, [pc, #584]	@ (8000fc4 <Handle_CAN_TX+0x274>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b90      	ldr	r3, [pc, #576]	@ (8000fc4 <Handle_CAN_TX+0x274>)
 8000d84:	701a      	strb	r2, [r3, #0]

		    switch (lclCnt) {
 8000d86:	4b8f      	ldr	r3, [pc, #572]	@ (8000fc4 <Handle_CAN_TX+0x274>)
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	2b03      	cmp	r3, #3
 8000d8e:	f200 8184 	bhi.w	800109a <Handle_CAN_TX+0x34a>
 8000d92:	a201      	add	r2, pc, #4	@ (adr r2, 8000d98 <Handle_CAN_TX+0x48>)
 8000d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d98:	08000da9 	.word	0x08000da9
 8000d9c:	08000f43 	.word	0x08000f43
 8000da0:	08000fd9 	.word	0x08000fd9
 8000da4:	080010a3 	.word	0x080010a3
		        case 1:
		        	lclTxHeader.StdId = STM_ID_0x600;
 8000da8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dac:	60fb      	str	r3, [r7, #12]
		        	lclTxHeader.DLC = 6;
 8000dae:	2306      	movs	r3, #6
 8000db0:	61fb      	str	r3, [r7, #28]
		            // Fill from struct STM_CAN_0x600
		        	lcldata8t = ((STM_Msg_0x600.PA5_led & 0x01)<<0x00)|lcldata8t;
 8000db2:	4b85      	ldr	r3, [pc, #532]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	b25b      	sxtb	r3, r3
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	b25a      	sxtb	r2, r3
 8000dc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.PA6_led & 0x01)<<0x01)|lcldata8t;
 8000dd0:	4b7d      	ldr	r3, [pc, #500]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	b25b      	sxtb	r3, r3
 8000de0:	f003 0302 	and.w	r3, r3, #2
 8000de4:	b25a      	sxtb	r2, r3
 8000de6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b25b      	sxtb	r3, r3
 8000dee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.data1   & 0x01)<<0x02)|lcldata8t;
 8000df2:	4b75      	ldr	r3, [pc, #468]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	b25a      	sxtb	r2, r3
 8000e08:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.data2   & 0x01)<<0x03)|lcldata8t;
 8000e14:	4b6c      	ldr	r3, [pc, #432]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	b25b      	sxtb	r3, r3
 8000e24:	f003 0308 	and.w	r3, r3, #8
 8000e28:	b25a      	sxtb	r2, r3
 8000e2a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.data3   & 0x01)<<0x04)|lcldata8t;
 8000e36:	4b64      	ldr	r3, [pc, #400]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	b25b      	sxtb	r3, r3
 8000e42:	011b      	lsls	r3, r3, #4
 8000e44:	b25b      	sxtb	r3, r3
 8000e46:	f003 0310 	and.w	r3, r3, #16
 8000e4a:	b25a      	sxtb	r2, r3
 8000e4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.data4   & 0x01)<<0x05)|lcldata8t;
 8000e58:	4b5b      	ldr	r3, [pc, #364]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000e60:	b2db      	uxtb	r3, r3
 8000e62:	b25b      	sxtb	r3, r3
 8000e64:	015b      	lsls	r3, r3, #5
 8000e66:	b25b      	sxtb	r3, r3
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	b25a      	sxtb	r2, r3
 8000e6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b25b      	sxtb	r3, r3
 8000e76:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.data5   & 0x01)<<0x06)|lcldata8t;
 8000e7a:	4b53      	ldr	r3, [pc, #332]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	019b      	lsls	r3, r3, #6
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e8e:	b25a      	sxtb	r2, r3
 8000e90:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000e94:	4313      	orrs	r3, r2
 8000e96:	b25b      	sxtb	r3, r3
 8000e98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	lcldata8t = ((STM_Msg_0x600.data6   & 0x01)<<0x07)|lcldata8t;
 8000e9c:	4b4a      	ldr	r3, [pc, #296]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	01db      	lsls	r3, r3, #7
 8000eaa:	b25a      	sxtb	r2, r3
 8000eac:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		        	msg[0]    = lcldata8t;
 8000eb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ebc:	713b      	strb	r3, [r7, #4]
		        	lcldata8t = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		        	lcldata8t = (float) (STM_Msg_0x600.ADC_data)/0.01;
 8000ec4:	4b40      	ldr	r3, [pc, #256]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000ec6:	785b      	ldrb	r3, [r3, #1]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f7ff fde5 	bl	8000a98 <__aeabi_ui2f>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff faa1 	bl	8000418 <__aeabi_f2d>
 8000ed6:	a338      	add	r3, pc, #224	@ (adr r3, 8000fb8 <Handle_CAN_TX+0x268>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff fc1e 	bl	800071c <__aeabi_ddiv>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4610      	mov	r0, r2
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	f7ff fd00 	bl	80008ec <__aeabi_d2uiz>
 8000eec:	4603      	mov	r3, r0
 8000eee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
					msg[1]    = lcldata8t;
 8000ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8000ef6:	717b      	strb	r3, [r7, #5]
		        	lcldata8t = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

		        	lcldata16 = STM_Msg_0x600.PWM_data;
 8000efe:	4b32      	ldr	r3, [pc, #200]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	84fb      	strh	r3, [r7, #38]	@ 0x26
		        	msg[2]    = lcldata16;
 8000f04:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	71bb      	strb	r3, [r7, #6]
		        	msg[3]    = (uint16_t)lcldata16>>8;
 8000f0a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	71fb      	strb	r3, [r7, #7]
		            lcldata16 = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	84fb      	strh	r3, [r7, #38]	@ 0x26

		        	lcldata16 = STM_Msg_0x600.plm_data;
 8000f18:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc8 <Handle_CAN_TX+0x278>)
 8000f1a:	889b      	ldrh	r3, [r3, #4]
 8000f1c:	84fb      	strh	r3, [r7, #38]	@ 0x26
		        	msg[4]	  = lcldata16;
 8000f1e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	723b      	strb	r3, [r7, #8]
		        	msg[5]    = (uint16_t)lcldata16>>8;
 8000f24:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f26:	0a1b      	lsrs	r3, r3, #8
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	727b      	strb	r3, [r7, #9]
		        	lcldata16 = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	84fb      	strh	r3, [r7, #38]	@ 0x26
		        	HAL_CAN_AddTxMessage(&hcan, &lclTxHeader, msg, &TxMailbox);
 8000f32:	1d3a      	adds	r2, r7, #4
 8000f34:	f107 010c 	add.w	r1, r7, #12
 8000f38:	4b24      	ldr	r3, [pc, #144]	@ (8000fcc <Handle_CAN_TX+0x27c>)
 8000f3a:	4825      	ldr	r0, [pc, #148]	@ (8000fd0 <Handle_CAN_TX+0x280>)
 8000f3c:	f001 f948 	bl	80021d0 <HAL_CAN_AddTxMessage>
		        	//        HAL_Delay(100);
		        break;
 8000f40:	e0b0      	b.n	80010a4 <Handle_CAN_TX+0x354>

				case 2:
					lclTxHeader.DLC = 8;
 8000f42:	2308      	movs	r3, #8
 8000f44:	61fb      	str	r3, [r7, #28]
					lclTxHeader.StdId=STM_ID_0x201;
 8000f46:	f240 2301 	movw	r3, #513	@ 0x201
 8000f4a:	60fb      	str	r3, [r7, #12]

					msg[0] = STM_Msg_0x201.Anurag_age;
 8000f4c:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <Handle_CAN_TX+0x284>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	713b      	strb	r3, [r7, #4]
					msg[1] = STM_Msg_0x201.Anurag_marks;
 8000f52:	4b20      	ldr	r3, [pc, #128]	@ (8000fd4 <Handle_CAN_TX+0x284>)
 8000f54:	785b      	ldrb	r3, [r3, #1]
 8000f56:	717b      	strb	r3, [r7, #5]

					lcldata16 = STM_Msg_0x201.AnuragPhNo5Dig;
 8000f58:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <Handle_CAN_TX+0x284>)
 8000f5a:	885b      	ldrh	r3, [r3, #2]
 8000f5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
					msg[2]	  = lcldata16;
 8000f5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	71bb      	strb	r3, [r7, #6]
					msg[3]	  = (uint16_t)lcldata16>>8;
 8000f64:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	71fb      	strb	r3, [r7, #7]
					lcldata16 = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	84fb      	strh	r3, [r7, #38]	@ 0x26

					lcldata16 = STM_Msg_0x201.AnuragPhNo05Dig;
 8000f72:	4b18      	ldr	r3, [pc, #96]	@ (8000fd4 <Handle_CAN_TX+0x284>)
 8000f74:	889b      	ldrh	r3, [r3, #4]
 8000f76:	84fb      	strh	r3, [r7, #38]	@ 0x26
					msg[4]	  = lcldata16;
 8000f78:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	723b      	strb	r3, [r7, #8]
					msg[5]	  = (uint16_t)lcldata16>>8;
 8000f7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f80:	0a1b      	lsrs	r3, r3, #8
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	727b      	strb	r3, [r7, #9]
					lcldata16 = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	84fb      	strh	r3, [r7, #38]	@ 0x26

					lcldata16 = STM_Msg_0x201.AnuragID;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <Handle_CAN_TX+0x284>)
 8000f8e:	88db      	ldrh	r3, [r3, #6]
 8000f90:	84fb      	strh	r3, [r7, #38]	@ 0x26
					msg[6]	  = lcldata16;
 8000f92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	72bb      	strb	r3, [r7, #10]
					msg[7]	  = (uint16_t)lcldata16>>8;
 8000f98:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000f9a:	0a1b      	lsrs	r3, r3, #8
 8000f9c:	b29b      	uxth	r3, r3
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	72fb      	strb	r3, [r7, #11]
					lcldata16 = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	84fb      	strh	r3, [r7, #38]	@ 0x26

					HAL_CAN_AddTxMessage(&hcan, &lclTxHeader, msg, &TxMailbox);
 8000fa6:	1d3a      	adds	r2, r7, #4
 8000fa8:	f107 010c 	add.w	r1, r7, #12
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <Handle_CAN_TX+0x27c>)
 8000fae:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <Handle_CAN_TX+0x280>)
 8000fb0:	f001 f90e 	bl	80021d0 <HAL_CAN_AddTxMessage>
				break;
 8000fb4:	e076      	b.n	80010a4 <Handle_CAN_TX+0x354>
 8000fb6:	bf00      	nop
 8000fb8:	47ae147b 	.word	0x47ae147b
 8000fbc:	3f847ae1 	.word	0x3f847ae1
 8000fc0:	08004cec 	.word	0x08004cec
 8000fc4:	200000f5 	.word	0x200000f5
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	200000f0 	.word	0x200000f0
 8000fd0:	20000500 	.word	0x20000500
 8000fd4:	2000009c 	.word	0x2000009c

				case 3:
					lclTxHeader.DLC = 8;
 8000fd8:	2308      	movs	r3, #8
 8000fda:	61fb      	str	r3, [r7, #28]
					lclTxHeader.StdId=STM_ID_0x102;
 8000fdc:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8000fe0:	60fb      	str	r3, [r7, #12]

					lcldata64 = STM_Msg_0x102.myPhoneNo;
 8000fe2:	4b32      	ldr	r3, [pc, #200]	@ (80010ac <Handle_CAN_TX+0x35c>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
					msg[0]	  = lcldata64;
 8000fec:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000ff0:	713b      	strb	r3, [r7, #4]
					msg[1]	  = lcldata64>>8;
 8000ff2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	0a02      	lsrs	r2, r0, #8
 8001000:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001004:	0a0b      	lsrs	r3, r1, #8
 8001006:	b2d3      	uxtb	r3, r2
 8001008:	717b      	strb	r3, [r7, #5]
					msg[2]	  = lcldata64>>16;
 800100a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800100e:	f04f 0200 	mov.w	r2, #0
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	0c02      	lsrs	r2, r0, #16
 8001018:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800101c:	0c0b      	lsrs	r3, r1, #16
 800101e:	b2d3      	uxtb	r3, r2
 8001020:	71bb      	strb	r3, [r7, #6]
					msg[3]	  = lcldata64>>24;
 8001022:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	f04f 0300 	mov.w	r3, #0
 800102e:	0e02      	lsrs	r2, r0, #24
 8001030:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001034:	0e0b      	lsrs	r3, r1, #24
 8001036:	b2d3      	uxtb	r3, r2
 8001038:	71fb      	strb	r3, [r7, #7]
					msg[4]	  = lcldata64>>32;
 800103a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	000a      	movs	r2, r1
 8001048:	2300      	movs	r3, #0
 800104a:	b2d3      	uxtb	r3, r2
 800104c:	723b      	strb	r3, [r7, #8]
					msg[5]	  = lcldata64>>40;
 800104e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	f04f 0300 	mov.w	r3, #0
 800105a:	0a0a      	lsrs	r2, r1, #8
 800105c:	2300      	movs	r3, #0
 800105e:	b2d3      	uxtb	r3, r2
 8001060:	727b      	strb	r3, [r7, #9]
					msg[6]	  = lcldata64>>48;
 8001062:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	f04f 0300 	mov.w	r3, #0
 800106e:	0c0a      	lsrs	r2, r1, #16
 8001070:	2300      	movs	r3, #0
 8001072:	b2d3      	uxtb	r3, r2
 8001074:	72bb      	strb	r3, [r7, #10]
					msg[7]	  = lcldata64>>56;
 8001076:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	0e0a      	lsrs	r2, r1, #24
 8001084:	2300      	movs	r3, #0
 8001086:	b2d3      	uxtb	r3, r2
 8001088:	72fb      	strb	r3, [r7, #11]

					HAL_CAN_AddTxMessage(&hcan, &lclTxHeader, msg, &TxMailbox);
 800108a:	1d3a      	adds	r2, r7, #4
 800108c:	f107 010c 	add.w	r1, r7, #12
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <Handle_CAN_TX+0x360>)
 8001092:	4808      	ldr	r0, [pc, #32]	@ (80010b4 <Handle_CAN_TX+0x364>)
 8001094:	f001 f89c 	bl	80021d0 <HAL_CAN_AddTxMessage>
				break;
 8001098:	e004      	b.n	80010a4 <Handle_CAN_TX+0x354>
				case 4:

				break;

				default:
				lclCnt = 0;
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <Handle_CAN_TX+0x368>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
				break;
 80010a0:	e000      	b.n	80010a4 <Handle_CAN_TX+0x354>
				break;
 80010a2:	bf00      	nop
					}
 }
 80010a4:	bf00      	nop
 80010a6:	3738      	adds	r7, #56	@ 0x38
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200000a8 	.word	0x200000a8
 80010b0:	200000f0 	.word	0x200000f0
 80010b4:	20000500 	.word	0x20000500
 80010b8:	200000f5 	.word	0x200000f5

080010bc <HAL_CAN_RxFifo1MsgPendingCallback>:


// === CAN RX Callback ===
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80010c4:	4b17      	ldr	r3, [pc, #92]	@ (8001124 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80010c6:	4a18      	ldr	r2, [pc, #96]	@ (8001128 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80010c8:	2101      	movs	r1, #1
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 f94f 	bl	800236e <HAL_CAN_GetRxMessage>
    if(RxHeader.StdId == STM_ID_0x301)
 80010d0:	4b15      	ldr	r3, [pc, #84]	@ (8001128 <HAL_CAN_RxFifo1MsgPendingCallback+0x6c>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f240 3201 	movw	r2, #769	@ 0x301
 80010d8:	4293      	cmp	r3, r2
 80010da:	d11b      	bne.n	8001114 <HAL_CAN_RxFifo1MsgPendingCallback+0x58>
    {
    	STM_Msg_0x301.gfx_Val = RxData[0];
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80010de:	781a      	ldrb	r2, [r3, #0]
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80010e2:	701a      	strb	r2, [r3, #0]
    	STM_Msg_0x301.gfx_val2= RxData[1];
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80010e6:	785a      	ldrb	r2, [r3, #1]
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80010ea:	705a      	strb	r2, [r3, #1]
    	STM_Msg_0x301.ledDATA1= RxData[2]& 0x01;
 80010ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 80010ee:	789b      	ldrb	r3, [r3, #2]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	b2d9      	uxtb	r1, r3
 80010f6:	4a0d      	ldr	r2, [pc, #52]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 80010f8:	7893      	ldrb	r3, [r2, #2]
 80010fa:	f361 0300 	bfi	r3, r1, #0, #1
 80010fe:	7093      	strb	r3, [r2, #2]
    	STM_Msg_0x301.ledDATA2= RxData[3]& 0x01;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_CAN_RxFifo1MsgPendingCallback+0x68>)
 8001102:	78db      	ldrb	r3, [r3, #3]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	b2d9      	uxtb	r1, r3
 800110a:	4a08      	ldr	r2, [pc, #32]	@ (800112c <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 800110c:	7893      	ldrb	r3, [r2, #2]
 800110e:	f361 0341 	bfi	r3, r1, #1, #1
 8001112:	7093      	strb	r3, [r2, #2]
    }

    CAN_MessageReceived = 1;  // Flag set for main loop
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <HAL_CAN_RxFifo1MsgPendingCallback+0x74>)
 8001116:	2201      	movs	r2, #1
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000e8 	.word	0x200000e8
 8001128:	200000cc 	.word	0x200000cc
 800112c:	200000b0 	.word	0x200000b0
 8001130:	200000f4 	.word	0x200000f4

08001134 <Handle_control_IO>:


#include "globel_data.h"

extern volatile uint8_t CAN_MessageReceived;
void Handle_control_IO(void){
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

    if(CAN_MessageReceived) {
 8001138:	4b19      	ldr	r3, [pc, #100]	@ (80011a0 <Handle_control_IO+0x6c>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d02b      	beq.n	800119a <Handle_control_IO+0x66>
        	CAN_MessageReceived = 0;
 8001142:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <Handle_control_IO+0x6c>)
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]
            if(STM_Msg_0x301.ledDATA1 == 0x01){
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <Handle_control_IO+0x70>)
 800114a:	789b      	ldrb	r3, [r3, #2]
 800114c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d105      	bne.n	8001162 <Handle_control_IO+0x2e>
            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001156:	2201      	movs	r2, #1
 8001158:	2120      	movs	r1, #32
 800115a:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <Handle_control_IO+0x74>)
 800115c:	f001 fefa 	bl	8002f54 <HAL_GPIO_WritePin>
 8001160:	e004      	b.n	800116c <Handle_control_IO+0x38>
            }else{
            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2120      	movs	r1, #32
 8001166:	4810      	ldr	r0, [pc, #64]	@ (80011a8 <Handle_control_IO+0x74>)
 8001168:	f001 fef4 	bl	8002f54 <HAL_GPIO_WritePin>
            }

            if(STM_Msg_0x301.ledDATA2== 0x01){
 800116c:	4b0d      	ldr	r3, [pc, #52]	@ (80011a4 <Handle_control_IO+0x70>)
 800116e:	789b      	ldrb	r3, [r3, #2]
 8001170:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b01      	cmp	r3, #1
 8001178:	d105      	bne.n	8001186 <Handle_control_IO+0x52>
            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800117a:	2201      	movs	r2, #1
 800117c:	2140      	movs	r1, #64	@ 0x40
 800117e:	480a      	ldr	r0, [pc, #40]	@ (80011a8 <Handle_control_IO+0x74>)
 8001180:	f001 fee8 	bl	8002f54 <HAL_GPIO_WritePin>
 8001184:	e004      	b.n	8001190 <Handle_control_IO+0x5c>
            }else{
            	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2140      	movs	r1, #64	@ 0x40
 800118a:	4807      	ldr	r0, [pc, #28]	@ (80011a8 <Handle_control_IO+0x74>)
 800118c:	f001 fee2 	bl	8002f54 <HAL_GPIO_WritePin>
            }

            // Example: Echo received byte to LED or Serial
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001190:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001194:	4805      	ldr	r0, [pc, #20]	@ (80011ac <Handle_control_IO+0x78>)
 8001196:	f001 fef5 	bl	8002f84 <HAL_GPIO_TogglePin>
        }
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	200000f4 	.word	0x200000f4
 80011a4:	200000b0 	.word	0x200000b0
 80011a8:	40010800 	.word	0x40010800
 80011ac:	40011000 	.word	0x40011000

080011b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011b6:	f000 fa25 	bl	8001604 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011ba:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80011be:	2201      	movs	r2, #1
 80011c0:	2178      	movs	r1, #120	@ 0x78
 80011c2:	485b      	ldr	r0, [pc, #364]	@ (8001330 <SSD1306_Init+0x180>)
 80011c4:	f002 f93a 	bl	800343c <HAL_I2C_IsDeviceReady>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	e0a9      	b.n	8001326 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80011d2:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80011d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011d8:	e002      	b.n	80011e0 <SSD1306_Init+0x30>
		p--;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3b01      	subs	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1f9      	bne.n	80011da <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011e6:	22ae      	movs	r2, #174	@ 0xae
 80011e8:	2100      	movs	r1, #0
 80011ea:	2078      	movs	r0, #120	@ 0x78
 80011ec:	f000 fa84 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80011f0:	2220      	movs	r2, #32
 80011f2:	2100      	movs	r1, #0
 80011f4:	2078      	movs	r0, #120	@ 0x78
 80011f6:	f000 fa7f 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80011fa:	2210      	movs	r2, #16
 80011fc:	2100      	movs	r1, #0
 80011fe:	2078      	movs	r0, #120	@ 0x78
 8001200:	f000 fa7a 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001204:	22b0      	movs	r2, #176	@ 0xb0
 8001206:	2100      	movs	r1, #0
 8001208:	2078      	movs	r0, #120	@ 0x78
 800120a:	f000 fa75 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800120e:	22c8      	movs	r2, #200	@ 0xc8
 8001210:	2100      	movs	r1, #0
 8001212:	2078      	movs	r0, #120	@ 0x78
 8001214:	f000 fa70 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001218:	2200      	movs	r2, #0
 800121a:	2100      	movs	r1, #0
 800121c:	2078      	movs	r0, #120	@ 0x78
 800121e:	f000 fa6b 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001222:	2210      	movs	r2, #16
 8001224:	2100      	movs	r1, #0
 8001226:	2078      	movs	r0, #120	@ 0x78
 8001228:	f000 fa66 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800122c:	2240      	movs	r2, #64	@ 0x40
 800122e:	2100      	movs	r1, #0
 8001230:	2078      	movs	r0, #120	@ 0x78
 8001232:	f000 fa61 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001236:	2281      	movs	r2, #129	@ 0x81
 8001238:	2100      	movs	r1, #0
 800123a:	2078      	movs	r0, #120	@ 0x78
 800123c:	f000 fa5c 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001240:	22ff      	movs	r2, #255	@ 0xff
 8001242:	2100      	movs	r1, #0
 8001244:	2078      	movs	r0, #120	@ 0x78
 8001246:	f000 fa57 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800124a:	22a1      	movs	r2, #161	@ 0xa1
 800124c:	2100      	movs	r1, #0
 800124e:	2078      	movs	r0, #120	@ 0x78
 8001250:	f000 fa52 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001254:	22a6      	movs	r2, #166	@ 0xa6
 8001256:	2100      	movs	r1, #0
 8001258:	2078      	movs	r0, #120	@ 0x78
 800125a:	f000 fa4d 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800125e:	22a8      	movs	r2, #168	@ 0xa8
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	@ 0x78
 8001264:	f000 fa48 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001268:	223f      	movs	r2, #63	@ 0x3f
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	@ 0x78
 800126e:	f000 fa43 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001272:	22a4      	movs	r2, #164	@ 0xa4
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	@ 0x78
 8001278:	f000 fa3e 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800127c:	22d3      	movs	r2, #211	@ 0xd3
 800127e:	2100      	movs	r1, #0
 8001280:	2078      	movs	r0, #120	@ 0x78
 8001282:	f000 fa39 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2078      	movs	r0, #120	@ 0x78
 800128c:	f000 fa34 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001290:	22d5      	movs	r2, #213	@ 0xd5
 8001292:	2100      	movs	r1, #0
 8001294:	2078      	movs	r0, #120	@ 0x78
 8001296:	f000 fa2f 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800129a:	22f0      	movs	r2, #240	@ 0xf0
 800129c:	2100      	movs	r1, #0
 800129e:	2078      	movs	r0, #120	@ 0x78
 80012a0:	f000 fa2a 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012a4:	22d9      	movs	r2, #217	@ 0xd9
 80012a6:	2100      	movs	r1, #0
 80012a8:	2078      	movs	r0, #120	@ 0x78
 80012aa:	f000 fa25 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012ae:	2222      	movs	r2, #34	@ 0x22
 80012b0:	2100      	movs	r1, #0
 80012b2:	2078      	movs	r0, #120	@ 0x78
 80012b4:	f000 fa20 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012b8:	22da      	movs	r2, #218	@ 0xda
 80012ba:	2100      	movs	r1, #0
 80012bc:	2078      	movs	r0, #120	@ 0x78
 80012be:	f000 fa1b 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012c2:	2212      	movs	r2, #18
 80012c4:	2100      	movs	r1, #0
 80012c6:	2078      	movs	r0, #120	@ 0x78
 80012c8:	f000 fa16 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012cc:	22db      	movs	r2, #219	@ 0xdb
 80012ce:	2100      	movs	r1, #0
 80012d0:	2078      	movs	r0, #120	@ 0x78
 80012d2:	f000 fa11 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012d6:	2220      	movs	r2, #32
 80012d8:	2100      	movs	r1, #0
 80012da:	2078      	movs	r0, #120	@ 0x78
 80012dc:	f000 fa0c 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012e0:	228d      	movs	r2, #141	@ 0x8d
 80012e2:	2100      	movs	r1, #0
 80012e4:	2078      	movs	r0, #120	@ 0x78
 80012e6:	f000 fa07 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012ea:	2214      	movs	r2, #20
 80012ec:	2100      	movs	r1, #0
 80012ee:	2078      	movs	r0, #120	@ 0x78
 80012f0:	f000 fa02 	bl	80016f8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012f4:	22af      	movs	r2, #175	@ 0xaf
 80012f6:	2100      	movs	r1, #0
 80012f8:	2078      	movs	r0, #120	@ 0x78
 80012fa:	f000 f9fd 	bl	80016f8 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80012fe:	222e      	movs	r2, #46	@ 0x2e
 8001300:	2100      	movs	r1, #0
 8001302:	2078      	movs	r0, #120	@ 0x78
 8001304:	f000 f9f8 	bl	80016f8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001308:	2000      	movs	r0, #0
 800130a:	f000 f843 	bl	8001394 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800130e:	f000 f813 	bl	8001338 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001312:	4b08      	ldr	r3, [pc, #32]	@ (8001334 <SSD1306_Init+0x184>)
 8001314:	2200      	movs	r2, #0
 8001316:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001318:	4b06      	ldr	r3, [pc, #24]	@ (8001334 <SSD1306_Init+0x184>)
 800131a:	2200      	movs	r2, #0
 800131c:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 800131e:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <SSD1306_Init+0x184>)
 8001320:	2201      	movs	r2, #1
 8001322:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000528 	.word	0x20000528
 8001334:	200004f8 	.word	0x200004f8

08001338 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 800133e:	2300      	movs	r3, #0
 8001340:	71fb      	strb	r3, [r7, #7]
 8001342:	e01d      	b.n	8001380 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001344:	79fb      	ldrb	r3, [r7, #7]
 8001346:	3b50      	subs	r3, #80	@ 0x50
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461a      	mov	r2, r3
 800134c:	2100      	movs	r1, #0
 800134e:	2078      	movs	r0, #120	@ 0x78
 8001350:	f000 f9d2 	bl	80016f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2078      	movs	r0, #120	@ 0x78
 800135a:	f000 f9cd 	bl	80016f8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800135e:	2210      	movs	r2, #16
 8001360:	2100      	movs	r1, #0
 8001362:	2078      	movs	r0, #120	@ 0x78
 8001364:	f000 f9c8 	bl	80016f8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	01db      	lsls	r3, r3, #7
 800136c:	4a08      	ldr	r2, [pc, #32]	@ (8001390 <SSD1306_UpdateScreen+0x58>)
 800136e:	441a      	add	r2, r3
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	2140      	movs	r1, #64	@ 0x40
 8001374:	2078      	movs	r0, #120	@ 0x78
 8001376:	f000 f959 	bl	800162c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	3301      	adds	r3, #1
 800137e:	71fb      	strb	r3, [r7, #7]
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b07      	cmp	r3, #7
 8001384:	d9de      	bls.n	8001344 <SSD1306_UpdateScreen+0xc>
	}
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	200000f8 	.word	0x200000f8

08001394 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <SSD1306_Fill+0x14>
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <SSD1306_Fill+0x16>
 80013a8:	23ff      	movs	r3, #255	@ 0xff
 80013aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013ae:	4619      	mov	r1, r3
 80013b0:	4803      	ldr	r0, [pc, #12]	@ (80013c0 <SSD1306_Fill+0x2c>)
 80013b2:	f002 ffe9 	bl	8004388 <memset>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200000f8 	.word	0x200000f8

080013c4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
 80013ce:	460b      	mov	r3, r1
 80013d0:	80bb      	strh	r3, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	70fb      	strb	r3, [r7, #3]
	if (
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80013da:	d848      	bhi.n	800146e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013dc:	88bb      	ldrh	r3, [r7, #4]
 80013de:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e0:	d845      	bhi.n	800146e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013e2:	4b25      	ldr	r3, [pc, #148]	@ (8001478 <SSD1306_DrawPixel+0xb4>)
 80013e4:	791b      	ldrb	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d006      	beq.n	80013f8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	bf0c      	ite	eq
 80013f0:	2301      	moveq	r3, #1
 80013f2:	2300      	movne	r3, #0
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d11a      	bne.n	8001434 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80013fe:	88fa      	ldrh	r2, [r7, #6]
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	08db      	lsrs	r3, r3, #3
 8001404:	b298      	uxth	r0, r3
 8001406:	4603      	mov	r3, r0
 8001408:	01db      	lsls	r3, r3, #7
 800140a:	4413      	add	r3, r2
 800140c:	4a1b      	ldr	r2, [pc, #108]	@ (800147c <SSD1306_DrawPixel+0xb8>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	b25a      	sxtb	r2, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f303 	lsl.w	r3, r1, r3
 800141e:	b25b      	sxtb	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b259      	sxtb	r1, r3
 8001424:	88fa      	ldrh	r2, [r7, #6]
 8001426:	4603      	mov	r3, r0
 8001428:	01db      	lsls	r3, r3, #7
 800142a:	4413      	add	r3, r2
 800142c:	b2c9      	uxtb	r1, r1
 800142e:	4a13      	ldr	r2, [pc, #76]	@ (800147c <SSD1306_DrawPixel+0xb8>)
 8001430:	54d1      	strb	r1, [r2, r3]
 8001432:	e01d      	b.n	8001470 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001434:	88fa      	ldrh	r2, [r7, #6]
 8001436:	88bb      	ldrh	r3, [r7, #4]
 8001438:	08db      	lsrs	r3, r3, #3
 800143a:	b298      	uxth	r0, r3
 800143c:	4603      	mov	r3, r0
 800143e:	01db      	lsls	r3, r3, #7
 8001440:	4413      	add	r3, r2
 8001442:	4a0e      	ldr	r2, [pc, #56]	@ (800147c <SSD1306_DrawPixel+0xb8>)
 8001444:	5cd3      	ldrb	r3, [r2, r3]
 8001446:	b25a      	sxtb	r2, r3
 8001448:	88bb      	ldrh	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f303 	lsl.w	r3, r1, r3
 8001454:	b25b      	sxtb	r3, r3
 8001456:	43db      	mvns	r3, r3
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4013      	ands	r3, r2
 800145c:	b259      	sxtb	r1, r3
 800145e:	88fa      	ldrh	r2, [r7, #6]
 8001460:	4603      	mov	r3, r0
 8001462:	01db      	lsls	r3, r3, #7
 8001464:	4413      	add	r3, r2
 8001466:	b2c9      	uxtb	r1, r1
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <SSD1306_DrawPixel+0xb8>)
 800146a:	54d1      	strb	r1, [r2, r3]
 800146c:	e000      	b.n	8001470 <SSD1306_DrawPixel+0xac>
		return;
 800146e:	bf00      	nop
	}
}
 8001470:	370c      	adds	r7, #12
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	200004f8 	.word	0x200004f8
 800147c:	200000f8 	.word	0x200000f8

08001480 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	4613      	mov	r3, r2
 800148e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001490:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <SSD1306_GotoXY+0x28>)
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <SSD1306_GotoXY+0x28>)
 8001498:	88bb      	ldrh	r3, [r7, #4]
 800149a:	8053      	strh	r3, [r2, #2]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	200004f8 	.word	0x200004f8

080014ac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014bc:	4b39      	ldr	r3, [pc, #228]	@ (80015a4 <SSD1306_Putc+0xf8>)
 80014be:	881b      	ldrh	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
	if (
 80014c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80014ca:	dc07      	bgt.n	80014dc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <SSD1306_Putc+0xf8>)
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	461a      	mov	r2, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	785b      	ldrb	r3, [r3, #1]
 80014d6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80014da:	dd01      	ble.n	80014e0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	e05d      	b.n	800159c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014e0:	2300      	movs	r3, #0
 80014e2:	617b      	str	r3, [r7, #20]
 80014e4:	e04b      	b.n	800157e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	3b20      	subs	r3, #32
 80014ee:	6839      	ldr	r1, [r7, #0]
 80014f0:	7849      	ldrb	r1, [r1, #1]
 80014f2:	fb01 f303 	mul.w	r3, r1, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	440b      	add	r3, r1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	e030      	b.n	800156c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d010      	beq.n	800153c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800151a:	4b22      	ldr	r3, [pc, #136]	@ (80015a4 <SSD1306_Putc+0xf8>)
 800151c:	881a      	ldrh	r2, [r3, #0]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	b29b      	uxth	r3, r3
 8001522:	4413      	add	r3, r2
 8001524:	b298      	uxth	r0, r3
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <SSD1306_Putc+0xf8>)
 8001528:	885a      	ldrh	r2, [r3, #2]
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	b29b      	uxth	r3, r3
 800152e:	4413      	add	r3, r2
 8001530:	b29b      	uxth	r3, r3
 8001532:	79ba      	ldrb	r2, [r7, #6]
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff ff45 	bl	80013c4 <SSD1306_DrawPixel>
 800153a:	e014      	b.n	8001566 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <SSD1306_Putc+0xf8>)
 800153e:	881a      	ldrh	r2, [r3, #0]
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	b29b      	uxth	r3, r3
 8001544:	4413      	add	r3, r2
 8001546:	b298      	uxth	r0, r3
 8001548:	4b16      	ldr	r3, [pc, #88]	@ (80015a4 <SSD1306_Putc+0xf8>)
 800154a:	885a      	ldrh	r2, [r3, #2]
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	b29b      	uxth	r3, r3
 8001550:	4413      	add	r3, r2
 8001552:	b299      	uxth	r1, r3
 8001554:	79bb      	ldrb	r3, [r7, #6]
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf0c      	ite	eq
 800155a:	2301      	moveq	r3, #1
 800155c:	2300      	movne	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	461a      	mov	r2, r3
 8001562:	f7ff ff2f 	bl	80013c4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	3301      	adds	r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4293      	cmp	r3, r2
 8001576:	d3c8      	bcc.n	800150a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	3301      	adds	r3, #1
 800157c:	617b      	str	r3, [r7, #20]
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	785b      	ldrb	r3, [r3, #1]
 8001582:	461a      	mov	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4293      	cmp	r3, r2
 8001588:	d3ad      	bcc.n	80014e6 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800158a:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <SSD1306_Putc+0xf8>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	7812      	ldrb	r2, [r2, #0]
 8001592:	4413      	add	r3, r2
 8001594:	b29a      	uxth	r2, r3
 8001596:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <SSD1306_Putc+0xf8>)
 8001598:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800159a:	79fb      	ldrb	r3, [r7, #7]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	200004f8 	.word	0x200004f8

080015a8 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	60f8      	str	r0, [r7, #12]
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	4613      	mov	r3, r2
 80015b4:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015b6:	e012      	b.n	80015de <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	79fa      	ldrb	r2, [r7, #7]
 80015be:	68b9      	ldr	r1, [r7, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff73 	bl	80014ac <SSD1306_Putc>
 80015c6:	4603      	mov	r3, r0
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d002      	beq.n	80015d8 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	e008      	b.n	80015ea <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3301      	adds	r3, #1
 80015dc:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1e8      	bne.n	80015b8 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	781b      	ldrb	r3, [r3, #0]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fecc 	bl	8001394 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80015fc:	f7ff fe9c 	bl	8001338 <SSD1306_UpdateScreen>
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}

08001604 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <ssd1306_I2C_Init+0x24>)
 800160c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800160e:	e002      	b.n	8001616 <ssd1306_I2C_Init+0x12>
		p--;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f9      	bne.n	8001610 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800161c:	bf00      	nop
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	0003d090 	.word	0x0003d090

0800162c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b0c7      	sub	sp, #284	@ 0x11c
 8001630:	af02      	add	r7, sp, #8
 8001632:	4604      	mov	r4, r0
 8001634:	4608      	mov	r0, r1
 8001636:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 800163a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800163e:	600a      	str	r2, [r1, #0]
 8001640:	4619      	mov	r1, r3
 8001642:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001646:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800164a:	4622      	mov	r2, r4
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001652:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001656:	4602      	mov	r2, r0
 8001658:	701a      	strb	r2, [r3, #0]
 800165a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800165e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001662:	460a      	mov	r2, r1
 8001664:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001666:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800166a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800166e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001672:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001680:	e015      	b.n	80016ae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001682:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001686:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800168a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800168e:	6812      	ldr	r2, [r2, #0]
 8001690:	441a      	add	r2, r3
 8001692:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001696:	3301      	adds	r3, #1
 8001698:	7811      	ldrb	r1, [r2, #0]
 800169a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800169e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80016a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016a4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016a8:	3301      	adds	r3, #1
 80016aa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80016ae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80016b8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80016bc:	8812      	ldrh	r2, [r2, #0]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d8df      	bhi.n	8001682 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016c6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b299      	uxth	r1, r3
 80016ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80016d2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80016d6:	881b      	ldrh	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	b29b      	uxth	r3, r3
 80016dc:	f107 020c 	add.w	r2, r7, #12
 80016e0:	200a      	movs	r0, #10
 80016e2:	9000      	str	r0, [sp, #0]
 80016e4:	4803      	ldr	r0, [pc, #12]	@ (80016f4 <ssd1306_I2C_WriteMulti+0xc8>)
 80016e6:	f001 fdab 	bl	8003240 <HAL_I2C_Master_Transmit>
}
 80016ea:	bf00      	nop
 80016ec:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd90      	pop	{r4, r7, pc}
 80016f4:	20000528 	.word	0x20000528

080016f8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4603      	mov	r3, r0
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	460b      	mov	r3, r1
 8001704:	71bb      	strb	r3, [r7, #6]
 8001706:	4613      	mov	r3, r2
 8001708:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800170e:	797b      	ldrb	r3, [r7, #5]
 8001710:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	b299      	uxth	r1, r3
 8001716:	f107 020c 	add.w	r2, r7, #12
 800171a:	230a      	movs	r3, #10
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2302      	movs	r3, #2
 8001720:	4803      	ldr	r0, [pc, #12]	@ (8001730 <ssd1306_I2C_Write+0x38>)
 8001722:	f001 fd8d 	bl	8003240 <HAL_I2C_Master_Transmit>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000528 	.word	0x20000528

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001738:	f000 fabc 	bl	8001cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173c:	f000 f80a 	bl	8001754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001740:	f000 f8b2 	bl	80018a8 <MX_GPIO_Init>
  MX_CAN_Init();
 8001744:	f000 f84c 	bl	80017e0 <MX_CAN_Init>
  MX_I2C1_Init();
 8001748:	f000 f880 	bl	800184c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ApplicationControl();
 800174c:	f7ff f9fc 	bl	8000b48 <ApplicationControl>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <main+0x1c>

08001754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	@ 0x40
 8001758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175a:	f107 0318 	add.w	r3, r7, #24
 800175e:	2228      	movs	r2, #40	@ 0x28
 8001760:	2100      	movs	r1, #0
 8001762:	4618      	mov	r0, r3
 8001764:	f002 fe10 	bl	8004388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800177e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001784:	2301      	movs	r3, #1
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001788:	2302      	movs	r3, #2
 800178a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001792:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	4618      	mov	r0, r3
 800179e:	f002 f9d5 	bl	8003b4c <HAL_RCC_OscConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017a8:	f000 f8ea 	bl	8001980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ac:	230f      	movs	r3, #15
 80017ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b0:	2302      	movs	r3, #2
 80017b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017c2:	1d3b      	adds	r3, r7, #4
 80017c4:	2102      	movs	r1, #2
 80017c6:	4618      	mov	r0, r3
 80017c8:	f002 fc42 	bl	8004050 <HAL_RCC_ClockConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80017d2:	f000 f8d5 	bl	8001980 <Error_Handler>
  }
}
 80017d6:	bf00      	nop
 80017d8:	3740      	adds	r7, #64	@ 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80017e4:	4b17      	ldr	r3, [pc, #92]	@ (8001844 <MX_CAN_Init+0x64>)
 80017e6:	4a18      	ldr	r2, [pc, #96]	@ (8001848 <MX_CAN_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80017ea:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <MX_CAN_Init+0x64>)
 80017ec:	2212      	movs	r2, #18
 80017ee:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017f0:	4b14      	ldr	r3, [pc, #80]	@ (8001844 <MX_CAN_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017f6:	4b13      	ldr	r3, [pc, #76]	@ (8001844 <MX_CAN_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80017fc:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_CAN_Init+0x64>)
 80017fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001802:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_CAN_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_CAN_Init+0x64>)
 800180c:	2200      	movs	r2, #0
 800180e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_CAN_Init+0x64>)
 8001812:	2200      	movs	r2, #0
 8001814:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	@ (8001844 <MX_CAN_Init+0x64>)
 8001818:	2200      	movs	r2, #0
 800181a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800181c:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_CAN_Init+0x64>)
 800181e:	2200      	movs	r2, #0
 8001820:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001822:	4b08      	ldr	r3, [pc, #32]	@ (8001844 <MX_CAN_Init+0x64>)
 8001824:	2200      	movs	r2, #0
 8001826:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_CAN_Init+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	@ (8001844 <MX_CAN_Init+0x64>)
 8001830:	f000 fac6 	bl	8001dc0 <HAL_CAN_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800183a:	f000 f8a1 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000500 	.word	0x20000500
 8001848:	40006400 	.word	0x40006400

0800184c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001850:	4b12      	ldr	r3, [pc, #72]	@ (800189c <MX_I2C1_Init+0x50>)
 8001852:	4a13      	ldr	r2, [pc, #76]	@ (80018a0 <MX_I2C1_Init+0x54>)
 8001854:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_I2C1_Init+0x50>)
 8001858:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <MX_I2C1_Init+0x58>)
 800185a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800185c:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <MX_I2C1_Init+0x50>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_I2C1_Init+0x50>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_I2C1_Init+0x50>)
 800186a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800186e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001870:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <MX_I2C1_Init+0x50>)
 8001872:	2200      	movs	r2, #0
 8001874:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_I2C1_Init+0x50>)
 8001878:	2200      	movs	r2, #0
 800187a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <MX_I2C1_Init+0x50>)
 800187e:	2200      	movs	r2, #0
 8001880:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_I2C1_Init+0x50>)
 8001884:	2200      	movs	r2, #0
 8001886:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001888:	4804      	ldr	r0, [pc, #16]	@ (800189c <MX_I2C1_Init+0x50>)
 800188a:	f001 fb95 	bl	8002fb8 <HAL_I2C_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001894:	f000 f874 	bl	8001980 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000528 	.word	0x20000528
 80018a0:	40005400 	.word	0x40005400
 80018a4:	00061a80 	.word	0x00061a80

080018a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b088      	sub	sp, #32
 80018ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ae:	f107 0310 	add.w	r3, r7, #16
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	609a      	str	r2, [r3, #8]
 80018ba:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	4a2c      	ldr	r2, [pc, #176]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6193      	str	r3, [r2, #24]
 80018c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d4:	4b27      	ldr	r3, [pc, #156]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	4a26      	ldr	r2, [pc, #152]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018da:	f043 0320 	orr.w	r3, r3, #32
 80018de:	6193      	str	r3, [r2, #24]
 80018e0:	4b24      	ldr	r3, [pc, #144]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ec:	4b21      	ldr	r3, [pc, #132]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a20      	ldr	r2, [pc, #128]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018f2:	f043 0304 	orr.w	r3, r3, #4
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <MX_GPIO_Init+0xcc>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	607b      	str	r3, [r7, #4]
 8001902:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001904:	4b1b      	ldr	r3, [pc, #108]	@ (8001974 <MX_GPIO_Init+0xcc>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a1a      	ldr	r2, [pc, #104]	@ (8001974 <MX_GPIO_Init+0xcc>)
 800190a:	f043 0308 	orr.w	r3, r3, #8
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b18      	ldr	r3, [pc, #96]	@ (8001974 <MX_GPIO_Init+0xcc>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	603b      	str	r3, [r7, #0]
 800191a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001922:	4815      	ldr	r0, [pc, #84]	@ (8001978 <MX_GPIO_Init+0xd0>)
 8001924:	f001 fb16 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2160      	movs	r1, #96	@ 0x60
 800192c:	4813      	ldr	r0, [pc, #76]	@ (800197c <MX_GPIO_Init+0xd4>)
 800192e:	f001 fb11 	bl	8002f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001932:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001938:	2301      	movs	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001940:	2302      	movs	r3, #2
 8001942:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001944:	f107 0310 	add.w	r3, r7, #16
 8001948:	4619      	mov	r1, r3
 800194a:	480b      	ldr	r0, [pc, #44]	@ (8001978 <MX_GPIO_Init+0xd0>)
 800194c:	f001 f986 	bl	8002c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001950:	2360      	movs	r3, #96	@ 0x60
 8001952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2302      	movs	r3, #2
 800195e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001960:	f107 0310 	add.w	r3, r7, #16
 8001964:	4619      	mov	r1, r3
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_GPIO_Init+0xd4>)
 8001968:	f001 f978 	bl	8002c5c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800196c:	bf00      	nop
 800196e:	3720      	adds	r7, #32
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40021000 	.word	0x40021000
 8001978:	40011000 	.word	0x40011000
 800197c:	40010800 	.word	0x40010800

08001980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001984:	b672      	cpsid	i
}
 8001986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001988:	bf00      	nop
 800198a:	e7fd      	b.n	8001988 <Error_Handler+0x8>

0800198c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_MspInit+0x5c>)
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <HAL_MspInit+0x5c>)
 8001998:	f043 0301 	orr.w	r3, r3, #1
 800199c:	6193      	str	r3, [r2, #24]
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	f003 0301 	and.w	r3, r3, #1
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019aa:	4b0f      	ldr	r3, [pc, #60]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019ac:	69db      	ldr	r3, [r3, #28]
 80019ae:	4a0e      	ldr	r2, [pc, #56]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b4:	61d3      	str	r3, [r2, #28]
 80019b6:	4b0c      	ldr	r3, [pc, #48]	@ (80019e8 <HAL_MspInit+0x5c>)
 80019b8:	69db      	ldr	r3, [r3, #28]
 80019ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80019c2:	4b0a      	ldr	r3, [pc, #40]	@ (80019ec <HAL_MspInit+0x60>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	4a04      	ldr	r2, [pc, #16]	@ (80019ec <HAL_MspInit+0x60>)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000

080019f0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a28      	ldr	r2, [pc, #160]	@ (8001aac <HAL_CAN_MspInit+0xbc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d149      	bne.n	8001aa4 <HAL_CAN_MspInit+0xb4>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <HAL_CAN_MspInit+0xc0>)
 8001a12:	69db      	ldr	r3, [r3, #28]
 8001a14:	4a26      	ldr	r2, [pc, #152]	@ (8001ab0 <HAL_CAN_MspInit+0xc0>)
 8001a16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	61d3      	str	r3, [r2, #28]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <HAL_CAN_MspInit+0xc0>)
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	60fb      	str	r3, [r7, #12]
 8001a26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a28:	4b21      	ldr	r3, [pc, #132]	@ (8001ab0 <HAL_CAN_MspInit+0xc0>)
 8001a2a:	699b      	ldr	r3, [r3, #24]
 8001a2c:	4a20      	ldr	r2, [pc, #128]	@ (8001ab0 <HAL_CAN_MspInit+0xc0>)
 8001a2e:	f043 0304 	orr.w	r3, r3, #4
 8001a32:	6193      	str	r3, [r2, #24]
 8001a34:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab0 <HAL_CAN_MspInit+0xc0>)
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	f003 0304 	and.w	r3, r3, #4
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4619      	mov	r1, r3
 8001a54:	4817      	ldr	r0, [pc, #92]	@ (8001ab4 <HAL_CAN_MspInit+0xc4>)
 8001a56:	f001 f901 	bl	8002c5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a60:	2302      	movs	r3, #2
 8001a62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4811      	ldr	r0, [pc, #68]	@ (8001ab4 <HAL_CAN_MspInit+0xc4>)
 8001a70:	f001 f8f4 	bl	8002c5c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2013      	movs	r0, #19
 8001a7a:	f001 f8b8 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8001a7e:	2013      	movs	r0, #19
 8001a80:	f001 f8d1 	bl	8002c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2100      	movs	r1, #0
 8001a88:	2014      	movs	r0, #20
 8001a8a:	f001 f8b0 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001a8e:	2014      	movs	r0, #20
 8001a90:	f001 f8c9 	bl	8002c26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2015      	movs	r0, #21
 8001a9a:	f001 f8a8 	bl	8002bee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001a9e:	2015      	movs	r0, #21
 8001aa0:	f001 f8c1 	bl	8002c26 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001aa4:	bf00      	nop
 8001aa6:	3720      	adds	r7, #32
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40006400 	.word	0x40006400
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010800 	.word	0x40010800

08001ab8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_I2C_MspInit+0x94>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d134      	bne.n	8001b42 <HAL_I2C_MspInit+0x8a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b50 <HAL_I2C_MspInit+0x98>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	4a1c      	ldr	r2, [pc, #112]	@ (8001b50 <HAL_I2C_MspInit+0x98>)
 8001ade:	f043 0308 	orr.w	r3, r3, #8
 8001ae2:	6193      	str	r3, [r2, #24]
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b50 <HAL_I2C_MspInit+0x98>)
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001af0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af6:	2312      	movs	r3, #18
 8001af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001afe:	2303      	movs	r3, #3
 8001b00:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	@ (8001b54 <HAL_I2C_MspInit+0x9c>)
 8001b0a:	f001 f8a7 	bl	8002c5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b0e:	4b12      	ldr	r3, [pc, #72]	@ (8001b58 <HAL_I2C_MspInit+0xa0>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b16:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1e:	f043 0302 	orr.w	r3, r3, #2
 8001b22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <HAL_I2C_MspInit+0xa0>)
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_I2C_MspInit+0x98>)
 8001b2c:	69db      	ldr	r3, [r3, #28]
 8001b2e:	4a08      	ldr	r2, [pc, #32]	@ (8001b50 <HAL_I2C_MspInit+0x98>)
 8001b30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b34:	61d3      	str	r3, [r2, #28]
 8001b36:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <HAL_I2C_MspInit+0x98>)
 8001b38:	69db      	ldr	r3, [r3, #28]
 8001b3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	@ 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40005400 	.word	0x40005400
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	40010000 	.word	0x40010000

08001b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <NMI_Handler+0x4>

08001b64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <HardFault_Handler+0x4>

08001b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <MemManage_Handler+0x4>

08001b74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <BusFault_Handler+0x4>

08001b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <UsageFault_Handler+0x4>

08001b84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bac:	f000 f8c8 	bl	8001d40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001bba:	f000 fd1e 	bl	80025fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000500 	.word	0x20000500

08001bc8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001bce:	f000 fd14 	bl	80025fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000500 	.word	0x20000500

08001bdc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <CAN1_RX1_IRQHandler+0x10>)
 8001be2:	f000 fd0a 	bl	80025fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000500 	.word	0x20000500

08001bf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf8:	4a14      	ldr	r2, [pc, #80]	@ (8001c4c <_sbrk+0x5c>)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <_sbrk+0x60>)
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c04:	4b13      	ldr	r3, [pc, #76]	@ (8001c54 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d102      	bne.n	8001c12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c0c:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <_sbrk+0x64>)
 8001c0e:	4a12      	ldr	r2, [pc, #72]	@ (8001c58 <_sbrk+0x68>)
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4b10      	ldr	r3, [pc, #64]	@ (8001c54 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d207      	bcs.n	8001c30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c20:	f002 fbba 	bl	8004398 <__errno>
 8001c24:	4603      	mov	r3, r0
 8001c26:	220c      	movs	r2, #12
 8001c28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	e009      	b.n	8001c44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c30:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <_sbrk+0x64>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <_sbrk+0x64>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	4a05      	ldr	r2, [pc, #20]	@ (8001c54 <_sbrk+0x64>)
 8001c40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c42:	68fb      	ldr	r3, [r7, #12]
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3718      	adds	r7, #24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20002800 	.word	0x20002800
 8001c50:	00000400 	.word	0x00000400
 8001c54:	2000057c 	.word	0x2000057c
 8001c58:	200006d0 	.word	0x200006d0

08001c5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c68:	f7ff fff8 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c6c:	480b      	ldr	r0, [pc, #44]	@ (8001c9c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c6e:	490c      	ldr	r1, [pc, #48]	@ (8001ca0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c70:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c74:	e002      	b.n	8001c7c <LoopCopyDataInit>

08001c76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c7a:	3304      	adds	r3, #4

08001c7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c80:	d3f9      	bcc.n	8001c76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c84:	4c09      	ldr	r4, [pc, #36]	@ (8001cac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c88:	e001      	b.n	8001c8e <LoopFillZerobss>

08001c8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c8c:	3204      	adds	r2, #4

08001c8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c90:	d3fb      	bcc.n	8001c8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c92:	f002 fb87 	bl	80043a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c96:	f7ff fd4d 	bl	8001734 <main>
  bx lr
 8001c9a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001ca4:	08005ab8 	.word	0x08005ab8
  ldr r2, =_sbss
 8001ca8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001cac:	200006cc 	.word	0x200006cc

08001cb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cb0:	e7fe      	b.n	8001cb0 <ADC1_2_IRQHandler>
	...

08001cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb8:	4b08      	ldr	r3, [pc, #32]	@ (8001cdc <HAL_Init+0x28>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a07      	ldr	r2, [pc, #28]	@ (8001cdc <HAL_Init+0x28>)
 8001cbe:	f043 0310 	orr.w	r3, r3, #16
 8001cc2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	f000 ff87 	bl	8002bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cca:	200f      	movs	r0, #15
 8001ccc:	f000 f808 	bl	8001ce0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd0:	f7ff fe5c 	bl	800198c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40022000 	.word	0x40022000

08001ce0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce8:	4b12      	ldr	r3, [pc, #72]	@ (8001d34 <HAL_InitTick+0x54>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b12      	ldr	r3, [pc, #72]	@ (8001d38 <HAL_InitTick+0x58>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 ff9f 	bl	8002c42 <HAL_SYSTICK_Config>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e00e      	b.n	8001d2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b0f      	cmp	r3, #15
 8001d12:	d80a      	bhi.n	8001d2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d14:	2200      	movs	r2, #0
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	f04f 30ff 	mov.w	r0, #4294967295
 8001d1c:	f000 ff67 	bl	8002bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d20:	4a06      	ldr	r2, [pc, #24]	@ (8001d3c <HAL_InitTick+0x5c>)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e000      	b.n	8001d2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20000008 	.word	0x20000008
 8001d38:	20000010 	.word	0x20000010
 8001d3c:	2000000c 	.word	0x2000000c

08001d40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d44:	4b05      	ldr	r3, [pc, #20]	@ (8001d5c <HAL_IncTick+0x1c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4413      	add	r3, r2
 8001d50:	4a03      	ldr	r2, [pc, #12]	@ (8001d60 <HAL_IncTick+0x20>)
 8001d52:	6013      	str	r3, [r2, #0]
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	20000010 	.word	0x20000010
 8001d60:	20000580 	.word	0x20000580

08001d64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b02      	ldr	r3, [pc, #8]	@ (8001d74 <HAL_GetTick+0x10>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	20000580 	.word	0x20000580

08001d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_GetTick>
 8001d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d90:	d005      	beq.n	8001d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_Delay+0x44>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d9e:	bf00      	nop
 8001da0:	f7ff ffe0 	bl	8001d64 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d8f7      	bhi.n	8001da0 <HAL_Delay+0x28>
  {
  }
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000010 	.word	0x20000010

08001dc0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e0ed      	b.n	8001fae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff fe06 	bl	80019f0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0201 	orr.w	r2, r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df4:	f7ff ffb6 	bl	8001d64 <HAL_GetTick>
 8001df8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dfa:	e012      	b.n	8001e22 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dfc:	f7ff ffb2 	bl	8001d64 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b0a      	cmp	r3, #10
 8001e08:	d90b      	bls.n	8001e22 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2205      	movs	r2, #5
 8001e1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e0c5      	b.n	8001fae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0e5      	beq.n	8001dfc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f022 0202 	bic.w	r2, r2, #2
 8001e3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e40:	f7ff ff90 	bl	8001d64 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e46:	e012      	b.n	8001e6e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e48:	f7ff ff8c 	bl	8001d64 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b0a      	cmp	r3, #10
 8001e54:	d90b      	bls.n	8001e6e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e09f      	b.n	8001fae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1e5      	bne.n	8001e48 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	7e1b      	ldrb	r3, [r3, #24]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d108      	bne.n	8001e96 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	e007      	b.n	8001ea6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	7e5b      	ldrb	r3, [r3, #25]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d108      	bne.n	8001ec0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001ece:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7e9b      	ldrb	r3, [r3, #26]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d108      	bne.n	8001eea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0220 	orr.w	r2, r2, #32
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	e007      	b.n	8001efa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0220 	bic.w	r2, r2, #32
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	7edb      	ldrb	r3, [r3, #27]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d108      	bne.n	8001f14 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0210 	bic.w	r2, r2, #16
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e007      	b.n	8001f24 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0210 	orr.w	r2, r2, #16
 8001f22:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7f1b      	ldrb	r3, [r3, #28]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0208 	orr.w	r2, r2, #8
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e007      	b.n	8001f4e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0208 	bic.w	r2, r2, #8
 8001f4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7f5b      	ldrb	r3, [r3, #29]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0204 	orr.w	r2, r2, #4
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	e007      	b.n	8001f78 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0204 	bic.w	r2, r2, #4
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	ea42 0103 	orr.w	r1, r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fcc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d003      	beq.n	8001fdc <HAL_CAN_ConfigFilter+0x26>
 8001fd4:	7cfb      	ldrb	r3, [r7, #19]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	f040 80aa 	bne.w	8002130 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	43db      	mvns	r3, r3
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d123      	bne.n	800205e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	401a      	ands	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002038:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3248      	adds	r2, #72	@ 0x48
 800203e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002052:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002054:	6979      	ldr	r1, [r7, #20]
 8002056:	3348      	adds	r3, #72	@ 0x48
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	440b      	add	r3, r1
 800205c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d122      	bne.n	80020ac <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	431a      	orrs	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002086:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3248      	adds	r2, #72	@ 0x48
 800208c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80020a0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80020a2:	6979      	ldr	r1, [r7, #20]
 80020a4:	3348      	adds	r3, #72	@ 0x48
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	440b      	add	r3, r1
 80020aa:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	699b      	ldr	r3, [r3, #24]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	43db      	mvns	r3, r3
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80020c6:	e007      	b.n	80020d8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	431a      	orrs	r2, r3
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d109      	bne.n	80020f4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	43db      	mvns	r3, r3
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80020f2:	e007      	b.n	8002104 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	431a      	orrs	r2, r3
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d107      	bne.n	800211c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	431a      	orrs	r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002122:	f023 0201 	bic.w	r2, r3, #1
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e006      	b.n	800213e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
  }
}
 800213e:	4618      	mov	r0, r3
 8002140:	371c      	adds	r7, #28
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr

08002148 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d12e      	bne.n	80021ba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2202      	movs	r2, #2
 8002160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002174:	f7ff fdf6 	bl	8001d64 <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800217a:	e012      	b.n	80021a2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800217c:	f7ff fdf2 	bl	8001d64 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d90b      	bls.n	80021a2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2205      	movs	r2, #5
 800219a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e012      	b.n	80021c8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1e5      	bne.n	800217c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80021b6:	2300      	movs	r3, #0
 80021b8:	e006      	b.n	80021c8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
  }
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	@ 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
 80021dc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80021ee:	7ffb      	ldrb	r3, [r7, #31]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d003      	beq.n	80021fc <HAL_CAN_AddTxMessage+0x2c>
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	f040 80ad 	bne.w	8002356 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800220c:	2b00      	cmp	r3, #0
 800220e:	d105      	bne.n	800221c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8095 	beq.w	8002346 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	0e1b      	lsrs	r3, r3, #24
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002226:	2201      	movs	r2, #1
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d10d      	bne.n	8002254 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002242:	68f9      	ldr	r1, [r7, #12]
 8002244:	6809      	ldr	r1, [r1, #0]
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	3318      	adds	r3, #24
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	440b      	add	r3, r1
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	e00f      	b.n	8002274 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800225e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002268:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	3318      	adds	r3, #24
 800226e:	011b      	lsls	r3, r3, #4
 8002270:	440b      	add	r3, r1
 8002272:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3318      	adds	r3, #24
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	440b      	add	r3, r1
 8002284:	3304      	adds	r3, #4
 8002286:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	7d1b      	ldrb	r3, [r3, #20]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d111      	bne.n	80022b4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3318      	adds	r3, #24
 8002298:	011b      	lsls	r3, r3, #4
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	6811      	ldr	r1, [r2, #0]
 80022a4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	3318      	adds	r3, #24
 80022ac:	011b      	lsls	r3, r3, #4
 80022ae:	440b      	add	r3, r1
 80022b0:	3304      	adds	r3, #4
 80022b2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	3307      	adds	r3, #7
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	061a      	lsls	r2, r3, #24
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3306      	adds	r3, #6
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	3305      	adds	r3, #5
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	4313      	orrs	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	3204      	adds	r2, #4
 80022d4:	7812      	ldrb	r2, [r2, #0]
 80022d6:	4610      	mov	r0, r2
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	6811      	ldr	r1, [r2, #0]
 80022dc:	ea43 0200 	orr.w	r2, r3, r0
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	011b      	lsls	r3, r3, #4
 80022e4:	440b      	add	r3, r1
 80022e6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80022ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3303      	adds	r3, #3
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	061a      	lsls	r2, r3, #24
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3302      	adds	r3, #2
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	041b      	lsls	r3, r3, #16
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3301      	adds	r3, #1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	4313      	orrs	r3, r2
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	7812      	ldrb	r2, [r2, #0]
 800230c:	4610      	mov	r0, r2
 800230e:	68fa      	ldr	r2, [r7, #12]
 8002310:	6811      	ldr	r1, [r2, #0]
 8002312:	ea43 0200 	orr.w	r2, r3, r0
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	440b      	add	r3, r1
 800231c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002320:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3318      	adds	r3, #24
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	6811      	ldr	r1, [r2, #0]
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3318      	adds	r3, #24
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	440b      	add	r3, r1
 8002340:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e00e      	b.n	8002364 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e006      	b.n	8002364 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
  }
}
 8002364:	4618      	mov	r0, r3
 8002366:	3724      	adds	r7, #36	@ 0x24
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800236e:	b480      	push	{r7}
 8002370:	b087      	sub	sp, #28
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002382:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d003      	beq.n	8002392 <HAL_CAN_GetRxMessage+0x24>
 800238a:	7dfb      	ldrb	r3, [r7, #23]
 800238c:	2b02      	cmp	r3, #2
 800238e:	f040 8103 	bne.w	8002598 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10e      	bne.n	80023b6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d116      	bne.n	80023d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0f7      	b.n	80025a6 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d107      	bne.n	80023d4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0e8      	b.n	80025a6 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	331b      	adds	r3, #27
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	4413      	add	r3, r2
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0204 	and.w	r2, r3, #4
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10c      	bne.n	800240c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	331b      	adds	r3, #27
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	4413      	add	r3, r2
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0d5b      	lsrs	r3, r3, #21
 8002402:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e00b      	b.n	8002424 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	331b      	adds	r3, #27
 8002414:	011b      	lsls	r3, r3, #4
 8002416:	4413      	add	r3, r2
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	08db      	lsrs	r3, r3, #3
 800241c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	331b      	adds	r3, #27
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0202 	and.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	331b      	adds	r3, #27
 8002442:	011b      	lsls	r3, r3, #4
 8002444:	4413      	add	r3, r2
 8002446:	3304      	adds	r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0308 	and.w	r3, r3, #8
 800244e:	2b00      	cmp	r3, #0
 8002450:	d003      	beq.n	800245a <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2208      	movs	r2, #8
 8002456:	611a      	str	r2, [r3, #16]
 8002458:	e00b      	b.n	8002472 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	331b      	adds	r3, #27
 8002462:	011b      	lsls	r3, r3, #4
 8002464:	4413      	add	r3, r2
 8002466:	3304      	adds	r3, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 020f 	and.w	r2, r3, #15
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	331b      	adds	r3, #27
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	3304      	adds	r3, #4
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b2da      	uxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	331b      	adds	r3, #27
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	4413      	add	r3, r2
 8002496:	3304      	adds	r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	0c1b      	lsrs	r3, r3, #16
 800249c:	b29a      	uxth	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	0a1a      	lsrs	r2, r3, #8
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	4413      	add	r3, r2
 80024dc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	0c1a      	lsrs	r2, r3, #16
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	3302      	adds	r3, #2
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	011b      	lsls	r3, r3, #4
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	0e1a      	lsrs	r2, r3, #24
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	3303      	adds	r3, #3
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	011b      	lsls	r3, r3, #4
 800250e:	4413      	add	r3, r2
 8002510:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	3304      	adds	r3, #4
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	011b      	lsls	r3, r3, #4
 8002526:	4413      	add	r3, r2
 8002528:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	0a1a      	lsrs	r2, r3, #8
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	3305      	adds	r3, #5
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	011b      	lsls	r3, r3, #4
 8002540:	4413      	add	r3, r2
 8002542:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0c1a      	lsrs	r2, r3, #16
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	3306      	adds	r3, #6
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	4413      	add	r3, r2
 800255c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0e1a      	lsrs	r2, r3, #24
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	3307      	adds	r3, #7
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d108      	bne.n	8002584 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68da      	ldr	r2, [r3, #12]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 0220 	orr.w	r2, r2, #32
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	e007      	b.n	8002594 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0220 	orr.w	r2, r2, #32
 8002592:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002594:	2300      	movs	r3, #0
 8002596:	e006      	b.n	80025a6 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
  }
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80025c2:	7bfb      	ldrb	r3, [r7, #15]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d002      	beq.n	80025ce <HAL_CAN_ActivateNotification+0x1e>
 80025c8:	7bfb      	ldrb	r3, [r7, #15]
 80025ca:	2b02      	cmp	r3, #2
 80025cc:	d109      	bne.n	80025e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	6959      	ldr	r1, [r3, #20]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e006      	b.n	80025f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
  }
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr

080025fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b08a      	sub	sp, #40	@ 0x28
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002602:	2300      	movs	r3, #0
 8002604:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	699b      	ldr	r3, [r3, #24]
 8002634:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	2b00      	cmp	r3, #0
 800263e:	d07c      	beq.n	800273a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d023      	beq.n	8002692 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2201      	movs	r2, #1
 8002650:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d003      	beq.n	8002664 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f983 	bl	8002968 <HAL_CAN_TxMailbox0CompleteCallback>
 8002662:	e016      	b.n	8002692 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	d004      	beq.n	8002678 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002674:	627b      	str	r3, [r7, #36]	@ 0x24
 8002676:	e00c      	b.n	8002692 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002684:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
 800268a:	e002      	b.n	8002692 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f986 	bl	800299e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d024      	beq.n	80026e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d003      	beq.n	80026b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f962 	bl	800297a <HAL_CAN_TxMailbox1CompleteCallback>
 80026b6:	e016      	b.n	80026e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d004      	beq.n	80026cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80026ca:	e00c      	b.n	80026e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d004      	beq.n	80026e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026de:	e002      	b.n	80026e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f965 	bl	80029b0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d024      	beq.n	800273a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f000 f941 	bl	800298c <HAL_CAN_TxMailbox2CompleteCallback>
 800270a:	e016      	b.n	800273a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d004      	beq.n	8002720 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
 800271e:	e00c      	b.n	800273a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
 8002732:	e002      	b.n	800273a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f000 f944 	bl	80029c2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00c      	beq.n	800275e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0310 	and.w	r3, r3, #16
 800274a:	2b00      	cmp	r3, #0
 800274c:	d007      	beq.n	800275e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2210      	movs	r2, #16
 800275c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800275e:	6a3b      	ldr	r3, [r7, #32]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	f003 0308 	and.w	r3, r3, #8
 800276e:	2b00      	cmp	r3, #0
 8002770:	d006      	beq.n	8002780 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2208      	movs	r2, #8
 8002778:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 f933 	bl	80029e6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002780:	6a3b      	ldr	r3, [r7, #32]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f91b 	bl	80029d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00c      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d007      	beq.n	80027c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2210      	movs	r2, #16
 80027c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00b      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	f003 0308 	and.w	r3, r3, #8
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d006      	beq.n	80027e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2208      	movs	r2, #8
 80027dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 f90a 	bl	80029f8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d009      	beq.n	8002802 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	691b      	ldr	r3, [r3, #16]
 80027f4:	f003 0303 	and.w	r3, r3, #3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d002      	beq.n	8002802 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe fc5d 	bl	80010bc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0310 	and.w	r3, r3, #16
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2210      	movs	r2, #16
 800281c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8f3 	bl	8002a0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002824:	6a3b      	ldr	r3, [r7, #32]
 8002826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00b      	beq.n	8002846 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	f003 0308 	and.w	r3, r3, #8
 8002834:	2b00      	cmp	r3, #0
 8002836:	d006      	beq.n	8002846 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2208      	movs	r2, #8
 800283e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f8eb 	bl	8002a1c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d07b      	beq.n	8002948 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d072      	beq.n	8002940 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800286e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800287c:	2b00      	cmp	r3, #0
 800287e:	d008      	beq.n	8002892 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002886:	2b00      	cmp	r3, #0
 8002888:	d003      	beq.n	8002892 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800288a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800288c:	f043 0302 	orr.w	r3, r3, #2
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d008      	beq.n	80028ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d043      	beq.n	8002940 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03e      	beq.n	8002940 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028c8:	2b60      	cmp	r3, #96	@ 0x60
 80028ca:	d02b      	beq.n	8002924 <HAL_CAN_IRQHandler+0x32a>
 80028cc:	2b60      	cmp	r3, #96	@ 0x60
 80028ce:	d82e      	bhi.n	800292e <HAL_CAN_IRQHandler+0x334>
 80028d0:	2b50      	cmp	r3, #80	@ 0x50
 80028d2:	d022      	beq.n	800291a <HAL_CAN_IRQHandler+0x320>
 80028d4:	2b50      	cmp	r3, #80	@ 0x50
 80028d6:	d82a      	bhi.n	800292e <HAL_CAN_IRQHandler+0x334>
 80028d8:	2b40      	cmp	r3, #64	@ 0x40
 80028da:	d019      	beq.n	8002910 <HAL_CAN_IRQHandler+0x316>
 80028dc:	2b40      	cmp	r3, #64	@ 0x40
 80028de:	d826      	bhi.n	800292e <HAL_CAN_IRQHandler+0x334>
 80028e0:	2b30      	cmp	r3, #48	@ 0x30
 80028e2:	d010      	beq.n	8002906 <HAL_CAN_IRQHandler+0x30c>
 80028e4:	2b30      	cmp	r3, #48	@ 0x30
 80028e6:	d822      	bhi.n	800292e <HAL_CAN_IRQHandler+0x334>
 80028e8:	2b10      	cmp	r3, #16
 80028ea:	d002      	beq.n	80028f2 <HAL_CAN_IRQHandler+0x2f8>
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d005      	beq.n	80028fc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028f0:	e01d      	b.n	800292e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028fa:	e019      	b.n	8002930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	f043 0310 	orr.w	r3, r3, #16
 8002902:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002904:	e014      	b.n	8002930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002908:	f043 0320 	orr.w	r3, r3, #32
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800290e:	e00f      	b.n	8002930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002912:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002918:	e00a      	b.n	8002930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002922:	e005      	b.n	8002930 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800292c:	e000      	b.n	8002930 <HAL_CAN_IRQHandler+0x336>
            break;
 800292e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800293e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d008      	beq.n	8002960 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002954:	431a      	orrs	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f867 	bl	8002a2e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002960:	bf00      	nop
 8002962:	3728      	adds	r7, #40	@ 0x28
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr

0800297a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800299e:	b480      	push	{r7}
 80029a0:	b083      	sub	sp, #12
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	bc80      	pop	{r7}
 80029c0:	4770      	bx	lr

080029c2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b083      	sub	sp, #12
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bc80      	pop	{r7}
 8002a08:	4770      	bx	lr

08002a0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bc80      	pop	{r7}
 8002a1a:	4770      	bx	lr

08002a1c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr

08002a2e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	b083      	sub	sp, #12
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bc80      	pop	{r7}
 8002a3e:	4770      	bx	lr

08002a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a50:	4b0c      	ldr	r3, [pc, #48]	@ (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a72:	4a04      	ldr	r2, [pc, #16]	@ (8002a84 <__NVIC_SetPriorityGrouping+0x44>)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	60d3      	str	r3, [r2, #12]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a8c:	4b04      	ldr	r3, [pc, #16]	@ (8002aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	0a1b      	lsrs	r3, r3, #8
 8002a92:	f003 0307 	and.w	r3, r3, #7
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	e000ed00 	.word	0xe000ed00

08002aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	4603      	mov	r3, r0
 8002aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	db0b      	blt.n	8002ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab6:	79fb      	ldrb	r3, [r7, #7]
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	4906      	ldr	r1, [pc, #24]	@ (8002ad8 <__NVIC_EnableIRQ+0x34>)
 8002abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	6039      	str	r1, [r7, #0]
 8002ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	db0a      	blt.n	8002b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	b2da      	uxtb	r2, r3
 8002af4:	490c      	ldr	r1, [pc, #48]	@ (8002b28 <__NVIC_SetPriority+0x4c>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	0112      	lsls	r2, r2, #4
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	440b      	add	r3, r1
 8002b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b04:	e00a      	b.n	8002b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4908      	ldr	r1, [pc, #32]	@ (8002b2c <__NVIC_SetPriority+0x50>)
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	3b04      	subs	r3, #4
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	440b      	add	r3, r1
 8002b1a:	761a      	strb	r2, [r3, #24]
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100
 8002b2c:	e000ed00 	.word	0xe000ed00

08002b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b089      	sub	sp, #36	@ 0x24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f1c3 0307 	rsb	r3, r3, #7
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	bf28      	it	cs
 8002b4e:	2304      	movcs	r3, #4
 8002b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3304      	adds	r3, #4
 8002b56:	2b06      	cmp	r3, #6
 8002b58:	d902      	bls.n	8002b60 <NVIC_EncodePriority+0x30>
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3b03      	subs	r3, #3
 8002b5e:	e000      	b.n	8002b62 <NVIC_EncodePriority+0x32>
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	f04f 32ff 	mov.w	r2, #4294967295
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	401a      	ands	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b78:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b82:	43d9      	mvns	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b88:	4313      	orrs	r3, r2
         );
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3724      	adds	r7, #36	@ 0x24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bc80      	pop	{r7}
 8002b92:	4770      	bx	lr

08002b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba4:	d301      	bcc.n	8002baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00f      	b.n	8002bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002baa:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bb2:	210f      	movs	r1, #15
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f7ff ff90 	bl	8002adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bc2:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <SysTick_Config+0x40>)
 8002bc4:	2207      	movs	r2, #7
 8002bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	e000e010 	.word	0xe000e010

08002bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff ff2d 	bl	8002a40 <__NVIC_SetPriorityGrouping>
}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b086      	sub	sp, #24
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	60b9      	str	r1, [r7, #8]
 8002bf8:	607a      	str	r2, [r7, #4]
 8002bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c00:	f7ff ff42 	bl	8002a88 <__NVIC_GetPriorityGrouping>
 8002c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	68b9      	ldr	r1, [r7, #8]
 8002c0a:	6978      	ldr	r0, [r7, #20]
 8002c0c:	f7ff ff90 	bl	8002b30 <NVIC_EncodePriority>
 8002c10:	4602      	mov	r2, r0
 8002c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c16:	4611      	mov	r1, r2
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff5f 	bl	8002adc <__NVIC_SetPriority>
}
 8002c1e:	bf00      	nop
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff35 	bl	8002aa4 <__NVIC_EnableIRQ>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b082      	sub	sp, #8
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa2 	bl	8002b94 <SysTick_Config>
 8002c50:	4603      	mov	r3, r0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b08b      	sub	sp, #44	@ 0x2c
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c66:	2300      	movs	r3, #0
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c6e:	e161      	b.n	8002f34 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002c70:	2201      	movs	r2, #1
 8002c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	69fa      	ldr	r2, [r7, #28]
 8002c80:	4013      	ands	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f040 8150 	bne.w	8002f2e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a97      	ldr	r2, [pc, #604]	@ (8002ef0 <HAL_GPIO_Init+0x294>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d05e      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002c98:	4a95      	ldr	r2, [pc, #596]	@ (8002ef0 <HAL_GPIO_Init+0x294>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d875      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002c9e:	4a95      	ldr	r2, [pc, #596]	@ (8002ef4 <HAL_GPIO_Init+0x298>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d058      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002ca4:	4a93      	ldr	r2, [pc, #588]	@ (8002ef4 <HAL_GPIO_Init+0x298>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d86f      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002caa:	4a93      	ldr	r2, [pc, #588]	@ (8002ef8 <HAL_GPIO_Init+0x29c>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d052      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002cb0:	4a91      	ldr	r2, [pc, #580]	@ (8002ef8 <HAL_GPIO_Init+0x29c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d869      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cb6:	4a91      	ldr	r2, [pc, #580]	@ (8002efc <HAL_GPIO_Init+0x2a0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d04c      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002cbc:	4a8f      	ldr	r2, [pc, #572]	@ (8002efc <HAL_GPIO_Init+0x2a0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d863      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cc2:	4a8f      	ldr	r2, [pc, #572]	@ (8002f00 <HAL_GPIO_Init+0x2a4>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d046      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
 8002cc8:	4a8d      	ldr	r2, [pc, #564]	@ (8002f00 <HAL_GPIO_Init+0x2a4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d85d      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cce:	2b12      	cmp	r3, #18
 8002cd0:	d82a      	bhi.n	8002d28 <HAL_GPIO_Init+0xcc>
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d859      	bhi.n	8002d8a <HAL_GPIO_Init+0x12e>
 8002cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cdc <HAL_GPIO_Init+0x80>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002d57 	.word	0x08002d57
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d43 	.word	0x08002d43
 8002ce8:	08002d85 	.word	0x08002d85
 8002cec:	08002d8b 	.word	0x08002d8b
 8002cf0:	08002d8b 	.word	0x08002d8b
 8002cf4:	08002d8b 	.word	0x08002d8b
 8002cf8:	08002d8b 	.word	0x08002d8b
 8002cfc:	08002d8b 	.word	0x08002d8b
 8002d00:	08002d8b 	.word	0x08002d8b
 8002d04:	08002d8b 	.word	0x08002d8b
 8002d08:	08002d8b 	.word	0x08002d8b
 8002d0c:	08002d8b 	.word	0x08002d8b
 8002d10:	08002d8b 	.word	0x08002d8b
 8002d14:	08002d8b 	.word	0x08002d8b
 8002d18:	08002d8b 	.word	0x08002d8b
 8002d1c:	08002d8b 	.word	0x08002d8b
 8002d20:	08002d39 	.word	0x08002d39
 8002d24:	08002d4d 	.word	0x08002d4d
 8002d28:	4a76      	ldr	r2, [pc, #472]	@ (8002f04 <HAL_GPIO_Init+0x2a8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d013      	beq.n	8002d56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d2e:	e02c      	b.n	8002d8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	623b      	str	r3, [r7, #32]
          break;
 8002d36:	e029      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	623b      	str	r3, [r7, #32]
          break;
 8002d40:	e024      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	3308      	adds	r3, #8
 8002d48:	623b      	str	r3, [r7, #32]
          break;
 8002d4a:	e01f      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	330c      	adds	r3, #12
 8002d52:	623b      	str	r3, [r7, #32]
          break;
 8002d54:	e01a      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d5e:	2304      	movs	r3, #4
 8002d60:	623b      	str	r3, [r7, #32]
          break;
 8002d62:	e013      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d6c:	2308      	movs	r3, #8
 8002d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	611a      	str	r2, [r3, #16]
          break;
 8002d76:	e009      	b.n	8002d8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002d78:	2308      	movs	r3, #8
 8002d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	615a      	str	r2, [r3, #20]
          break;
 8002d82:	e003      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002d84:	2300      	movs	r3, #0
 8002d86:	623b      	str	r3, [r7, #32]
          break;
 8002d88:	e000      	b.n	8002d8c <HAL_GPIO_Init+0x130>
          break;
 8002d8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	2bff      	cmp	r3, #255	@ 0xff
 8002d90:	d801      	bhi.n	8002d96 <HAL_GPIO_Init+0x13a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_Init+0x13e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	3304      	adds	r3, #4
 8002d9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2bff      	cmp	r3, #255	@ 0xff
 8002da0:	d802      	bhi.n	8002da8 <HAL_GPIO_Init+0x14c>
 8002da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	e002      	b.n	8002dae <HAL_GPIO_Init+0x152>
 8002da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002daa:	3b08      	subs	r3, #8
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	210f      	movs	r1, #15
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbc:	43db      	mvns	r3, r3
 8002dbe:	401a      	ands	r2, r3
 8002dc0:	6a39      	ldr	r1, [r7, #32]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80a9 	beq.w	8002f2e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ddc:	4b4a      	ldr	r3, [pc, #296]	@ (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	4a49      	ldr	r2, [pc, #292]	@ (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	6193      	str	r3, [r2, #24]
 8002de8:	4b47      	ldr	r3, [pc, #284]	@ (8002f08 <HAL_GPIO_Init+0x2ac>)
 8002dea:	699b      	ldr	r3, [r3, #24]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002df4:	4a45      	ldr	r2, [pc, #276]	@ (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df8:	089b      	lsrs	r3, r3, #2
 8002dfa:	3302      	adds	r3, #2
 8002dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	220f      	movs	r2, #15
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	4013      	ands	r3, r2
 8002e16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002f10 <HAL_GPIO_Init+0x2b4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00d      	beq.n	8002e3c <HAL_GPIO_Init+0x1e0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a3c      	ldr	r2, [pc, #240]	@ (8002f14 <HAL_GPIO_Init+0x2b8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d007      	beq.n	8002e38 <HAL_GPIO_Init+0x1dc>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a3b      	ldr	r2, [pc, #236]	@ (8002f18 <HAL_GPIO_Init+0x2bc>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_GPIO_Init+0x1d8>
 8002e30:	2302      	movs	r3, #2
 8002e32:	e004      	b.n	8002e3e <HAL_GPIO_Init+0x1e2>
 8002e34:	2303      	movs	r3, #3
 8002e36:	e002      	b.n	8002e3e <HAL_GPIO_Init+0x1e2>
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e000      	b.n	8002e3e <HAL_GPIO_Init+0x1e2>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e40:	f002 0203 	and.w	r2, r2, #3
 8002e44:	0092      	lsls	r2, r2, #2
 8002e46:	4093      	lsls	r3, r2
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e4e:	492f      	ldr	r1, [pc, #188]	@ (8002f0c <HAL_GPIO_Init+0x2b0>)
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3302      	adds	r3, #2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002e68:	4b2c      	ldr	r3, [pc, #176]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	492b      	ldr	r1, [pc, #172]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	608b      	str	r3, [r1, #8]
 8002e74:	e006      	b.n	8002e84 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002e76:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	4927      	ldr	r1, [pc, #156]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d006      	beq.n	8002e9e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002e90:	4b22      	ldr	r3, [pc, #136]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	4921      	ldr	r1, [pc, #132]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
 8002e9c:	e006      	b.n	8002eac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	491d      	ldr	r1, [pc, #116]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d006      	beq.n	8002ec6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002eb8:	4b18      	ldr	r3, [pc, #96]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	4917      	ldr	r1, [pc, #92]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	604b      	str	r3, [r1, #4]
 8002ec4:	e006      	b.n	8002ed4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002ec6:	4b15      	ldr	r3, [pc, #84]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	4913      	ldr	r1, [pc, #76]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d01f      	beq.n	8002f20 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <HAL_GPIO_Init+0x2c0>)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	600b      	str	r3, [r1, #0]
 8002eec:	e01f      	b.n	8002f2e <HAL_GPIO_Init+0x2d2>
 8002eee:	bf00      	nop
 8002ef0:	10320000 	.word	0x10320000
 8002ef4:	10310000 	.word	0x10310000
 8002ef8:	10220000 	.word	0x10220000
 8002efc:	10210000 	.word	0x10210000
 8002f00:	10120000 	.word	0x10120000
 8002f04:	10110000 	.word	0x10110000
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40010800 	.word	0x40010800
 8002f14:	40010c00 	.word	0x40010c00
 8002f18:	40011000 	.word	0x40011000
 8002f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_GPIO_Init+0x2f4>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	43db      	mvns	r3, r3
 8002f28:	4909      	ldr	r1, [pc, #36]	@ (8002f50 <HAL_GPIO_Init+0x2f4>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	3301      	adds	r3, #1
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f47f ae96 	bne.w	8002c70 <HAL_GPIO_Init+0x14>
  }
}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	372c      	adds	r7, #44	@ 0x2c
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr
 8002f50:	40010400 	.word	0x40010400

08002f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f64:	787b      	ldrb	r3, [r7, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f6a:	887a      	ldrh	r2, [r7, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002f70:	e003      	b.n	8002f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002f72:	887b      	ldrh	r3, [r7, #2]
 8002f74:	041a      	lsls	r2, r3, #16
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	611a      	str	r2, [r3, #16]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr

08002f84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	041a      	lsls	r2, r3, #16
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	43d9      	mvns	r1, r3
 8002fa2:	887b      	ldrh	r3, [r7, #2]
 8002fa4:	400b      	ands	r3, r1
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	611a      	str	r2, [r3, #16]
}
 8002fac:	bf00      	nop
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr
	...

08002fb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e12b      	b.n	8003222 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe fd6a 	bl	8001ab8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2224      	movs	r2, #36	@ 0x24
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0201 	bic.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800300a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800301a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800301c:	f001 f960 	bl	80042e0 <HAL_RCC_GetPCLK1Freq>
 8003020:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	4a81      	ldr	r2, [pc, #516]	@ (800322c <HAL_I2C_Init+0x274>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d807      	bhi.n	800303c <HAL_I2C_Init+0x84>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	4a80      	ldr	r2, [pc, #512]	@ (8003230 <HAL_I2C_Init+0x278>)
 8003030:	4293      	cmp	r3, r2
 8003032:	bf94      	ite	ls
 8003034:	2301      	movls	r3, #1
 8003036:	2300      	movhi	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e006      	b.n	800304a <HAL_I2C_Init+0x92>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a7d      	ldr	r2, [pc, #500]	@ (8003234 <HAL_I2C_Init+0x27c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e0e7      	b.n	8003222 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4a78      	ldr	r2, [pc, #480]	@ (8003238 <HAL_I2C_Init+0x280>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	0c9b      	lsrs	r3, r3, #18
 800305c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	430a      	orrs	r2, r1
 8003070:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	4a6a      	ldr	r2, [pc, #424]	@ (800322c <HAL_I2C_Init+0x274>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d802      	bhi.n	800308c <HAL_I2C_Init+0xd4>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3301      	adds	r3, #1
 800308a:	e009      	b.n	80030a0 <HAL_I2C_Init+0xe8>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	4a69      	ldr	r2, [pc, #420]	@ (800323c <HAL_I2C_Init+0x284>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	3301      	adds	r3, #1
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	69db      	ldr	r3, [r3, #28]
 80030ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	495c      	ldr	r1, [pc, #368]	@ (800322c <HAL_I2C_Init+0x274>)
 80030bc:	428b      	cmp	r3, r1
 80030be:	d819      	bhi.n	80030f4 <HAL_I2C_Init+0x13c>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	1e59      	subs	r1, r3, #1
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80030ce:	1c59      	adds	r1, r3, #1
 80030d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030d4:	400b      	ands	r3, r1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_I2C_Init+0x138>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1e59      	subs	r1, r3, #1
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ee:	e051      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 80030f0:	2304      	movs	r3, #4
 80030f2:	e04f      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d111      	bne.n	8003120 <HAL_I2C_Init+0x168>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	1e58      	subs	r0, r3, #1
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	440b      	add	r3, r1
 800310a:	fbb0 f3f3 	udiv	r3, r0, r3
 800310e:	3301      	adds	r3, #1
 8003110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e012      	b.n	8003146 <HAL_I2C_Init+0x18e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	440b      	add	r3, r1
 800312e:	0099      	lsls	r1, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	fbb0 f3f3 	udiv	r3, r0, r3
 8003136:	3301      	adds	r3, #1
 8003138:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Init+0x196>
 800314a:	2301      	movs	r3, #1
 800314c:	e022      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10e      	bne.n	8003174 <HAL_I2C_Init+0x1bc>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1e58      	subs	r0, r3, #1
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	440b      	add	r3, r1
 8003164:	fbb0 f3f3 	udiv	r3, r0, r3
 8003168:	3301      	adds	r3, #1
 800316a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800316e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003172:	e00f      	b.n	8003194 <HAL_I2C_Init+0x1dc>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1e58      	subs	r0, r3, #1
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	440b      	add	r3, r1
 8003182:	0099      	lsls	r1, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	fbb0 f3f3 	udiv	r3, r0, r3
 800318a:	3301      	adds	r3, #1
 800318c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003190:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	6809      	ldr	r1, [r1, #0]
 8003198:	4313      	orrs	r3, r2
 800319a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	6911      	ldr	r1, [r2, #16]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2220      	movs	r2, #32
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	000186a0 	.word	0x000186a0
 8003230:	001e847f 	.word	0x001e847f
 8003234:	003d08ff 	.word	0x003d08ff
 8003238:	431bde83 	.word	0x431bde83
 800323c:	10624dd3 	.word	0x10624dd3

08003240 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af02      	add	r7, sp, #8
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	461a      	mov	r2, r3
 800324c:	460b      	mov	r3, r1
 800324e:	817b      	strh	r3, [r7, #10]
 8003250:	4613      	mov	r3, r2
 8003252:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003254:	f7fe fd86 	bl	8001d64 <HAL_GetTick>
 8003258:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b20      	cmp	r3, #32
 8003264:	f040 80e0 	bne.w	8003428 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	2319      	movs	r3, #25
 800326e:	2201      	movs	r2, #1
 8003270:	4970      	ldr	r1, [pc, #448]	@ (8003434 <HAL_I2C_Master_Transmit+0x1f4>)
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fa92 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
 8003280:	e0d3      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_I2C_Master_Transmit+0x50>
 800328c:	2302      	movs	r3, #2
 800328e:	e0cc      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d007      	beq.n	80032b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f042 0201 	orr.w	r2, r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	@ 0x21
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2210      	movs	r2, #16
 80032d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	893a      	ldrh	r2, [r7, #8]
 80032e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a50      	ldr	r2, [pc, #320]	@ (8003438 <HAL_I2C_Master_Transmit+0x1f8>)
 80032f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032f8:	8979      	ldrh	r1, [r7, #10]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	6a3a      	ldr	r2, [r7, #32]
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f9ca 	bl	8003698 <I2C_MasterRequestWrite>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e08d      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800330e:	2300      	movs	r3, #0
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003324:	e066      	b.n	80033f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	6a39      	ldr	r1, [r7, #32]
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fb50 	bl	80039d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00d      	beq.n	8003352 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	2b04      	cmp	r3, #4
 800333c:	d107      	bne.n	800334e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e06b      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	781a      	ldrb	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800337a:	3b01      	subs	r3, #1
 800337c:	b29a      	uxth	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b04      	cmp	r3, #4
 800338e:	d11b      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x188>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003394:	2b00      	cmp	r3, #0
 8003396:	d017      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	1c5a      	adds	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	6a39      	ldr	r1, [r7, #32]
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 fb47 	bl	8003a60 <I2C_WaitOnBTFFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d00d      	beq.n	80033f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d107      	bne.n	80033f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e01a      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d194      	bne.n	8003326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	e000      	b.n	800342a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003428:	2302      	movs	r3, #2
  }
}
 800342a:	4618      	mov	r0, r3
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	00100002 	.word	0x00100002
 8003438:	ffff0000 	.word	0xffff0000

0800343c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	@ 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	607a      	str	r2, [r7, #4]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	460b      	mov	r3, r1
 800344a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800344c:	f7fe fc8a 	bl	8001d64 <HAL_GetTick>
 8003450:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	f040 8111 	bne.w	8003686 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2319      	movs	r3, #25
 800346a:	2201      	movs	r2, #1
 800346c:	4988      	ldr	r1, [pc, #544]	@ (8003690 <HAL_I2C_IsDeviceReady+0x254>)
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f994 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800347a:	2302      	movs	r3, #2
 800347c:	e104      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_I2C_IsDeviceReady+0x50>
 8003488:	2302      	movs	r3, #2
 800348a:	e0fd      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d007      	beq.n	80034b2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f042 0201 	orr.w	r2, r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2224      	movs	r2, #36	@ 0x24
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a70      	ldr	r2, [pc, #448]	@ (8003694 <HAL_I2C_IsDeviceReady+0x258>)
 80034d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034e4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 f952 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00d      	beq.n	800351a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800350c:	d103      	bne.n	8003516 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003514:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e0b6      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800351a:	897b      	ldrh	r3, [r7, #10]
 800351c:	b2db      	uxtb	r3, r3
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003528:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800352a:	f7fe fc1b 	bl	8001d64 <HAL_GetTick>
 800352e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b02      	cmp	r3, #2
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003554:	bf0c      	ite	eq
 8003556:	2301      	moveq	r3, #1
 8003558:	2300      	movne	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800355e:	e025      	b.n	80035ac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003560:	f7fe fc00 	bl	8001d64 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d302      	bcc.n	8003576 <HAL_I2C_IsDeviceReady+0x13a>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	22a0      	movs	r2, #160	@ 0xa0
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	bf0c      	ite	eq
 80035a4:	2301      	moveq	r3, #1
 80035a6:	2300      	movne	r3, #0
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80035b6:	d005      	beq.n	80035c4 <HAL_I2C_IsDeviceReady+0x188>
 80035b8:	7dfb      	ldrb	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d102      	bne.n	80035c4 <HAL_I2C_IsDeviceReady+0x188>
 80035be:	7dbb      	ldrb	r3, [r7, #22]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0cd      	beq.n	8003560 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d129      	bne.n	800362e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	699b      	ldr	r3, [r3, #24]
 80035fc:	613b      	str	r3, [r7, #16]
 80035fe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	9300      	str	r3, [sp, #0]
 8003604:	2319      	movs	r3, #25
 8003606:	2201      	movs	r2, #1
 8003608:	4921      	ldr	r1, [pc, #132]	@ (8003690 <HAL_I2C_IsDeviceReady+0x254>)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f8c6 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e036      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e02c      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003646:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	2319      	movs	r3, #25
 800364e:	2201      	movs	r2, #1
 8003650:	490f      	ldr	r1, [pc, #60]	@ (8003690 <HAL_I2C_IsDeviceReady+0x254>)
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 f8a2 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e012      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	3301      	adds	r3, #1
 8003666:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	f4ff af32 	bcc.w	80034d6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2220      	movs	r2, #32
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003686:	2302      	movs	r3, #2
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	00100002 	.word	0x00100002
 8003694:	ffff0000 	.word	0xffff0000

08003698 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af02      	add	r7, sp, #8
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	460b      	mov	r3, r1
 80036a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d006      	beq.n	80036c2 <I2C_MasterRequestWrite+0x2a>
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d003      	beq.n	80036c2 <I2C_MasterRequestWrite+0x2a>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80036c0:	d108      	bne.n	80036d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	e00b      	b.n	80036ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	2b12      	cmp	r3, #18
 80036da:	d107      	bne.n	80036ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f84f 	bl	800379c <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800370e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003712:	d103      	bne.n	800371c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800371a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e035      	b.n	800378c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003728:	d108      	bne.n	800373c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	461a      	mov	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003738:	611a      	str	r2, [r3, #16]
 800373a:	e01b      	b.n	8003774 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800373c:	897b      	ldrh	r3, [r7, #10]
 800373e:	11db      	asrs	r3, r3, #7
 8003740:	b2db      	uxtb	r3, r3
 8003742:	f003 0306 	and.w	r3, r3, #6
 8003746:	b2db      	uxtb	r3, r3
 8003748:	f063 030f 	orn	r3, r3, #15
 800374c:	b2da      	uxtb	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	490e      	ldr	r1, [pc, #56]	@ (8003794 <I2C_MasterRequestWrite+0xfc>)
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f898 	bl	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e010      	b.n	800378c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800376a:	897b      	ldrh	r3, [r7, #10]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4907      	ldr	r1, [pc, #28]	@ (8003798 <I2C_MasterRequestWrite+0x100>)
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f888 	bl	8003890 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	00010008 	.word	0x00010008
 8003798:	00010002 	.word	0x00010002

0800379c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037ac:	e048      	b.n	8003840 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d044      	beq.n	8003840 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fe fad5 	bl	8001d64 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d139      	bne.n	8003840 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	0c1b      	lsrs	r3, r3, #16
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10d      	bne.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	43da      	mvns	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	bf0c      	ite	eq
 80037e8:	2301      	moveq	r3, #1
 80037ea:	2300      	movne	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	461a      	mov	r2, r3
 80037f0:	e00c      	b.n	800380c <I2C_WaitOnFlagUntilTimeout+0x70>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	43da      	mvns	r2, r3
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	4013      	ands	r3, r2
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	461a      	mov	r2, r3
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	429a      	cmp	r2, r3
 8003810:	d116      	bne.n	8003840 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382c:	f043 0220 	orr.w	r2, r3, #32
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e023      	b.n	8003888 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	0c1b      	lsrs	r3, r3, #16
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b01      	cmp	r3, #1
 8003848:	d10d      	bne.n	8003866 <I2C_WaitOnFlagUntilTimeout+0xca>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	43da      	mvns	r2, r3
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4013      	ands	r3, r2
 8003856:	b29b      	uxth	r3, r3
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	e00c      	b.n	8003880 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	43da      	mvns	r2, r3
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	4013      	ands	r3, r2
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	bf0c      	ite	eq
 8003878:	2301      	moveq	r3, #1
 800387a:	2300      	movne	r3, #0
 800387c:	b2db      	uxtb	r3, r3
 800387e:	461a      	mov	r2, r3
 8003880:	79fb      	ldrb	r3, [r7, #7]
 8003882:	429a      	cmp	r2, r3
 8003884:	d093      	beq.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3710      	adds	r7, #16
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800389e:	e071      	b.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ae:	d123      	bne.n	80038f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e4:	f043 0204 	orr.w	r2, r3, #4
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e067      	b.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d041      	beq.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003900:	f7fe fa30 	bl	8001d64 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	429a      	cmp	r2, r3
 800390e:	d302      	bcc.n	8003916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d136      	bne.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	0c1b      	lsrs	r3, r3, #16
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b01      	cmp	r3, #1
 800391e:	d10c      	bne.n	800393a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	e00b      	b.n	8003952 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	43da      	mvns	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4013      	ands	r3, r2
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	bf14      	ite	ne
 800394c:	2301      	movne	r3, #1
 800394e:	2300      	moveq	r3, #0
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d016      	beq.n	8003984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f043 0220 	orr.w	r2, r3, #32
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e021      	b.n	80039c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	0c1b      	lsrs	r3, r3, #16
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b01      	cmp	r3, #1
 800398c:	d10c      	bne.n	80039a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	43da      	mvns	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4013      	ands	r3, r2
 800399a:	b29b      	uxth	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e00b      	b.n	80039c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	43da      	mvns	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	4013      	ands	r3, r2
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	bf14      	ite	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	2300      	moveq	r3, #0
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f47f af6d 	bne.w	80038a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039dc:	e034      	b.n	8003a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f000 f886 	bl	8003af0 <I2C_IsAcknowledgeFailed>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e034      	b.n	8003a58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f4:	d028      	beq.n	8003a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f6:	f7fe f9b5 	bl	8001d64 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d302      	bcc.n	8003a0c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d11d      	bne.n	8003a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a16:	2b80      	cmp	r3, #128	@ 0x80
 8003a18:	d016      	beq.n	8003a48 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f043 0220 	orr.w	r2, r3, #32
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e007      	b.n	8003a58 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b80      	cmp	r3, #128	@ 0x80
 8003a54:	d1c3      	bne.n	80039de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3710      	adds	r7, #16
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a6c:	e034      	b.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f83e 	bl	8003af0 <I2C_IsAcknowledgeFailed>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e034      	b.n	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d028      	beq.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a86:	f7fe f96d 	bl	8001d64 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d302      	bcc.n	8003a9c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d11d      	bne.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d016      	beq.n	8003ad8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e007      	b.n	8003ae8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d1c3      	bne.n	8003a6e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ae6:	2300      	movs	r3, #0
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b06:	d11b      	bne.n	8003b40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b2c:	f043 0204 	orr.w	r2, r3, #4
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	370c      	adds	r7, #12
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bc80      	pop	{r7}
 8003b4a:	4770      	bx	lr

08003b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e272      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 8087 	beq.w	8003c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b6c:	4b92      	ldr	r3, [pc, #584]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 030c 	and.w	r3, r3, #12
 8003b74:	2b04      	cmp	r3, #4
 8003b76:	d00c      	beq.n	8003b92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b78:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 030c 	and.w	r3, r3, #12
 8003b80:	2b08      	cmp	r3, #8
 8003b82:	d112      	bne.n	8003baa <HAL_RCC_OscConfig+0x5e>
 8003b84:	4b8c      	ldr	r3, [pc, #560]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b90:	d10b      	bne.n	8003baa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b92:	4b89      	ldr	r3, [pc, #548]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d06c      	beq.n	8003c78 <HAL_RCC_OscConfig+0x12c>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d168      	bne.n	8003c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e24c      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bb2:	d106      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x76>
 8003bb4:	4b80      	ldr	r3, [pc, #512]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a7f      	ldr	r2, [pc, #508]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	e02e      	b.n	8003c20 <HAL_RCC_OscConfig+0xd4>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d10c      	bne.n	8003be4 <HAL_RCC_OscConfig+0x98>
 8003bca:	4b7b      	ldr	r3, [pc, #492]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a7a      	ldr	r2, [pc, #488]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bd4:	6013      	str	r3, [r2, #0]
 8003bd6:	4b78      	ldr	r3, [pc, #480]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a77      	ldr	r2, [pc, #476]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003be0:	6013      	str	r3, [r2, #0]
 8003be2:	e01d      	b.n	8003c20 <HAL_RCC_OscConfig+0xd4>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bec:	d10c      	bne.n	8003c08 <HAL_RCC_OscConfig+0xbc>
 8003bee:	4b72      	ldr	r3, [pc, #456]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a71      	ldr	r2, [pc, #452]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a6e      	ldr	r2, [pc, #440]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	e00b      	b.n	8003c20 <HAL_RCC_OscConfig+0xd4>
 8003c08:	4b6b      	ldr	r3, [pc, #428]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6a      	ldr	r2, [pc, #424]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b68      	ldr	r3, [pc, #416]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a67      	ldr	r2, [pc, #412]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d013      	beq.n	8003c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c28:	f7fe f89c 	bl	8001d64 <HAL_GetTick>
 8003c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c30:	f7fe f898 	bl	8001d64 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	@ 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e200      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c42:	4b5d      	ldr	r3, [pc, #372]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCC_OscConfig+0xe4>
 8003c4e:	e014      	b.n	8003c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c50:	f7fe f888 	bl	8001d64 <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c58:	f7fe f884 	bl	8001d64 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b64      	cmp	r3, #100	@ 0x64
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e1ec      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6a:	4b53      	ldr	r3, [pc, #332]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x10c>
 8003c76:	e000      	b.n	8003c7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d063      	beq.n	8003d4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c86:	4b4c      	ldr	r3, [pc, #304]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f003 030c 	and.w	r3, r3, #12
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c92:	4b49      	ldr	r3, [pc, #292]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	f003 030c 	and.w	r3, r3, #12
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d11c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x18c>
 8003c9e:	4b46      	ldr	r3, [pc, #280]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d116      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	4b43      	ldr	r3, [pc, #268]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d005      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x176>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e1c0      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	00db      	lsls	r3, r3, #3
 8003cd0:	4939      	ldr	r1, [pc, #228]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd6:	e03a      	b.n	8003d4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d020      	beq.n	8003d22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce0:	4b36      	ldr	r3, [pc, #216]	@ (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce6:	f7fe f83d 	bl	8001d64 <HAL_GetTick>
 8003cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cec:	e008      	b.n	8003d00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cee:	f7fe f839 	bl	8001d64 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e1a1      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d00:	4b2d      	ldr	r3, [pc, #180]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4927      	ldr	r1, [pc, #156]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	600b      	str	r3, [r1, #0]
 8003d20:	e015      	b.n	8003d4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d22:	4b26      	ldr	r3, [pc, #152]	@ (8003dbc <HAL_RCC_OscConfig+0x270>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fe f81c 	bl	8001d64 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fe f818 	bl	8001d64 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e180      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d42:	4b1d      	ldr	r3, [pc, #116]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1f0      	bne.n	8003d30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0308 	and.w	r3, r3, #8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d03a      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d019      	beq.n	8003d96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d62:	4b17      	ldr	r3, [pc, #92]	@ (8003dc0 <HAL_RCC_OscConfig+0x274>)
 8003d64:	2201      	movs	r2, #1
 8003d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d68:	f7fd fffc 	bl	8001d64 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d70:	f7fd fff8 	bl	8001d64 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e160      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d82:	4b0d      	ldr	r3, [pc, #52]	@ (8003db8 <HAL_RCC_OscConfig+0x26c>)
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d8e:	2001      	movs	r0, #1
 8003d90:	f000 faba 	bl	8004308 <RCC_Delay>
 8003d94:	e01c      	b.n	8003dd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d96:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc0 <HAL_RCC_OscConfig+0x274>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d9c:	f7fd ffe2 	bl	8001d64 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da2:	e00f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003da4:	f7fd ffde 	bl	8001d64 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d908      	bls.n	8003dc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e146      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	42420000 	.word	0x42420000
 8003dc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dc4:	4b92      	ldr	r3, [pc, #584]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e9      	bne.n	8003da4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0304 	and.w	r3, r3, #4
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a6 	beq.w	8003f2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de2:	4b8b      	ldr	r3, [pc, #556]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10d      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dee:	4b88      	ldr	r3, [pc, #544]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	4a87      	ldr	r2, [pc, #540]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df8:	61d3      	str	r3, [r2, #28]
 8003dfa:	4b85      	ldr	r3, [pc, #532]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e02:	60bb      	str	r3, [r7, #8]
 8003e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b82      	ldr	r3, [pc, #520]	@ (8004014 <HAL_RCC_OscConfig+0x4c8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d118      	bne.n	8003e48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e16:	4b7f      	ldr	r3, [pc, #508]	@ (8004014 <HAL_RCC_OscConfig+0x4c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8004014 <HAL_RCC_OscConfig+0x4c8>)
 8003e1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e22:	f7fd ff9f 	bl	8001d64 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2a:	f7fd ff9b 	bl	8001d64 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b64      	cmp	r3, #100	@ 0x64
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e103      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3c:	4b75      	ldr	r3, [pc, #468]	@ (8004014 <HAL_RCC_OscConfig+0x4c8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d106      	bne.n	8003e5e <HAL_RCC_OscConfig+0x312>
 8003e50:	4b6f      	ldr	r3, [pc, #444]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	4a6e      	ldr	r2, [pc, #440]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e56:	f043 0301 	orr.w	r3, r3, #1
 8003e5a:	6213      	str	r3, [r2, #32]
 8003e5c:	e02d      	b.n	8003eba <HAL_RCC_OscConfig+0x36e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10c      	bne.n	8003e80 <HAL_RCC_OscConfig+0x334>
 8003e66:	4b6a      	ldr	r3, [pc, #424]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	4a69      	ldr	r2, [pc, #420]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6213      	str	r3, [r2, #32]
 8003e72:	4b67      	ldr	r3, [pc, #412]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	4a66      	ldr	r2, [pc, #408]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e78:	f023 0304 	bic.w	r3, r3, #4
 8003e7c:	6213      	str	r3, [r2, #32]
 8003e7e:	e01c      	b.n	8003eba <HAL_RCC_OscConfig+0x36e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	2b05      	cmp	r3, #5
 8003e86:	d10c      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x356>
 8003e88:	4b61      	ldr	r3, [pc, #388]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	4a60      	ldr	r2, [pc, #384]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e8e:	f043 0304 	orr.w	r3, r3, #4
 8003e92:	6213      	str	r3, [r2, #32]
 8003e94:	4b5e      	ldr	r3, [pc, #376]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	4a5d      	ldr	r2, [pc, #372]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	f043 0301 	orr.w	r3, r3, #1
 8003e9e:	6213      	str	r3, [r2, #32]
 8003ea0:	e00b      	b.n	8003eba <HAL_RCC_OscConfig+0x36e>
 8003ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4a5a      	ldr	r2, [pc, #360]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6213      	str	r3, [r2, #32]
 8003eae:	4b58      	ldr	r3, [pc, #352]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	4a57      	ldr	r2, [pc, #348]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003eb4:	f023 0304 	bic.w	r3, r3, #4
 8003eb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d015      	beq.n	8003eee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec2:	f7fd ff4f 	bl	8001d64 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec8:	e00a      	b.n	8003ee0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eca:	f7fd ff4b 	bl	8001d64 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0b1      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	4b4b      	ldr	r3, [pc, #300]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ee      	beq.n	8003eca <HAL_RCC_OscConfig+0x37e>
 8003eec:	e014      	b.n	8003f18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eee:	f7fd ff39 	bl	8001d64 <HAL_GetTick>
 8003ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ef4:	e00a      	b.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ef6:	f7fd ff35 	bl	8001d64 <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e09b      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	4b40      	ldr	r3, [pc, #256]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1ee      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f18:	7dfb      	ldrb	r3, [r7, #23]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d105      	bne.n	8003f2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1e:	4b3c      	ldr	r3, [pc, #240]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	4a3b      	ldr	r2, [pc, #236]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 8087 	beq.w	8004042 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f34:	4b36      	ldr	r3, [pc, #216]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f003 030c 	and.w	r3, r3, #12
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d061      	beq.n	8004004 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d146      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	4b33      	ldr	r3, [pc, #204]	@ (8004018 <HAL_RCC_OscConfig+0x4cc>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4e:	f7fd ff09 	bl	8001d64 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f54:	e008      	b.n	8003f68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f56:	f7fd ff05 	bl	8001d64 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e06d      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f68:	4b29      	ldr	r3, [pc, #164]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1f0      	bne.n	8003f56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7c:	d108      	bne.n	8003f90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f7e:	4b24      	ldr	r3, [pc, #144]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4921      	ldr	r1, [pc, #132]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f90:	4b1f      	ldr	r3, [pc, #124]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a19      	ldr	r1, [r3, #32]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	491b      	ldr	r1, [pc, #108]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004018 <HAL_RCC_OscConfig+0x4cc>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fae:	f7fd fed9 	bl	8001d64 <HAL_GetTick>
 8003fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fb4:	e008      	b.n	8003fc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fb6:	f7fd fed5 	bl	8001d64 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e03d      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fc8:	4b11      	ldr	r3, [pc, #68]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d0f0      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x46a>
 8003fd4:	e035      	b.n	8004042 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd6:	4b10      	ldr	r3, [pc, #64]	@ (8004018 <HAL_RCC_OscConfig+0x4cc>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fdc:	f7fd fec2 	bl	8001d64 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe2:	e008      	b.n	8003ff6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fe4:	f7fd febe 	bl	8001d64 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d901      	bls.n	8003ff6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e026      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ff6:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <HAL_RCC_OscConfig+0x4c4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f0      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x498>
 8004002:	e01e      	b.n	8004042 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d107      	bne.n	800401c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e019      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
 8004010:	40021000 	.word	0x40021000
 8004014:	40007000 	.word	0x40007000
 8004018:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800401c:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_OscConfig+0x500>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	429a      	cmp	r2, r3
 800402e:	d106      	bne.n	800403e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	429a      	cmp	r2, r3
 800403c:	d001      	beq.n	8004042 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e000      	b.n	8004044 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3718      	adds	r7, #24
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}
 800404c:	40021000 	.word	0x40021000

08004050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0d0      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004064:	4b6a      	ldr	r3, [pc, #424]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d910      	bls.n	8004094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004072:	4b67      	ldr	r3, [pc, #412]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f023 0207 	bic.w	r2, r3, #7
 800407a:	4965      	ldr	r1, [pc, #404]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	4313      	orrs	r3, r2
 8004080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004082:	4b63      	ldr	r3, [pc, #396]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0307 	and.w	r3, r3, #7
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0b8      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040ac:	4b59      	ldr	r3, [pc, #356]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a58      	ldr	r2, [pc, #352]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80040b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c4:	4b53      	ldr	r3, [pc, #332]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a52      	ldr	r2, [pc, #328]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80040ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d0:	4b50      	ldr	r3, [pc, #320]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	494d      	ldr	r1, [pc, #308]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d040      	beq.n	8004170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d107      	bne.n	8004106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f6:	4b47      	ldr	r3, [pc, #284]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d115      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e07f      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b02      	cmp	r3, #2
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800410e:	4b41      	ldr	r3, [pc, #260]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d109      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e073      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411e:	4b3d      	ldr	r3, [pc, #244]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e06b      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800412e:	4b39      	ldr	r3, [pc, #228]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f023 0203 	bic.w	r2, r3, #3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	4936      	ldr	r1, [pc, #216]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004140:	f7fd fe10 	bl	8001d64 <HAL_GetTick>
 8004144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004146:	e00a      	b.n	800415e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004148:	f7fd fe0c 	bl	8001d64 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e053      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	4b2d      	ldr	r3, [pc, #180]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 020c 	and.w	r2, r3, #12
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	429a      	cmp	r2, r3
 800416e:	d1eb      	bne.n	8004148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004170:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0307 	and.w	r3, r3, #7
 8004178:	683a      	ldr	r2, [r7, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d210      	bcs.n	80041a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417e:	4b24      	ldr	r3, [pc, #144]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f023 0207 	bic.w	r2, r3, #7
 8004186:	4922      	ldr	r1, [pc, #136]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	4313      	orrs	r3, r2
 800418c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800418e:	4b20      	ldr	r3, [pc, #128]	@ (8004210 <HAL_RCC_ClockConfig+0x1c0>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e032      	b.n	8004206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d008      	beq.n	80041be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041ac:	4b19      	ldr	r3, [pc, #100]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	4916      	ldr	r1, [pc, #88]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d009      	beq.n	80041de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041ca:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	490e      	ldr	r1, [pc, #56]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041de:	f000 f821 	bl	8004224 <HAL_RCC_GetSysClockFreq>
 80041e2:	4602      	mov	r2, r0
 80041e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004214 <HAL_RCC_ClockConfig+0x1c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	091b      	lsrs	r3, r3, #4
 80041ea:	f003 030f 	and.w	r3, r3, #15
 80041ee:	490a      	ldr	r1, [pc, #40]	@ (8004218 <HAL_RCC_ClockConfig+0x1c8>)
 80041f0:	5ccb      	ldrb	r3, [r1, r3]
 80041f2:	fa22 f303 	lsr.w	r3, r2, r3
 80041f6:	4a09      	ldr	r2, [pc, #36]	@ (800421c <HAL_RCC_ClockConfig+0x1cc>)
 80041f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80041fa:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <HAL_RCC_ClockConfig+0x1d0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fd fd6e 	bl	8001ce0 <HAL_InitTick>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40022000 	.word	0x40022000
 8004214:	40021000 	.word	0x40021000
 8004218:	08005a50 	.word	0x08005a50
 800421c:	20000008 	.word	0x20000008
 8004220:	2000000c 	.word	0x2000000c

08004224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004224:	b480      	push	{r7}
 8004226:	b087      	sub	sp, #28
 8004228:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	2300      	movs	r3, #0
 8004234:	617b      	str	r3, [r7, #20]
 8004236:	2300      	movs	r3, #0
 8004238:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800423e:	4b1e      	ldr	r3, [pc, #120]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f003 030c 	and.w	r3, r3, #12
 800424a:	2b04      	cmp	r3, #4
 800424c:	d002      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0x30>
 800424e:	2b08      	cmp	r3, #8
 8004250:	d003      	beq.n	800425a <HAL_RCC_GetSysClockFreq+0x36>
 8004252:	e027      	b.n	80042a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004254:	4b19      	ldr	r3, [pc, #100]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004256:	613b      	str	r3, [r7, #16]
      break;
 8004258:	e027      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	0c9b      	lsrs	r3, r3, #18
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	4a17      	ldr	r2, [pc, #92]	@ (80042c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004264:	5cd3      	ldrb	r3, [r2, r3]
 8004266:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d010      	beq.n	8004294 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	0c5b      	lsrs	r3, r3, #17
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	4a11      	ldr	r2, [pc, #68]	@ (80042c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800427e:	5cd3      	ldrb	r3, [r2, r3]
 8004280:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a0d      	ldr	r2, [pc, #52]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x98>)
 8004286:	fb03 f202 	mul.w	r2, r3, r2
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	e004      	b.n	800429e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a0c      	ldr	r2, [pc, #48]	@ (80042c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004298:	fb02 f303 	mul.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	613b      	str	r3, [r7, #16]
      break;
 80042a2:	e002      	b.n	80042aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <HAL_RCC_GetSysClockFreq+0x98>)
 80042a6:	613b      	str	r3, [r7, #16]
      break;
 80042a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042aa:	693b      	ldr	r3, [r7, #16]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	371c      	adds	r7, #28
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40021000 	.word	0x40021000
 80042bc:	007a1200 	.word	0x007a1200
 80042c0:	08005a68 	.word	0x08005a68
 80042c4:	08005a78 	.word	0x08005a78
 80042c8:	003d0900 	.word	0x003d0900

080042cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042cc:	b480      	push	{r7}
 80042ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042d0:	4b02      	ldr	r3, [pc, #8]	@ (80042dc <HAL_RCC_GetHCLKFreq+0x10>)
 80042d2:	681b      	ldr	r3, [r3, #0]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	20000008 	.word	0x20000008

080042e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042e4:	f7ff fff2 	bl	80042cc <HAL_RCC_GetHCLKFreq>
 80042e8:	4602      	mov	r2, r0
 80042ea:	4b05      	ldr	r3, [pc, #20]	@ (8004300 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	0a1b      	lsrs	r3, r3, #8
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	4903      	ldr	r1, [pc, #12]	@ (8004304 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042f6:	5ccb      	ldrb	r3, [r1, r3]
 80042f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	40021000 	.word	0x40021000
 8004304:	08005a60 	.word	0x08005a60

08004308 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <RCC_Delay+0x34>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0a      	ldr	r2, [pc, #40]	@ (8004340 <RCC_Delay+0x38>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	0a5b      	lsrs	r3, r3, #9
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004324:	bf00      	nop
  }
  while (Delay --);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	1e5a      	subs	r2, r3, #1
 800432a:	60fa      	str	r2, [r7, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f9      	bne.n	8004324 <RCC_Delay+0x1c>
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	bc80      	pop	{r7}
 800433a:	4770      	bx	lr
 800433c:	20000008 	.word	0x20000008
 8004340:	10624dd3 	.word	0x10624dd3

08004344 <siprintf>:
 8004344:	b40e      	push	{r1, r2, r3}
 8004346:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800434a:	b510      	push	{r4, lr}
 800434c:	2400      	movs	r4, #0
 800434e:	b09d      	sub	sp, #116	@ 0x74
 8004350:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004352:	9002      	str	r0, [sp, #8]
 8004354:	9006      	str	r0, [sp, #24]
 8004356:	9107      	str	r1, [sp, #28]
 8004358:	9104      	str	r1, [sp, #16]
 800435a:	4809      	ldr	r0, [pc, #36]	@ (8004380 <siprintf+0x3c>)
 800435c:	4909      	ldr	r1, [pc, #36]	@ (8004384 <siprintf+0x40>)
 800435e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004362:	9105      	str	r1, [sp, #20]
 8004364:	6800      	ldr	r0, [r0, #0]
 8004366:	a902      	add	r1, sp, #8
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800436c:	f000 f992 	bl	8004694 <_svfiprintf_r>
 8004370:	9b02      	ldr	r3, [sp, #8]
 8004372:	701c      	strb	r4, [r3, #0]
 8004374:	b01d      	add	sp, #116	@ 0x74
 8004376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800437a:	b003      	add	sp, #12
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000014 	.word	0x20000014
 8004384:	ffff0208 	.word	0xffff0208

08004388 <memset>:
 8004388:	4603      	mov	r3, r0
 800438a:	4402      	add	r2, r0
 800438c:	4293      	cmp	r3, r2
 800438e:	d100      	bne.n	8004392 <memset+0xa>
 8004390:	4770      	bx	lr
 8004392:	f803 1b01 	strb.w	r1, [r3], #1
 8004396:	e7f9      	b.n	800438c <memset+0x4>

08004398 <__errno>:
 8004398:	4b01      	ldr	r3, [pc, #4]	@ (80043a0 <__errno+0x8>)
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	20000014 	.word	0x20000014

080043a4 <__libc_init_array>:
 80043a4:	b570      	push	{r4, r5, r6, lr}
 80043a6:	2600      	movs	r6, #0
 80043a8:	4d0c      	ldr	r5, [pc, #48]	@ (80043dc <__libc_init_array+0x38>)
 80043aa:	4c0d      	ldr	r4, [pc, #52]	@ (80043e0 <__libc_init_array+0x3c>)
 80043ac:	1b64      	subs	r4, r4, r5
 80043ae:	10a4      	asrs	r4, r4, #2
 80043b0:	42a6      	cmp	r6, r4
 80043b2:	d109      	bne.n	80043c8 <__libc_init_array+0x24>
 80043b4:	f000 fc76 	bl	8004ca4 <_init>
 80043b8:	2600      	movs	r6, #0
 80043ba:	4d0a      	ldr	r5, [pc, #40]	@ (80043e4 <__libc_init_array+0x40>)
 80043bc:	4c0a      	ldr	r4, [pc, #40]	@ (80043e8 <__libc_init_array+0x44>)
 80043be:	1b64      	subs	r4, r4, r5
 80043c0:	10a4      	asrs	r4, r4, #2
 80043c2:	42a6      	cmp	r6, r4
 80043c4:	d105      	bne.n	80043d2 <__libc_init_array+0x2e>
 80043c6:	bd70      	pop	{r4, r5, r6, pc}
 80043c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80043cc:	4798      	blx	r3
 80043ce:	3601      	adds	r6, #1
 80043d0:	e7ee      	b.n	80043b0 <__libc_init_array+0xc>
 80043d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d6:	4798      	blx	r3
 80043d8:	3601      	adds	r6, #1
 80043da:	e7f2      	b.n	80043c2 <__libc_init_array+0x1e>
 80043dc:	08005ab0 	.word	0x08005ab0
 80043e0:	08005ab0 	.word	0x08005ab0
 80043e4:	08005ab0 	.word	0x08005ab0
 80043e8:	08005ab4 	.word	0x08005ab4

080043ec <__retarget_lock_acquire_recursive>:
 80043ec:	4770      	bx	lr

080043ee <__retarget_lock_release_recursive>:
 80043ee:	4770      	bx	lr

080043f0 <_free_r>:
 80043f0:	b538      	push	{r3, r4, r5, lr}
 80043f2:	4605      	mov	r5, r0
 80043f4:	2900      	cmp	r1, #0
 80043f6:	d040      	beq.n	800447a <_free_r+0x8a>
 80043f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043fc:	1f0c      	subs	r4, r1, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bfb8      	it	lt
 8004402:	18e4      	addlt	r4, r4, r3
 8004404:	f000 f8de 	bl	80045c4 <__malloc_lock>
 8004408:	4a1c      	ldr	r2, [pc, #112]	@ (800447c <_free_r+0x8c>)
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	b933      	cbnz	r3, 800441c <_free_r+0x2c>
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6014      	str	r4, [r2, #0]
 8004412:	4628      	mov	r0, r5
 8004414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004418:	f000 b8da 	b.w	80045d0 <__malloc_unlock>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d908      	bls.n	8004432 <_free_r+0x42>
 8004420:	6820      	ldr	r0, [r4, #0]
 8004422:	1821      	adds	r1, r4, r0
 8004424:	428b      	cmp	r3, r1
 8004426:	bf01      	itttt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	1809      	addeq	r1, r1, r0
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	e7ed      	b.n	800440e <_free_r+0x1e>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x4c>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x42>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1850      	adds	r0, r2, r1
 8004440:	42a0      	cmp	r0, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x6c>
 8004444:	6820      	ldr	r0, [r4, #0]
 8004446:	4401      	add	r1, r0
 8004448:	1850      	adds	r0, r2, r1
 800444a:	4283      	cmp	r3, r0
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1e0      	bne.n	8004412 <_free_r+0x22>
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	4408      	add	r0, r1
 8004456:	6010      	str	r0, [r2, #0]
 8004458:	6053      	str	r3, [r2, #4]
 800445a:	e7da      	b.n	8004412 <_free_r+0x22>
 800445c:	d902      	bls.n	8004464 <_free_r+0x74>
 800445e:	230c      	movs	r3, #12
 8004460:	602b      	str	r3, [r5, #0]
 8004462:	e7d6      	b.n	8004412 <_free_r+0x22>
 8004464:	6820      	ldr	r0, [r4, #0]
 8004466:	1821      	adds	r1, r4, r0
 8004468:	428b      	cmp	r3, r1
 800446a:	bf01      	itttt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	1809      	addeq	r1, r1, r0
 8004472:	6021      	streq	r1, [r4, #0]
 8004474:	6063      	str	r3, [r4, #4]
 8004476:	6054      	str	r4, [r2, #4]
 8004478:	e7cb      	b.n	8004412 <_free_r+0x22>
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200006c8 	.word	0x200006c8

08004480 <sbrk_aligned>:
 8004480:	b570      	push	{r4, r5, r6, lr}
 8004482:	4e0f      	ldr	r6, [pc, #60]	@ (80044c0 <sbrk_aligned+0x40>)
 8004484:	460c      	mov	r4, r1
 8004486:	6831      	ldr	r1, [r6, #0]
 8004488:	4605      	mov	r5, r0
 800448a:	b911      	cbnz	r1, 8004492 <sbrk_aligned+0x12>
 800448c:	f000 fba8 	bl	8004be0 <_sbrk_r>
 8004490:	6030      	str	r0, [r6, #0]
 8004492:	4621      	mov	r1, r4
 8004494:	4628      	mov	r0, r5
 8004496:	f000 fba3 	bl	8004be0 <_sbrk_r>
 800449a:	1c43      	adds	r3, r0, #1
 800449c:	d103      	bne.n	80044a6 <sbrk_aligned+0x26>
 800449e:	f04f 34ff 	mov.w	r4, #4294967295
 80044a2:	4620      	mov	r0, r4
 80044a4:	bd70      	pop	{r4, r5, r6, pc}
 80044a6:	1cc4      	adds	r4, r0, #3
 80044a8:	f024 0403 	bic.w	r4, r4, #3
 80044ac:	42a0      	cmp	r0, r4
 80044ae:	d0f8      	beq.n	80044a2 <sbrk_aligned+0x22>
 80044b0:	1a21      	subs	r1, r4, r0
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 fb94 	bl	8004be0 <_sbrk_r>
 80044b8:	3001      	adds	r0, #1
 80044ba:	d1f2      	bne.n	80044a2 <sbrk_aligned+0x22>
 80044bc:	e7ef      	b.n	800449e <sbrk_aligned+0x1e>
 80044be:	bf00      	nop
 80044c0:	200006c4 	.word	0x200006c4

080044c4 <_malloc_r>:
 80044c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044c8:	1ccd      	adds	r5, r1, #3
 80044ca:	f025 0503 	bic.w	r5, r5, #3
 80044ce:	3508      	adds	r5, #8
 80044d0:	2d0c      	cmp	r5, #12
 80044d2:	bf38      	it	cc
 80044d4:	250c      	movcc	r5, #12
 80044d6:	2d00      	cmp	r5, #0
 80044d8:	4606      	mov	r6, r0
 80044da:	db01      	blt.n	80044e0 <_malloc_r+0x1c>
 80044dc:	42a9      	cmp	r1, r5
 80044de:	d904      	bls.n	80044ea <_malloc_r+0x26>
 80044e0:	230c      	movs	r3, #12
 80044e2:	6033      	str	r3, [r6, #0]
 80044e4:	2000      	movs	r0, #0
 80044e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80045c0 <_malloc_r+0xfc>
 80044ee:	f000 f869 	bl	80045c4 <__malloc_lock>
 80044f2:	f8d8 3000 	ldr.w	r3, [r8]
 80044f6:	461c      	mov	r4, r3
 80044f8:	bb44      	cbnz	r4, 800454c <_malloc_r+0x88>
 80044fa:	4629      	mov	r1, r5
 80044fc:	4630      	mov	r0, r6
 80044fe:	f7ff ffbf 	bl	8004480 <sbrk_aligned>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	4604      	mov	r4, r0
 8004506:	d158      	bne.n	80045ba <_malloc_r+0xf6>
 8004508:	f8d8 4000 	ldr.w	r4, [r8]
 800450c:	4627      	mov	r7, r4
 800450e:	2f00      	cmp	r7, #0
 8004510:	d143      	bne.n	800459a <_malloc_r+0xd6>
 8004512:	2c00      	cmp	r4, #0
 8004514:	d04b      	beq.n	80045ae <_malloc_r+0xea>
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	4639      	mov	r1, r7
 800451a:	4630      	mov	r0, r6
 800451c:	eb04 0903 	add.w	r9, r4, r3
 8004520:	f000 fb5e 	bl	8004be0 <_sbrk_r>
 8004524:	4581      	cmp	r9, r0
 8004526:	d142      	bne.n	80045ae <_malloc_r+0xea>
 8004528:	6821      	ldr	r1, [r4, #0]
 800452a:	4630      	mov	r0, r6
 800452c:	1a6d      	subs	r5, r5, r1
 800452e:	4629      	mov	r1, r5
 8004530:	f7ff ffa6 	bl	8004480 <sbrk_aligned>
 8004534:	3001      	adds	r0, #1
 8004536:	d03a      	beq.n	80045ae <_malloc_r+0xea>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	442b      	add	r3, r5
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	f8d8 3000 	ldr.w	r3, [r8]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	bb62      	cbnz	r2, 80045a0 <_malloc_r+0xdc>
 8004546:	f8c8 7000 	str.w	r7, [r8]
 800454a:	e00f      	b.n	800456c <_malloc_r+0xa8>
 800454c:	6822      	ldr	r2, [r4, #0]
 800454e:	1b52      	subs	r2, r2, r5
 8004550:	d420      	bmi.n	8004594 <_malloc_r+0xd0>
 8004552:	2a0b      	cmp	r2, #11
 8004554:	d917      	bls.n	8004586 <_malloc_r+0xc2>
 8004556:	1961      	adds	r1, r4, r5
 8004558:	42a3      	cmp	r3, r4
 800455a:	6025      	str	r5, [r4, #0]
 800455c:	bf18      	it	ne
 800455e:	6059      	strne	r1, [r3, #4]
 8004560:	6863      	ldr	r3, [r4, #4]
 8004562:	bf08      	it	eq
 8004564:	f8c8 1000 	streq.w	r1, [r8]
 8004568:	5162      	str	r2, [r4, r5]
 800456a:	604b      	str	r3, [r1, #4]
 800456c:	4630      	mov	r0, r6
 800456e:	f000 f82f 	bl	80045d0 <__malloc_unlock>
 8004572:	f104 000b 	add.w	r0, r4, #11
 8004576:	1d23      	adds	r3, r4, #4
 8004578:	f020 0007 	bic.w	r0, r0, #7
 800457c:	1ac2      	subs	r2, r0, r3
 800457e:	bf1c      	itt	ne
 8004580:	1a1b      	subne	r3, r3, r0
 8004582:	50a3      	strne	r3, [r4, r2]
 8004584:	e7af      	b.n	80044e6 <_malloc_r+0x22>
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	42a3      	cmp	r3, r4
 800458a:	bf0c      	ite	eq
 800458c:	f8c8 2000 	streq.w	r2, [r8]
 8004590:	605a      	strne	r2, [r3, #4]
 8004592:	e7eb      	b.n	800456c <_malloc_r+0xa8>
 8004594:	4623      	mov	r3, r4
 8004596:	6864      	ldr	r4, [r4, #4]
 8004598:	e7ae      	b.n	80044f8 <_malloc_r+0x34>
 800459a:	463c      	mov	r4, r7
 800459c:	687f      	ldr	r7, [r7, #4]
 800459e:	e7b6      	b.n	800450e <_malloc_r+0x4a>
 80045a0:	461a      	mov	r2, r3
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	42a3      	cmp	r3, r4
 80045a6:	d1fb      	bne.n	80045a0 <_malloc_r+0xdc>
 80045a8:	2300      	movs	r3, #0
 80045aa:	6053      	str	r3, [r2, #4]
 80045ac:	e7de      	b.n	800456c <_malloc_r+0xa8>
 80045ae:	230c      	movs	r3, #12
 80045b0:	4630      	mov	r0, r6
 80045b2:	6033      	str	r3, [r6, #0]
 80045b4:	f000 f80c 	bl	80045d0 <__malloc_unlock>
 80045b8:	e794      	b.n	80044e4 <_malloc_r+0x20>
 80045ba:	6005      	str	r5, [r0, #0]
 80045bc:	e7d6      	b.n	800456c <_malloc_r+0xa8>
 80045be:	bf00      	nop
 80045c0:	200006c8 	.word	0x200006c8

080045c4 <__malloc_lock>:
 80045c4:	4801      	ldr	r0, [pc, #4]	@ (80045cc <__malloc_lock+0x8>)
 80045c6:	f7ff bf11 	b.w	80043ec <__retarget_lock_acquire_recursive>
 80045ca:	bf00      	nop
 80045cc:	200006c0 	.word	0x200006c0

080045d0 <__malloc_unlock>:
 80045d0:	4801      	ldr	r0, [pc, #4]	@ (80045d8 <__malloc_unlock+0x8>)
 80045d2:	f7ff bf0c 	b.w	80043ee <__retarget_lock_release_recursive>
 80045d6:	bf00      	nop
 80045d8:	200006c0 	.word	0x200006c0

080045dc <__ssputs_r>:
 80045dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045e0:	461f      	mov	r7, r3
 80045e2:	688e      	ldr	r6, [r1, #8]
 80045e4:	4682      	mov	sl, r0
 80045e6:	42be      	cmp	r6, r7
 80045e8:	460c      	mov	r4, r1
 80045ea:	4690      	mov	r8, r2
 80045ec:	680b      	ldr	r3, [r1, #0]
 80045ee:	d82d      	bhi.n	800464c <__ssputs_r+0x70>
 80045f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80045f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80045f8:	d026      	beq.n	8004648 <__ssputs_r+0x6c>
 80045fa:	6965      	ldr	r5, [r4, #20]
 80045fc:	6909      	ldr	r1, [r1, #16]
 80045fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004602:	eba3 0901 	sub.w	r9, r3, r1
 8004606:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800460a:	1c7b      	adds	r3, r7, #1
 800460c:	444b      	add	r3, r9
 800460e:	106d      	asrs	r5, r5, #1
 8004610:	429d      	cmp	r5, r3
 8004612:	bf38      	it	cc
 8004614:	461d      	movcc	r5, r3
 8004616:	0553      	lsls	r3, r2, #21
 8004618:	d527      	bpl.n	800466a <__ssputs_r+0x8e>
 800461a:	4629      	mov	r1, r5
 800461c:	f7ff ff52 	bl	80044c4 <_malloc_r>
 8004620:	4606      	mov	r6, r0
 8004622:	b360      	cbz	r0, 800467e <__ssputs_r+0xa2>
 8004624:	464a      	mov	r2, r9
 8004626:	6921      	ldr	r1, [r4, #16]
 8004628:	f000 faf8 	bl	8004c1c <memcpy>
 800462c:	89a3      	ldrh	r3, [r4, #12]
 800462e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004636:	81a3      	strh	r3, [r4, #12]
 8004638:	6126      	str	r6, [r4, #16]
 800463a:	444e      	add	r6, r9
 800463c:	6026      	str	r6, [r4, #0]
 800463e:	463e      	mov	r6, r7
 8004640:	6165      	str	r5, [r4, #20]
 8004642:	eba5 0509 	sub.w	r5, r5, r9
 8004646:	60a5      	str	r5, [r4, #8]
 8004648:	42be      	cmp	r6, r7
 800464a:	d900      	bls.n	800464e <__ssputs_r+0x72>
 800464c:	463e      	mov	r6, r7
 800464e:	4632      	mov	r2, r6
 8004650:	4641      	mov	r1, r8
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	f000 faaa 	bl	8004bac <memmove>
 8004658:	2000      	movs	r0, #0
 800465a:	68a3      	ldr	r3, [r4, #8]
 800465c:	1b9b      	subs	r3, r3, r6
 800465e:	60a3      	str	r3, [r4, #8]
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	4433      	add	r3, r6
 8004664:	6023      	str	r3, [r4, #0]
 8004666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800466a:	462a      	mov	r2, r5
 800466c:	f000 fae4 	bl	8004c38 <_realloc_r>
 8004670:	4606      	mov	r6, r0
 8004672:	2800      	cmp	r0, #0
 8004674:	d1e0      	bne.n	8004638 <__ssputs_r+0x5c>
 8004676:	4650      	mov	r0, sl
 8004678:	6921      	ldr	r1, [r4, #16]
 800467a:	f7ff feb9 	bl	80043f0 <_free_r>
 800467e:	230c      	movs	r3, #12
 8004680:	f8ca 3000 	str.w	r3, [sl]
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f04f 30ff 	mov.w	r0, #4294967295
 800468a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	e7e9      	b.n	8004666 <__ssputs_r+0x8a>
	...

08004694 <_svfiprintf_r>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	4698      	mov	r8, r3
 800469a:	898b      	ldrh	r3, [r1, #12]
 800469c:	4607      	mov	r7, r0
 800469e:	061b      	lsls	r3, r3, #24
 80046a0:	460d      	mov	r5, r1
 80046a2:	4614      	mov	r4, r2
 80046a4:	b09d      	sub	sp, #116	@ 0x74
 80046a6:	d510      	bpl.n	80046ca <_svfiprintf_r+0x36>
 80046a8:	690b      	ldr	r3, [r1, #16]
 80046aa:	b973      	cbnz	r3, 80046ca <_svfiprintf_r+0x36>
 80046ac:	2140      	movs	r1, #64	@ 0x40
 80046ae:	f7ff ff09 	bl	80044c4 <_malloc_r>
 80046b2:	6028      	str	r0, [r5, #0]
 80046b4:	6128      	str	r0, [r5, #16]
 80046b6:	b930      	cbnz	r0, 80046c6 <_svfiprintf_r+0x32>
 80046b8:	230c      	movs	r3, #12
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	f04f 30ff 	mov.w	r0, #4294967295
 80046c0:	b01d      	add	sp, #116	@ 0x74
 80046c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c6:	2340      	movs	r3, #64	@ 0x40
 80046c8:	616b      	str	r3, [r5, #20]
 80046ca:	2300      	movs	r3, #0
 80046cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80046ce:	2320      	movs	r3, #32
 80046d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80046d4:	2330      	movs	r3, #48	@ 0x30
 80046d6:	f04f 0901 	mov.w	r9, #1
 80046da:	f8cd 800c 	str.w	r8, [sp, #12]
 80046de:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004878 <_svfiprintf_r+0x1e4>
 80046e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80046e6:	4623      	mov	r3, r4
 80046e8:	469a      	mov	sl, r3
 80046ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046ee:	b10a      	cbz	r2, 80046f4 <_svfiprintf_r+0x60>
 80046f0:	2a25      	cmp	r2, #37	@ 0x25
 80046f2:	d1f9      	bne.n	80046e8 <_svfiprintf_r+0x54>
 80046f4:	ebba 0b04 	subs.w	fp, sl, r4
 80046f8:	d00b      	beq.n	8004712 <_svfiprintf_r+0x7e>
 80046fa:	465b      	mov	r3, fp
 80046fc:	4622      	mov	r2, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	4638      	mov	r0, r7
 8004702:	f7ff ff6b 	bl	80045dc <__ssputs_r>
 8004706:	3001      	adds	r0, #1
 8004708:	f000 80a7 	beq.w	800485a <_svfiprintf_r+0x1c6>
 800470c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800470e:	445a      	add	r2, fp
 8004710:	9209      	str	r2, [sp, #36]	@ 0x24
 8004712:	f89a 3000 	ldrb.w	r3, [sl]
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 809f 	beq.w	800485a <_svfiprintf_r+0x1c6>
 800471c:	2300      	movs	r3, #0
 800471e:	f04f 32ff 	mov.w	r2, #4294967295
 8004722:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004726:	f10a 0a01 	add.w	sl, sl, #1
 800472a:	9304      	str	r3, [sp, #16]
 800472c:	9307      	str	r3, [sp, #28]
 800472e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004732:	931a      	str	r3, [sp, #104]	@ 0x68
 8004734:	4654      	mov	r4, sl
 8004736:	2205      	movs	r2, #5
 8004738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800473c:	484e      	ldr	r0, [pc, #312]	@ (8004878 <_svfiprintf_r+0x1e4>)
 800473e:	f000 fa5f 	bl	8004c00 <memchr>
 8004742:	9a04      	ldr	r2, [sp, #16]
 8004744:	b9d8      	cbnz	r0, 800477e <_svfiprintf_r+0xea>
 8004746:	06d0      	lsls	r0, r2, #27
 8004748:	bf44      	itt	mi
 800474a:	2320      	movmi	r3, #32
 800474c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004750:	0711      	lsls	r1, r2, #28
 8004752:	bf44      	itt	mi
 8004754:	232b      	movmi	r3, #43	@ 0x2b
 8004756:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800475a:	f89a 3000 	ldrb.w	r3, [sl]
 800475e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004760:	d015      	beq.n	800478e <_svfiprintf_r+0xfa>
 8004762:	4654      	mov	r4, sl
 8004764:	2000      	movs	r0, #0
 8004766:	f04f 0c0a 	mov.w	ip, #10
 800476a:	9a07      	ldr	r2, [sp, #28]
 800476c:	4621      	mov	r1, r4
 800476e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004772:	3b30      	subs	r3, #48	@ 0x30
 8004774:	2b09      	cmp	r3, #9
 8004776:	d94b      	bls.n	8004810 <_svfiprintf_r+0x17c>
 8004778:	b1b0      	cbz	r0, 80047a8 <_svfiprintf_r+0x114>
 800477a:	9207      	str	r2, [sp, #28]
 800477c:	e014      	b.n	80047a8 <_svfiprintf_r+0x114>
 800477e:	eba0 0308 	sub.w	r3, r0, r8
 8004782:	fa09 f303 	lsl.w	r3, r9, r3
 8004786:	4313      	orrs	r3, r2
 8004788:	46a2      	mov	sl, r4
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	e7d2      	b.n	8004734 <_svfiprintf_r+0xa0>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	1d19      	adds	r1, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	9103      	str	r1, [sp, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfbb      	ittet	lt
 800479a:	425b      	neglt	r3, r3
 800479c:	f042 0202 	orrlt.w	r2, r2, #2
 80047a0:	9307      	strge	r3, [sp, #28]
 80047a2:	9307      	strlt	r3, [sp, #28]
 80047a4:	bfb8      	it	lt
 80047a6:	9204      	strlt	r2, [sp, #16]
 80047a8:	7823      	ldrb	r3, [r4, #0]
 80047aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80047ac:	d10a      	bne.n	80047c4 <_svfiprintf_r+0x130>
 80047ae:	7863      	ldrb	r3, [r4, #1]
 80047b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80047b2:	d132      	bne.n	800481a <_svfiprintf_r+0x186>
 80047b4:	9b03      	ldr	r3, [sp, #12]
 80047b6:	3402      	adds	r4, #2
 80047b8:	1d1a      	adds	r2, r3, #4
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	9203      	str	r2, [sp, #12]
 80047be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800487c <_svfiprintf_r+0x1e8>
 80047c8:	2203      	movs	r2, #3
 80047ca:	4650      	mov	r0, sl
 80047cc:	7821      	ldrb	r1, [r4, #0]
 80047ce:	f000 fa17 	bl	8004c00 <memchr>
 80047d2:	b138      	cbz	r0, 80047e4 <_svfiprintf_r+0x150>
 80047d4:	2240      	movs	r2, #64	@ 0x40
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	eba0 000a 	sub.w	r0, r0, sl
 80047dc:	4082      	lsls	r2, r0
 80047de:	4313      	orrs	r3, r2
 80047e0:	3401      	adds	r4, #1
 80047e2:	9304      	str	r3, [sp, #16]
 80047e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e8:	2206      	movs	r2, #6
 80047ea:	4825      	ldr	r0, [pc, #148]	@ (8004880 <_svfiprintf_r+0x1ec>)
 80047ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80047f0:	f000 fa06 	bl	8004c00 <memchr>
 80047f4:	2800      	cmp	r0, #0
 80047f6:	d036      	beq.n	8004866 <_svfiprintf_r+0x1d2>
 80047f8:	4b22      	ldr	r3, [pc, #136]	@ (8004884 <_svfiprintf_r+0x1f0>)
 80047fa:	bb1b      	cbnz	r3, 8004844 <_svfiprintf_r+0x1b0>
 80047fc:	9b03      	ldr	r3, [sp, #12]
 80047fe:	3307      	adds	r3, #7
 8004800:	f023 0307 	bic.w	r3, r3, #7
 8004804:	3308      	adds	r3, #8
 8004806:	9303      	str	r3, [sp, #12]
 8004808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800480a:	4433      	add	r3, r6
 800480c:	9309      	str	r3, [sp, #36]	@ 0x24
 800480e:	e76a      	b.n	80046e6 <_svfiprintf_r+0x52>
 8004810:	460c      	mov	r4, r1
 8004812:	2001      	movs	r0, #1
 8004814:	fb0c 3202 	mla	r2, ip, r2, r3
 8004818:	e7a8      	b.n	800476c <_svfiprintf_r+0xd8>
 800481a:	2300      	movs	r3, #0
 800481c:	f04f 0c0a 	mov.w	ip, #10
 8004820:	4619      	mov	r1, r3
 8004822:	3401      	adds	r4, #1
 8004824:	9305      	str	r3, [sp, #20]
 8004826:	4620      	mov	r0, r4
 8004828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800482c:	3a30      	subs	r2, #48	@ 0x30
 800482e:	2a09      	cmp	r2, #9
 8004830:	d903      	bls.n	800483a <_svfiprintf_r+0x1a6>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0c6      	beq.n	80047c4 <_svfiprintf_r+0x130>
 8004836:	9105      	str	r1, [sp, #20]
 8004838:	e7c4      	b.n	80047c4 <_svfiprintf_r+0x130>
 800483a:	4604      	mov	r4, r0
 800483c:	2301      	movs	r3, #1
 800483e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004842:	e7f0      	b.n	8004826 <_svfiprintf_r+0x192>
 8004844:	ab03      	add	r3, sp, #12
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	462a      	mov	r2, r5
 800484a:	4638      	mov	r0, r7
 800484c:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <_svfiprintf_r+0x1f4>)
 800484e:	a904      	add	r1, sp, #16
 8004850:	f3af 8000 	nop.w
 8004854:	1c42      	adds	r2, r0, #1
 8004856:	4606      	mov	r6, r0
 8004858:	d1d6      	bne.n	8004808 <_svfiprintf_r+0x174>
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	065b      	lsls	r3, r3, #25
 800485e:	f53f af2d 	bmi.w	80046bc <_svfiprintf_r+0x28>
 8004862:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004864:	e72c      	b.n	80046c0 <_svfiprintf_r+0x2c>
 8004866:	ab03      	add	r3, sp, #12
 8004868:	9300      	str	r3, [sp, #0]
 800486a:	462a      	mov	r2, r5
 800486c:	4638      	mov	r0, r7
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <_svfiprintf_r+0x1f4>)
 8004870:	a904      	add	r1, sp, #16
 8004872:	f000 f87d 	bl	8004970 <_printf_i>
 8004876:	e7ed      	b.n	8004854 <_svfiprintf_r+0x1c0>
 8004878:	08005a7a 	.word	0x08005a7a
 800487c:	08005a80 	.word	0x08005a80
 8004880:	08005a84 	.word	0x08005a84
 8004884:	00000000 	.word	0x00000000
 8004888:	080045dd 	.word	0x080045dd

0800488c <_printf_common>:
 800488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004890:	4616      	mov	r6, r2
 8004892:	4698      	mov	r8, r3
 8004894:	688a      	ldr	r2, [r1, #8]
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	4607      	mov	r7, r0
 800489a:	4293      	cmp	r3, r2
 800489c:	bfb8      	it	lt
 800489e:	4613      	movlt	r3, r2
 80048a0:	6033      	str	r3, [r6, #0]
 80048a2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048a6:	460c      	mov	r4, r1
 80048a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048ac:	b10a      	cbz	r2, 80048b2 <_printf_common+0x26>
 80048ae:	3301      	adds	r3, #1
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	0699      	lsls	r1, r3, #26
 80048b6:	bf42      	ittt	mi
 80048b8:	6833      	ldrmi	r3, [r6, #0]
 80048ba:	3302      	addmi	r3, #2
 80048bc:	6033      	strmi	r3, [r6, #0]
 80048be:	6825      	ldr	r5, [r4, #0]
 80048c0:	f015 0506 	ands.w	r5, r5, #6
 80048c4:	d106      	bne.n	80048d4 <_printf_common+0x48>
 80048c6:	f104 0a19 	add.w	sl, r4, #25
 80048ca:	68e3      	ldr	r3, [r4, #12]
 80048cc:	6832      	ldr	r2, [r6, #0]
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	42ab      	cmp	r3, r5
 80048d2:	dc2b      	bgt.n	800492c <_printf_common+0xa0>
 80048d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80048d8:	6822      	ldr	r2, [r4, #0]
 80048da:	3b00      	subs	r3, #0
 80048dc:	bf18      	it	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	0692      	lsls	r2, r2, #26
 80048e2:	d430      	bmi.n	8004946 <_printf_common+0xba>
 80048e4:	4641      	mov	r1, r8
 80048e6:	4638      	mov	r0, r7
 80048e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80048ec:	47c8      	blx	r9
 80048ee:	3001      	adds	r0, #1
 80048f0:	d023      	beq.n	800493a <_printf_common+0xae>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	6922      	ldr	r2, [r4, #16]
 80048f6:	f003 0306 	and.w	r3, r3, #6
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	bf14      	ite	ne
 80048fe:	2500      	movne	r5, #0
 8004900:	6833      	ldreq	r3, [r6, #0]
 8004902:	f04f 0600 	mov.w	r6, #0
 8004906:	bf08      	it	eq
 8004908:	68e5      	ldreq	r5, [r4, #12]
 800490a:	f104 041a 	add.w	r4, r4, #26
 800490e:	bf08      	it	eq
 8004910:	1aed      	subeq	r5, r5, r3
 8004912:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004916:	bf08      	it	eq
 8004918:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800491c:	4293      	cmp	r3, r2
 800491e:	bfc4      	itt	gt
 8004920:	1a9b      	subgt	r3, r3, r2
 8004922:	18ed      	addgt	r5, r5, r3
 8004924:	42b5      	cmp	r5, r6
 8004926:	d11a      	bne.n	800495e <_printf_common+0xd2>
 8004928:	2000      	movs	r0, #0
 800492a:	e008      	b.n	800493e <_printf_common+0xb2>
 800492c:	2301      	movs	r3, #1
 800492e:	4652      	mov	r2, sl
 8004930:	4641      	mov	r1, r8
 8004932:	4638      	mov	r0, r7
 8004934:	47c8      	blx	r9
 8004936:	3001      	adds	r0, #1
 8004938:	d103      	bne.n	8004942 <_printf_common+0xb6>
 800493a:	f04f 30ff 	mov.w	r0, #4294967295
 800493e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004942:	3501      	adds	r5, #1
 8004944:	e7c1      	b.n	80048ca <_printf_common+0x3e>
 8004946:	2030      	movs	r0, #48	@ 0x30
 8004948:	18e1      	adds	r1, r4, r3
 800494a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800494e:	1c5a      	adds	r2, r3, #1
 8004950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004954:	4422      	add	r2, r4
 8004956:	3302      	adds	r3, #2
 8004958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800495c:	e7c2      	b.n	80048e4 <_printf_common+0x58>
 800495e:	2301      	movs	r3, #1
 8004960:	4622      	mov	r2, r4
 8004962:	4641      	mov	r1, r8
 8004964:	4638      	mov	r0, r7
 8004966:	47c8      	blx	r9
 8004968:	3001      	adds	r0, #1
 800496a:	d0e6      	beq.n	800493a <_printf_common+0xae>
 800496c:	3601      	adds	r6, #1
 800496e:	e7d9      	b.n	8004924 <_printf_common+0x98>

08004970 <_printf_i>:
 8004970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004974:	7e0f      	ldrb	r7, [r1, #24]
 8004976:	4691      	mov	r9, r2
 8004978:	2f78      	cmp	r7, #120	@ 0x78
 800497a:	4680      	mov	r8, r0
 800497c:	460c      	mov	r4, r1
 800497e:	469a      	mov	sl, r3
 8004980:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004986:	d807      	bhi.n	8004998 <_printf_i+0x28>
 8004988:	2f62      	cmp	r7, #98	@ 0x62
 800498a:	d80a      	bhi.n	80049a2 <_printf_i+0x32>
 800498c:	2f00      	cmp	r7, #0
 800498e:	f000 80d1 	beq.w	8004b34 <_printf_i+0x1c4>
 8004992:	2f58      	cmp	r7, #88	@ 0x58
 8004994:	f000 80b8 	beq.w	8004b08 <_printf_i+0x198>
 8004998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800499c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049a0:	e03a      	b.n	8004a18 <_printf_i+0xa8>
 80049a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049a6:	2b15      	cmp	r3, #21
 80049a8:	d8f6      	bhi.n	8004998 <_printf_i+0x28>
 80049aa:	a101      	add	r1, pc, #4	@ (adr r1, 80049b0 <_printf_i+0x40>)
 80049ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049b0:	08004a09 	.word	0x08004a09
 80049b4:	08004a1d 	.word	0x08004a1d
 80049b8:	08004999 	.word	0x08004999
 80049bc:	08004999 	.word	0x08004999
 80049c0:	08004999 	.word	0x08004999
 80049c4:	08004999 	.word	0x08004999
 80049c8:	08004a1d 	.word	0x08004a1d
 80049cc:	08004999 	.word	0x08004999
 80049d0:	08004999 	.word	0x08004999
 80049d4:	08004999 	.word	0x08004999
 80049d8:	08004999 	.word	0x08004999
 80049dc:	08004b1b 	.word	0x08004b1b
 80049e0:	08004a47 	.word	0x08004a47
 80049e4:	08004ad5 	.word	0x08004ad5
 80049e8:	08004999 	.word	0x08004999
 80049ec:	08004999 	.word	0x08004999
 80049f0:	08004b3d 	.word	0x08004b3d
 80049f4:	08004999 	.word	0x08004999
 80049f8:	08004a47 	.word	0x08004a47
 80049fc:	08004999 	.word	0x08004999
 8004a00:	08004999 	.word	0x08004999
 8004a04:	08004add 	.word	0x08004add
 8004a08:	6833      	ldr	r3, [r6, #0]
 8004a0a:	1d1a      	adds	r2, r3, #4
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	6032      	str	r2, [r6, #0]
 8004a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e09c      	b.n	8004b56 <_printf_i+0x1e6>
 8004a1c:	6833      	ldr	r3, [r6, #0]
 8004a1e:	6820      	ldr	r0, [r4, #0]
 8004a20:	1d19      	adds	r1, r3, #4
 8004a22:	6031      	str	r1, [r6, #0]
 8004a24:	0606      	lsls	r6, r0, #24
 8004a26:	d501      	bpl.n	8004a2c <_printf_i+0xbc>
 8004a28:	681d      	ldr	r5, [r3, #0]
 8004a2a:	e003      	b.n	8004a34 <_printf_i+0xc4>
 8004a2c:	0645      	lsls	r5, r0, #25
 8004a2e:	d5fb      	bpl.n	8004a28 <_printf_i+0xb8>
 8004a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a34:	2d00      	cmp	r5, #0
 8004a36:	da03      	bge.n	8004a40 <_printf_i+0xd0>
 8004a38:	232d      	movs	r3, #45	@ 0x2d
 8004a3a:	426d      	negs	r5, r5
 8004a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a40:	230a      	movs	r3, #10
 8004a42:	4858      	ldr	r0, [pc, #352]	@ (8004ba4 <_printf_i+0x234>)
 8004a44:	e011      	b.n	8004a6a <_printf_i+0xfa>
 8004a46:	6821      	ldr	r1, [r4, #0]
 8004a48:	6833      	ldr	r3, [r6, #0]
 8004a4a:	0608      	lsls	r0, r1, #24
 8004a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a50:	d402      	bmi.n	8004a58 <_printf_i+0xe8>
 8004a52:	0649      	lsls	r1, r1, #25
 8004a54:	bf48      	it	mi
 8004a56:	b2ad      	uxthmi	r5, r5
 8004a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a5a:	6033      	str	r3, [r6, #0]
 8004a5c:	bf14      	ite	ne
 8004a5e:	230a      	movne	r3, #10
 8004a60:	2308      	moveq	r3, #8
 8004a62:	4850      	ldr	r0, [pc, #320]	@ (8004ba4 <_printf_i+0x234>)
 8004a64:	2100      	movs	r1, #0
 8004a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004a6a:	6866      	ldr	r6, [r4, #4]
 8004a6c:	2e00      	cmp	r6, #0
 8004a6e:	60a6      	str	r6, [r4, #8]
 8004a70:	db05      	blt.n	8004a7e <_printf_i+0x10e>
 8004a72:	6821      	ldr	r1, [r4, #0]
 8004a74:	432e      	orrs	r6, r5
 8004a76:	f021 0104 	bic.w	r1, r1, #4
 8004a7a:	6021      	str	r1, [r4, #0]
 8004a7c:	d04b      	beq.n	8004b16 <_printf_i+0x1a6>
 8004a7e:	4616      	mov	r6, r2
 8004a80:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a84:	fb03 5711 	mls	r7, r3, r1, r5
 8004a88:	5dc7      	ldrb	r7, [r0, r7]
 8004a8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004a8e:	462f      	mov	r7, r5
 8004a90:	42bb      	cmp	r3, r7
 8004a92:	460d      	mov	r5, r1
 8004a94:	d9f4      	bls.n	8004a80 <_printf_i+0x110>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d10b      	bne.n	8004ab2 <_printf_i+0x142>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	07df      	lsls	r7, r3, #31
 8004a9e:	d508      	bpl.n	8004ab2 <_printf_i+0x142>
 8004aa0:	6923      	ldr	r3, [r4, #16]
 8004aa2:	6861      	ldr	r1, [r4, #4]
 8004aa4:	4299      	cmp	r1, r3
 8004aa6:	bfde      	ittt	le
 8004aa8:	2330      	movle	r3, #48	@ 0x30
 8004aaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004aae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ab2:	1b92      	subs	r2, r2, r6
 8004ab4:	6122      	str	r2, [r4, #16]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	4621      	mov	r1, r4
 8004aba:	4640      	mov	r0, r8
 8004abc:	f8cd a000 	str.w	sl, [sp]
 8004ac0:	aa03      	add	r2, sp, #12
 8004ac2:	f7ff fee3 	bl	800488c <_printf_common>
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d14a      	bne.n	8004b60 <_printf_i+0x1f0>
 8004aca:	f04f 30ff 	mov.w	r0, #4294967295
 8004ace:	b004      	add	sp, #16
 8004ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	f043 0320 	orr.w	r3, r3, #32
 8004ada:	6023      	str	r3, [r4, #0]
 8004adc:	2778      	movs	r7, #120	@ 0x78
 8004ade:	4832      	ldr	r0, [pc, #200]	@ (8004ba8 <_printf_i+0x238>)
 8004ae0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	6831      	ldr	r1, [r6, #0]
 8004ae8:	061f      	lsls	r7, r3, #24
 8004aea:	f851 5b04 	ldr.w	r5, [r1], #4
 8004aee:	d402      	bmi.n	8004af6 <_printf_i+0x186>
 8004af0:	065f      	lsls	r7, r3, #25
 8004af2:	bf48      	it	mi
 8004af4:	b2ad      	uxthmi	r5, r5
 8004af6:	6031      	str	r1, [r6, #0]
 8004af8:	07d9      	lsls	r1, r3, #31
 8004afa:	bf44      	itt	mi
 8004afc:	f043 0320 	orrmi.w	r3, r3, #32
 8004b00:	6023      	strmi	r3, [r4, #0]
 8004b02:	b11d      	cbz	r5, 8004b0c <_printf_i+0x19c>
 8004b04:	2310      	movs	r3, #16
 8004b06:	e7ad      	b.n	8004a64 <_printf_i+0xf4>
 8004b08:	4826      	ldr	r0, [pc, #152]	@ (8004ba4 <_printf_i+0x234>)
 8004b0a:	e7e9      	b.n	8004ae0 <_printf_i+0x170>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f023 0320 	bic.w	r3, r3, #32
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	e7f6      	b.n	8004b04 <_printf_i+0x194>
 8004b16:	4616      	mov	r6, r2
 8004b18:	e7bd      	b.n	8004a96 <_printf_i+0x126>
 8004b1a:	6833      	ldr	r3, [r6, #0]
 8004b1c:	6825      	ldr	r5, [r4, #0]
 8004b1e:	1d18      	adds	r0, r3, #4
 8004b20:	6961      	ldr	r1, [r4, #20]
 8004b22:	6030      	str	r0, [r6, #0]
 8004b24:	062e      	lsls	r6, r5, #24
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	d501      	bpl.n	8004b2e <_printf_i+0x1be>
 8004b2a:	6019      	str	r1, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <_printf_i+0x1c4>
 8004b2e:	0668      	lsls	r0, r5, #25
 8004b30:	d5fb      	bpl.n	8004b2a <_printf_i+0x1ba>
 8004b32:	8019      	strh	r1, [r3, #0]
 8004b34:	2300      	movs	r3, #0
 8004b36:	4616      	mov	r6, r2
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e7bc      	b.n	8004ab6 <_printf_i+0x146>
 8004b3c:	6833      	ldr	r3, [r6, #0]
 8004b3e:	2100      	movs	r1, #0
 8004b40:	1d1a      	adds	r2, r3, #4
 8004b42:	6032      	str	r2, [r6, #0]
 8004b44:	681e      	ldr	r6, [r3, #0]
 8004b46:	6862      	ldr	r2, [r4, #4]
 8004b48:	4630      	mov	r0, r6
 8004b4a:	f000 f859 	bl	8004c00 <memchr>
 8004b4e:	b108      	cbz	r0, 8004b54 <_printf_i+0x1e4>
 8004b50:	1b80      	subs	r0, r0, r6
 8004b52:	6060      	str	r0, [r4, #4]
 8004b54:	6863      	ldr	r3, [r4, #4]
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b5e:	e7aa      	b.n	8004ab6 <_printf_i+0x146>
 8004b60:	4632      	mov	r2, r6
 8004b62:	4649      	mov	r1, r9
 8004b64:	4640      	mov	r0, r8
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	47d0      	blx	sl
 8004b6a:	3001      	adds	r0, #1
 8004b6c:	d0ad      	beq.n	8004aca <_printf_i+0x15a>
 8004b6e:	6823      	ldr	r3, [r4, #0]
 8004b70:	079b      	lsls	r3, r3, #30
 8004b72:	d413      	bmi.n	8004b9c <_printf_i+0x22c>
 8004b74:	68e0      	ldr	r0, [r4, #12]
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	4298      	cmp	r0, r3
 8004b7a:	bfb8      	it	lt
 8004b7c:	4618      	movlt	r0, r3
 8004b7e:	e7a6      	b.n	8004ace <_printf_i+0x15e>
 8004b80:	2301      	movs	r3, #1
 8004b82:	4632      	mov	r2, r6
 8004b84:	4649      	mov	r1, r9
 8004b86:	4640      	mov	r0, r8
 8004b88:	47d0      	blx	sl
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d09d      	beq.n	8004aca <_printf_i+0x15a>
 8004b8e:	3501      	adds	r5, #1
 8004b90:	68e3      	ldr	r3, [r4, #12]
 8004b92:	9903      	ldr	r1, [sp, #12]
 8004b94:	1a5b      	subs	r3, r3, r1
 8004b96:	42ab      	cmp	r3, r5
 8004b98:	dcf2      	bgt.n	8004b80 <_printf_i+0x210>
 8004b9a:	e7eb      	b.n	8004b74 <_printf_i+0x204>
 8004b9c:	2500      	movs	r5, #0
 8004b9e:	f104 0619 	add.w	r6, r4, #25
 8004ba2:	e7f5      	b.n	8004b90 <_printf_i+0x220>
 8004ba4:	08005a8b 	.word	0x08005a8b
 8004ba8:	08005a9c 	.word	0x08005a9c

08004bac <memmove>:
 8004bac:	4288      	cmp	r0, r1
 8004bae:	b510      	push	{r4, lr}
 8004bb0:	eb01 0402 	add.w	r4, r1, r2
 8004bb4:	d902      	bls.n	8004bbc <memmove+0x10>
 8004bb6:	4284      	cmp	r4, r0
 8004bb8:	4623      	mov	r3, r4
 8004bba:	d807      	bhi.n	8004bcc <memmove+0x20>
 8004bbc:	1e43      	subs	r3, r0, #1
 8004bbe:	42a1      	cmp	r1, r4
 8004bc0:	d008      	beq.n	8004bd4 <memmove+0x28>
 8004bc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004bc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004bca:	e7f8      	b.n	8004bbe <memmove+0x12>
 8004bcc:	4601      	mov	r1, r0
 8004bce:	4402      	add	r2, r0
 8004bd0:	428a      	cmp	r2, r1
 8004bd2:	d100      	bne.n	8004bd6 <memmove+0x2a>
 8004bd4:	bd10      	pop	{r4, pc}
 8004bd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004bda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004bde:	e7f7      	b.n	8004bd0 <memmove+0x24>

08004be0 <_sbrk_r>:
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	2300      	movs	r3, #0
 8004be4:	4d05      	ldr	r5, [pc, #20]	@ (8004bfc <_sbrk_r+0x1c>)
 8004be6:	4604      	mov	r4, r0
 8004be8:	4608      	mov	r0, r1
 8004bea:	602b      	str	r3, [r5, #0]
 8004bec:	f7fd f800 	bl	8001bf0 <_sbrk>
 8004bf0:	1c43      	adds	r3, r0, #1
 8004bf2:	d102      	bne.n	8004bfa <_sbrk_r+0x1a>
 8004bf4:	682b      	ldr	r3, [r5, #0]
 8004bf6:	b103      	cbz	r3, 8004bfa <_sbrk_r+0x1a>
 8004bf8:	6023      	str	r3, [r4, #0]
 8004bfa:	bd38      	pop	{r3, r4, r5, pc}
 8004bfc:	200006bc 	.word	0x200006bc

08004c00 <memchr>:
 8004c00:	4603      	mov	r3, r0
 8004c02:	b510      	push	{r4, lr}
 8004c04:	b2c9      	uxtb	r1, r1
 8004c06:	4402      	add	r2, r0
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	d101      	bne.n	8004c12 <memchr+0x12>
 8004c0e:	2000      	movs	r0, #0
 8004c10:	e003      	b.n	8004c1a <memchr+0x1a>
 8004c12:	7804      	ldrb	r4, [r0, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	428c      	cmp	r4, r1
 8004c18:	d1f6      	bne.n	8004c08 <memchr+0x8>
 8004c1a:	bd10      	pop	{r4, pc}

08004c1c <memcpy>:
 8004c1c:	440a      	add	r2, r1
 8004c1e:	4291      	cmp	r1, r2
 8004c20:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c24:	d100      	bne.n	8004c28 <memcpy+0xc>
 8004c26:	4770      	bx	lr
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c2e:	4291      	cmp	r1, r2
 8004c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c34:	d1f9      	bne.n	8004c2a <memcpy+0xe>
 8004c36:	bd10      	pop	{r4, pc}

08004c38 <_realloc_r>:
 8004c38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	4614      	mov	r4, r2
 8004c40:	460d      	mov	r5, r1
 8004c42:	b921      	cbnz	r1, 8004c4e <_realloc_r+0x16>
 8004c44:	4611      	mov	r1, r2
 8004c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c4a:	f7ff bc3b 	b.w	80044c4 <_malloc_r>
 8004c4e:	b92a      	cbnz	r2, 8004c5c <_realloc_r+0x24>
 8004c50:	f7ff fbce 	bl	80043f0 <_free_r>
 8004c54:	4625      	mov	r5, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c5c:	f000 f81a 	bl	8004c94 <_malloc_usable_size_r>
 8004c60:	4284      	cmp	r4, r0
 8004c62:	4606      	mov	r6, r0
 8004c64:	d802      	bhi.n	8004c6c <_realloc_r+0x34>
 8004c66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004c6a:	d8f4      	bhi.n	8004c56 <_realloc_r+0x1e>
 8004c6c:	4621      	mov	r1, r4
 8004c6e:	4638      	mov	r0, r7
 8004c70:	f7ff fc28 	bl	80044c4 <_malloc_r>
 8004c74:	4680      	mov	r8, r0
 8004c76:	b908      	cbnz	r0, 8004c7c <_realloc_r+0x44>
 8004c78:	4645      	mov	r5, r8
 8004c7a:	e7ec      	b.n	8004c56 <_realloc_r+0x1e>
 8004c7c:	42b4      	cmp	r4, r6
 8004c7e:	4622      	mov	r2, r4
 8004c80:	4629      	mov	r1, r5
 8004c82:	bf28      	it	cs
 8004c84:	4632      	movcs	r2, r6
 8004c86:	f7ff ffc9 	bl	8004c1c <memcpy>
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f7ff fbaf 	bl	80043f0 <_free_r>
 8004c92:	e7f1      	b.n	8004c78 <_realloc_r+0x40>

08004c94 <_malloc_usable_size_r>:
 8004c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c98:	1f18      	subs	r0, r3, #4
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	bfbc      	itt	lt
 8004c9e:	580b      	ldrlt	r3, [r1, r0]
 8004ca0:	18c0      	addlt	r0, r0, r3
 8004ca2:	4770      	bx	lr

08004ca4 <_init>:
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	bf00      	nop
 8004ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004caa:	bc08      	pop	{r3}
 8004cac:	469e      	mov	lr, r3
 8004cae:	4770      	bx	lr

08004cb0 <_fini>:
 8004cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cb2:	bf00      	nop
 8004cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cb6:	bc08      	pop	{r3}
 8004cb8:	469e      	mov	lr, r3
 8004cba:	4770      	bx	lr
